(()=>{"use strict";const t=function(t,e){this.from=t,this.dir=e},e=function(){function t(t,e,n){this.x=0,this.y=0,this.z=0,this.x=t,this.y=e,this.z=n}return t.min_max=function(e,n,i){return{min:new t(Math.min(Math.min(e.x,n.x),i.x),Math.min(Math.min(e.y,n.y),i.y),Math.min(Math.min(e.z,n.z),i.z)),max:new t(Math.max(Math.max(e.x,n.x),i.x),Math.max(Math.max(e.y,n.y),i.y),Math.max(Math.max(e.z,n.z),i.z))}},t.calculate_normal=function(e,n,i){var r=t.minus(n,e),o=t.minus(i,e);return t.cross(r,o).normalize()},t.calculate_center=function(t,e,n){return t.add(e).add(n).multiply(1/3)},t.uv=function(e,n){return new t(e,n,0)},t.reflect=function(e,n){var i=-2*t.dot(e,n);return n.multiply(i).add(e)},t.add=function(e,n){return new t(n.x+e.x,n.y+e.y,n.z+e.z)},t.minus=function(e,n){return new t(e.x-n.x,e.y-n.y,e.z-n.z)},t.multiply=function(e,n){return new t(e.x*n,e.y*n,e.z*n)},t.multiply3=function(e,n){return new t(e.x*n.x,e.y*n.y,e.z*n.z)},t.cross=function(e,n){return new t(e.y*n.z-e.z*n.y,-e.x*n.z+e.z*n.x,e.x*n.y-e.y*n.x)},t.dot=function(t,e){return t.x*e.x+t.y*e.y+t.z*e.z},t.equal=function(t,e){return f(t.x,e.x)&&f(t.y,e.y)&&f(t.z,e.z)},t.lerp=function(e,n,i){return new t(y(e.x,n.x,i),y(e.y,n.y,i),y(e.z,n.z,i))},t.prototype.clamp_x=function(t,e){return this.x=p(this.x,t,e),this},t.prototype.clamp_y=function(t,e){return this.y=p(this.y,t,e),this},t.prototype.length=function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},t.prototype.normalize=function(){var t=this.length();return this.x=this.x/t,this.y=this.y/t,this.z=this.z/t,this},t.prototype.add=function(e){return t.add(this,e)},t.prototype.minus=function(e){return t.minus(this,e)},t.prototype.multiply=function(e){return t.multiply(this,e)},t.prototype.negative=function(){return t.multiply(this,-1)},t.prototype.Vector2D=function(){return this.z=0,this},t.prototype.clone=function(){return new t(this.x,this.y,this.z)},t.up=new t(0,1,0),t.zero=new t(0,0,0),t}(),n=function(t,e){this.p=t,this.w=e},i=function(){function t(t,i){this.from=t,this.dir=new n(e.minus(i.p,t.p),i.w-t.w)}return t.prototype.t_when_x_equal_w=function(){return(this.from.w-this.from.p.x)/(this.dir.p.x-this.dir.w)},t.prototype.t_when_y_equal_w=function(){return(this.from.w-this.from.p.y)/(this.dir.p.y-this.dir.w)},t.prototype.t_when_z_equal_w=function(){return(this.from.w-this.from.p.z)/(this.dir.p.z-this.dir.w)},t.prototype.t_when_x_equal_minus_w=function(){return-(this.from.w+this.from.p.x)/(this.dir.w+this.dir.p.x)},t.prototype.t_when_y_equal_minus_w=function(){return-(this.from.w+this.from.p.y)/(this.dir.w+this.dir.p.y)},t.prototype.t_when_z_equal_zero_w=function(){return-this.from.p.z/this.dir.p.z},t}(),r=function(){function t(t,e){this.C=t,this.N=e}return t.prototype.is_positive=function(t){var n=e.minus(t,this.C);return e.dot(n,this.N)>0},t.prototype.hit=function(e,n){var i=t.hit(e,this);return i.is_hit&&(i.s=n),i},t.hit=function(t,n){var i=t.from,r=t.dir,o=e.dot(r,n.N),s=e.dot(e.minus(n.C,i),n.N);if(f(o,0))return{is_hit:!1,hit_pos:null,t:-1};var a=s/o;return{is_hit:a>0,hit_pos:i.add(r.multiply(a)),i:r,t:a,normal:n.N}},t}(),o=function(){function t(t,e,n,i){this.xAxis=t,this.yAxis=e,this.zAxis=n,this.position=i}return t.transformPoint=function(t,e){var n=t.xAxis.multiply(e.x),i=t.yAxis.multiply(e.y),r=t.zAxis.multiply(e.z);return t.position.add(n).add(i).add(r)},t.transformVector=function(t,e){var n=t.xAxis.multiply(e.x),i=t.yAxis.multiply(e.y),r=t.zAxis.multiply(e.z);return n.add(i).add(r)},t.transformTransform=function(e,n){return new t(t.transformVector(e,n.xAxis),t.transformVector(e,n.yAxis),t.transformVector(e,n.zAxis),t.transformPoint(e,n.position))},t.rotateByZ=function(n){var i=u(n),r=Math.cos(i),o=Math.sin(i);return new t(new e(r,o,0),new e(-o,r,0),new e(0,0,1),e.zero)},t.rotateByY=function(n){var i=u(n),r=Math.cos(i),o=Math.sin(i),s=new e(o,0,r);return new t(new e(r,0,-o),new e(0,1,0),s,e.zero)},t.rotateByX=function(n){var i=u(n),r=Math.cos(i),o=Math.sin(i);return new t(new e(1,0,0),new e(0,r,o),new e(0,-o,r),new e(0,0,0))},t.offset=function(n,i,r){return new t(new e(1,0,0),new e(0,1,0),new e(0,0,1),new e(n,i,r))},t}(),s=function(){function t(e,n,i,r){this.add=function(e){return new t(this.r+e.r,this.g+e.g,this.b+e.b,1)},this.r=e,this.g=n,this.b=i,this.a=r}return t.lerp=function(e,n,i){return new t(y(e.r,n.r,i),y(e.g,n.g,i),y(e.b,n.b,i),1)},t.prototype.multiply=function(e){return new t(this.r*e,this.g*e,this.b*e,1)},t.prototype.toString=function(){return"( "+this.r+" , "+this.g+" , "+this.b+" )"},t.debug=new t(1,0,1,1),t.golden=new t(1,215/255,0,1),t.yellow=new t(1,1,0,1),t.pink=new t(1,192/255,203/255,1),t.black=new t(0,0,0,1),t.red=new t(1,0,0,1),t}(),a=function(){function t(e,n){this.multiply=function(e){return new t(this.x*e,this.y*e)},this.toString=function(){return"( "+this.x+" , "+this.y+" )"},this.x=e,this.y=n}return t.add=function(e,n){return new t(n.x+e.x,n.y+e.y)},t.minus=function(e,n){return new t(e.x-n.x,e.y-n.y)},t.prototype.plus=function(e){return new t(this.x+e.x,this.y+e.y)},t}(),c=function(){function t(){}return t.clear=function(e,n){t.color_buffer.clear(e),t.z_buffer.clear(n)},t.show=function(e){e.set_pixel((function(e,n){return t.color_buffer.get(e,n)})),e.show_buffer("canvas")},t.clip_helper=function(t,e,n,i,r){for(var o=[],s=0,a=t;s<a.length;s++)for(var c=0,h=w(a[s],e,n,i,r);c<h.length;c++){var u=h[c];o.push(u)}return o},t.clip_in_Projection_Space=function(e,n,i,r){var o=[new h(e,n,i)],s=t.clip_helper(o,(function(t){return t.v0.w<t.v0.p.z}),(function(t){return t.v1.w<t.v1.p.z}),(function(t){return t.v2.w<t.v2.p.z}),l.Far);return s=t.clip_helper(s,(function(t){return 0>t.v0.p.z}),(function(t){return 0>t.v1.p.z}),(function(t){return 0>t.v2.p.z}),l.Near),s=t.clip_helper(s,(function(t){return t.v0.w<t.v0.p.x}),(function(t){return t.v1.w<t.v1.p.x}),(function(t){return t.v2.w<t.v2.p.x}),l.Right),s=t.clip_helper(s,(function(t){return-t.v0.w>t.v0.p.x}),(function(t){return-t.v1.w>t.v1.p.x}),(function(t){return-t.v2.w>t.v2.p.x}),l.Left),s=t.clip_helper(s,(function(t){return t.v0.w<t.v0.p.y}),(function(t){return t.v1.w<t.v1.p.y}),(function(t){return t.v2.w<t.v2.p.y}),l.Top),t.clip_helper(s,(function(t){return-t.v0.w>t.v0.p.y}),(function(t){return-t.v1.w>t.v1.p.y}),(function(t){return-t.v2.w>t.v2.p.y}),l.Bottom)},t.MVP_backface_culling_clipping=function(n,i,r){var s=o.transformPoint(r,n.v0.p),a=o.transformPoint(r,n.v1.p),c=o.transformPoint(r,n.v2.p),h=i.toCameraSpace(s),u=i.toCameraSpace(a),l=i.toCameraSpace(c),f=i.toProjectionSpace(h),p=i.toProjectionSpace(u),_=i.toProjectionSpace(l),y=e.calculate_normal(h,u,l),w=e.minus(e.zero,e.calculate_center(h,u,l)).normalize();if(e.dot(y,w)<=0)return[];var x=n.v0.clone().update_p(f).update_w(h.z),m=n.v1.clone().update_p(p).update_w(u.z),v=n.v2.clone().update_p(_).update_w(l.z);return t.clip_in_Projection_Space(x,m,v,i)},t.set_peek_screen_pos=function(e){t.peek_screen_pos=e},t.print_peek_position=function(){t.print_once=!0,console.log("print_peek_position")},t.process=function(n,i,r,o){for(var c=[],u=0,l=t.MVP_backface_culling_clipping(n,i,r);u<l.length;u++){var f=l[u],p=i.toNDC(f.v0.p,f.v0.w),_=i.toNDC(f.v1.p,f.v1.w),y=i.toNDC(f.v2.p,f.v2.w);t.ndc_clamp_effect&&(p.clamp_x(-1,1).clamp_y(-1,1),_.clamp_x(-1,1).clamp_y(-1,1),y.clamp_x(-1,1).clamp_y(-1,1));var w=i.toScreenSpace(p),x=i.toScreenSpace(_),m=i.toScreenSpace(y);c.push(w),c.push(x),c.push(m);var v=e.min_max(w,x,m),d=v.min,g=v.max,b=Math.floor(d.x),z=Math.floor(g.x),M=Math.floor(d.y),k=Math.floor(g.y);b=Math.max(0,b),M=Math.max(0,M),z=Math.min(this.color_buffer.w-1,z),k=Math.min(this.color_buffer.h-1,k);for(var S=b;S<=z;++S)for(var N=M;N<=k;++N){var W=new e(S+.5,N+.5,0),C=h["calculate_α_β_γ"](w,x,m,W),P=C.success,B=C.α,E=C.β,I=C.γ;if(P&&(t.print_once&&S==t.peek_screen_pos.x&&N==t.peek_screen_pos.y&&console.log("is_in_triangle",h.is_in_triangle(B,E,I),B,E,I),h.is_in_triangle(B,E,I))){var A=h.interpolation(I,B,E,p.z,_.z,y.z);if(!(A>t.z_buffer.get(S,N))){t.z_buffer.set(S,N,A);var D=1/h.interpolation(I,B,E,1/f.v0.w,1/f.v1.w,1/f.v2.w),q=h.interpolation(I,B,E,f.v0.u/f.v0.w,f.v1.u/f.v1.w,f.v2.u/f.v2.w)*D,H=h.interpolation(I,B,E,f.v0.v/f.v0.w,f.v1.v/f.v1.w,f.v2.v/f.v2.w)*D,V=o.get(new a(q,H)).color;t.use_solid_color?t.color_buffer.set(S,N,s.yellow):t.color_buffer.set(S,N,V),t.print_once&&S==t.peek_screen_pos.x&&N==t.peek_screen_pos.y&&console.log("在三角形內",V)}}}}return t.print_once&&(t.print_once=!1,console.log("finish peek")),c},t.use_solid_color=!1,t.ndc_clamp_effect=!1,t.print_once=!1,t}(),h=function(){function n(t,e,n){this.v0=t,this.v1=e,this.v2=n}return n.calculate_α_β_γ=function(n,i,o,s){var a=e.minus(s,n),c=e.minus(i,n),h=e.minus(o,n),u=new e(-c.y,c.x,0),l=new t(s,h.multiply(-1)),f=r.hit(l,new r(n,u)).hit_pos;if(null==f)return{success:!1,α:1,β:0,γ:0};var p=e.minus(f,n),_=e.minus(a,p),y=0==c.x?p.y/c.y:p.x/c.x,w=0==h.x?_.y/h.y:_.x/h.x;return isNaN(y)&&console.log(p.x,c.x),isNaN(w)&&console.log(_.x,h.x),{success:!0,α:y,β:w,γ:1-y-w}},n.is_in_triangle=function(t,e,n){return t>=0&&e>=0&&n>=0},n.interpolation=function(t,e,n,i,r,o){return i*t+r*e+o*n},n.prototype.rasterize=function(t,e,n){this.v_s=c.process(this,t,e,n)},n.prototype.draw=function(t){if(null!=this.v_s)for(var e=this.v_s.length/3,n=1;n<=e;++n){var i=3*n-1;t.moveTo(this.v_s[i].x,this.v_s[i].y),t.lineTo(this.v_s[i-2].x,this.v_s[i-2].y),t.lineTo(this.v_s[i-1].x,this.v_s[i-1].y),t.lineTo(this.v_s[i].x,this.v_s[i].y)}},n}();function u(t){return Math.PI*t/180}var l;function f(t,e){return Math.abs(t-e)<.001}function p(t,e,n){return t>n?n:t<e?e:t}function _(t,e){return t.map((function(t){return t.h.hit(e,t.s)})).filter((function(t){return t.is_hit})).sort((function(t,e){return t.t-e.t}))}function y(t,e,n){return t+n*(e-t)}function w(t,e,n,r,o){var s=[],a=function(t,e){var n=new i(t.get_Vector4D(),e.get_Vector4D()),r=0;switch(o){case l.Far:r=n.t_when_z_equal_w();break;case l.Near:r=n.t_when_z_equal_zero_w();break;case l.Right:r=n.t_when_x_equal_w();break;case l.Left:r=n.t_when_x_equal_minus_w();break;case l.Top:r=n.t_when_y_equal_w();break;case l.Bottom:r=n.t_when_y_equal_minus_w()}return x.lerp(t,e,r)},c=function(t,e,n){s[0]=new h(t,a(t,e),a(t,n))},u=function(t,e,n){var i=a(n,t),r=a(t,e);s[0]=new h(n,i,r),s[1]=new h(n,r,e)};return e(t)?n(t)?r(t)||c(t.v2,t.v0,t.v1):r(t)?c(t.v1,t.v2,t.v0):u(t.v0,t.v1,t.v2):n(t)?r(t)?c(t.v0,t.v1,t.v2):u(t.v1,t.v2,t.v0):r(t)?u(t.v2,t.v0,t.v1):s[0]=t,s}!function(t){t[t.Near=0]="Near",t[t.Far=1]="Far",t[t.Right=2]="Right",t[t.Left=3]="Left",t[t.Top=4]="Top",t[t.Bottom=5]="Bottom"}(l||(l={})),function(){function t(){}t.accDiv=function(t,e){var n=0,i=0;try{n=t.toString().split(".")[1].length}catch(t){}try{i=e.toString().split(".")[1].length}catch(t){}return Number(t.toString().replace(".",""))/Number(e.toString().replace(".",""))*Math.pow(10,i-n)},t.accAdd=function(t,e){var n,i,r,o;try{n=t.toString().split(".")[1].length}catch(t){n=0}try{i=e.toString().split(".")[1].length}catch(t){i=0}if(o=Math.abs(n-i),r=Math.pow(10,Math.max(n,i)),o>0){var s=Math.pow(10,o);n>i?(t=Number(t.toString().replace(".","")),e=Number(e.toString().replace(".",""))*s):(t=Number(t.toString().replace(".",""))*s,e=Number(e.toString().replace(".","")))}else t=Number(t.toString().replace(".","")),e=Number(e.toString().replace(".",""));return(t+e)/r}}(),function(){function t(){}t.drawLine=function(t,e,n,i){var r=t,o=e,s=a.minus(o,r),c=100;if(0!=s.y)if(0!=s.x){var h=s.x/s.y,u=Math.abs(h);if(h>0){if(u<=1)for(p=1;p<c;p++){r.y=r.y+1,r.x=r.x+u;var l=Math.floor(r.x);if(!i.is_legal_index(l,r.y))break;if(i.is_over_positive(r.x,r.y,o.x,o.y))break;i.set(l,r.y,n)}else if(u>1)for(p=1;p<c;p++){r.y=r.y+1/u,r.x=r.x+1;var f=Math.floor(r.y);if(!i.is_legal_index(r.x,f))break;if(i.is_over_positive(r.x,r.y,o.x,o.y))break;i.set(r.x,f,n)}}else if(h<0)if(u<=1)for(p=1;p<c&&(r.y=r.y+1,r.x=r.x-u,l=Math.floor(r.x),i.is_legal_index(l,r.y))&&!i.is_over_negative(r.x,r.y,o.x,o.y);p++)i.set(l,r.y,n);else if(u>1)for(p=1;p<c&&(r.y=r.y+1/u,r.x=r.x-1,f=Math.floor(r.y),i.is_legal_index(r.x,f))&&!i.is_over_negative(r.x,r.y,o.x,o.y);p++)i.set(r.x,f,n)}else for(var p=1;p<c&&(r.y=r.y+1,i.is_legal_index(r.x,r.y))&&!(r.y>o.y);p++)i.set(r.x,r.y,n);else for(p=1;p<c&&(r.x=r.x+1,i.is_legal_index(r.x,r.y))&&!(r.x>o.x);p++)i.set(r.x,r.y,n)},t.drawCircle=function(e,n){for(var i=2*Math.PI/50,r=new a(10,10),o=-Math.PI/3,s=0;s<50;s++){var c=Math.floor(r.x+9*Math.cos(o+i*s)),h=Math.floor(r.y+9*Math.sin(o+i*s)),u=Math.floor(r.x+9*Math.cos(o+i*(s+1))),l=Math.floor(r.y+9*Math.sin(o+i*(s+1)));t.drawLineWrapper(new a(c,h),new a(u,l),e,n)}},t.drawStar=function(e,n){for(var i=2*Math.PI/5,r=new a(10,10),o=-Math.PI/3,s=0,c=0;c<5;c++){var h=Math.floor(r.x+9*Math.cos(o+i*s)),u=Math.floor(r.y+9*Math.sin(o+i*s)),l=Math.floor(r.x+9*Math.cos(o+i*(s+2))),f=Math.floor(r.y+9*Math.sin(o+i*(s+2)));t.drawLineWrapper(new a(h,u),new a(l,f),e,n),s+=2}},t.drawLineWrapper=function(e,n,i,r){e.y<n.y?t.drawLine(e,n,i,r):n.y<e.y?t.drawLine(n,e,i,r):e.x<n.x?t.drawLine(e,n,i,r):n.x<e.x&&t.drawLine(n,e,i,r)}}();const x=function(){function t(t,e,n,i,r){this.p=t,this.n=e,this.w=n,this.u=i,this.v=r}return t.build_vertex=function(e,n,i,r,o){return new t(e,n,i,r,o)},t.lerp=function(n,i,r){return new t(e.lerp(n.p,i.p,r),e.lerp(n.n,i.n,r),y(n.w,i.w,r),y(n.u,i.u,r),y(n.v,i.v,r))},t.prototype.clone=function(){return new t(this.p.clone(),this.n.clone(),this.w,this.u,this.v)},t.prototype.update_p=function(t){return this.p=t,this},t.prototype.update_w=function(t){return this.w=t,this},t.prototype.get_Vector4D=function(){return new n(this.p,this.w)},t}(),m=function(){function t(){this.triangles=[];var t=new e(0,0,-1);this.triangles.push(new h(new x(new e(-10,-10,-10),t,1,0,0),new x(new e(-10,10,-10),t,1,0,1),new x(new e(10,10,-10),t,1,1,1)));for(var n=[o.rotateByY(90),o.rotateByY(180),o.rotateByY(270),o.rotateByX(90),o.rotateByX(-90)],i=0;i<n.length;++i){var r=n[i];o.transformPoint(r,t)}}return t.prototype.rasterize=function(t,e,n){this.triangles_after_clip=this.triangles;for(var i=0;i<this.triangles_after_clip.length;++i)this.triangles_after_clip[i].rasterize(t,e,n)},t.prototype.draw_line=function(t){t.globalCompositeOperation="destination-over",t.strokeStyle="rgba(255,0,0,1)",t.beginPath();for(var e=0;e<this.triangles_after_clip.length;++e)this.triangles_after_clip[e].draw(t);t.stroke()},t}(),v=function(){function n(t){this.color=t}return n.prototype.shading=function(n,i,r,o){var s=n.normal,a=p(-e.dot(i,s),0,1),c=function(e,n,i){var r=n.negative(),o=e.hit_pos.add(r.multiply(.001));return 0!=_(i,new t(o,r)).length?.45:1}(n,i,r);return this.color.multiply(a).multiply(c)},n.yellow=new n(new e(1,1,0)),n.red=new n(new e(1,0,0)),n.green=new n(new e(0,1,0)),n.blue=new n(new e(0,0,1)),n.gray=new n(new e(.5,.5,.5)),n.white=new n(new e(1,1,1)),n}(),d=function(){function n(t,n,i,r,o,s,a){this.moveEye=function(t,n){this.eye=e.add(this.eye,n.multiply(t))},this.ratio=r/o,this.screenW=r,this.screenH=o,this.screenCenterX=.5*this.screenW,this.screenCenterY=.5*this.screenH,this.halfW=.5*this.screenW,this.halfH=.5*this.screenH,this.z_axis=e.minus(n,t).normalize();var c=e.up;this.x_axis=e.cross(c,this.z_axis).normalize(),this.y_axis=e.cross(this.z_axis,this.x_axis),this.eye=t,this.fov_degree=i,this.N=s,this.F=a,this.a=a/(a-s),this.b=-s*a/(a-s),console.log(this.a,this.b)}return n.prototype.addPitch=function(t){},n.prototype.addYaw=function(t){},n.prototype.create_ray_dir=function(t,e,n){var i=u(.5*this.fov_degree),r=Math.tan(i),o=r*n;return this.z_axis.add(this.x_axis.multiply(t*o)).add(this.y_axis.multiply(e*r))},n.prototype.toCameraSpace=function(t){var n=t.minus(this.eye);return new e(e.dot(n,this.x_axis),e.dot(n,this.y_axis),e.dot(n,this.z_axis))},n.prototype.toProjectionSpace=function(t){var n=.5*u(this.fov_degree),i=1/Math.tan(n),r=1/(this.ratio*Math.tan(n));return new e(t.x*r,t.y*i,t.z*this.a+this.b)},n.prototype.toNDC=function(t,e){var n=1/e;return t.multiply(n)},n.prototype.toScreenSpace=function(t){var n=this.halfW*t.x+this.screenCenterX,i=-this.halfH*t.y+this.screenCenterY;return new e(n,i,0)},n.prototype.render=function(n,i){var r=this,o=new e(1,-1,0).normalize(),s=.5/n.h,a=[{x:0,y:0},{x:s,y:s},{x:-s,y:s},{x:-s,y:-s},{x:s,y:-s}];n.render_pixel((function(n,s,c){var h=r.create_ray_dir(n,s,c),u=a.map((function(e){var n=h.add(r.x_axis.multiply(e.x)).add(r.y_axis.multiply(e.y));return new t(r.eye,n.normalize())})).map((function(t){var e=_(i,t);if(0!=e.length){var n=e[0];return n.s.shading(n,o,i,1)}return v.gray.color})),l=a.length;return u.reduce((function(t,e){return t.add(e)}),e.zero).multiply(1/l)}))},n}(),g=function(){function t(t,e){void 0===t&&(t=320),void 0===e&&(e=240),this.w=320,this.h=240,this.backbuffer=null,this.w=t,this.h=e,this.backbuffer=new OffscreenCanvas(this.w,this.h)}return t.prototype.render_pixel=function(t){for(var e=this.backbuffer.getContext("2d"),n=e.getImageData(0,0,this.w,this.h),i=n.data,r=this.w/this.h,o=0;o<this.h;++o)for(var s=0;s<this.w;++s){var a=4*(s+o*this.w),c=(s+.5)/this.w,h=(o+.5)/this.h,u=t(2*c-1,2*(h=1-h)-1,r),l=u.x,f=u.y,p=u.z,_=1/2.1;l=Math.pow(l,_),f=Math.pow(f,_),p=Math.pow(p,_),i[a++]=Math.round(255*l),i[a++]=Math.round(255*f),i[a++]=Math.round(255*p),i[a]=255}e.putImageData(n,0,0)},t.prototype.set_pixel=function(t){for(var e=this.backbuffer.getContext("2d"),n=e.getImageData(0,0,this.w,this.h),i=n.data,r=(this.w,this.h,0);r<this.h;++r)for(var o=0;o<this.w;++o){var s=4*(o+r*this.w),a=t(o,r),c=a.r,h=a.g,u=a.b,l=1/2.1;c=Math.pow(c,l),h=Math.pow(h,l),u=Math.pow(u,l),i[s++]=Math.round(255*c),i[s++]=Math.round(255*h),i[s++]=Math.round(255*u),i[s]=255}e.putImageData(n,0,0)},t.prototype.show_buffer=function(t){var e=document.getElementById(t);e.style.width=this.w+"px",e.style.height=this.h+"px",e.width=e.clientWidth,e.height=e.clientHeight,e.getContext("bitmaprenderer").transferFromImageBitmap(this.backbuffer.transferToImageBitmap())},t}(),b=function(){function t(t,e){this.w=t,this.h=e,this.buffer=new Array(this.h),console.log(t,e);for(var n=0;n<this.h;++n)this.buffer[n]=new Array(this.w)}return t.prototype.set=function(t,e,n){if(!this.is_legal_index(t,e))return console.log("set",this.w,this.h,t,e),s.debug;this.buffer[e][t]=n},t.prototype.get=function(t,e){return this.is_legal_index(t,e)?this.buffer[e][t]:(console.log("get",this.w,this.h,t,e),s.debug)},t.prototype.clear=function(t){for(var e=0;e<this.h;++e)for(var n=0;n<this.w;++n)this.buffer[e][n]=t},t.prototype.get_clamp_mode=function(t,e){var n=p(t,0,this.w-1),i=p(e,0,this.h-1);return this.buffer[i][n]},t.prototype.is_legal_index=function(t,e){return t>=0&&t<this.w&&e>=0&&e<this.h},t.prototype.is_over_negative=function(t,e,n,i){return e>i||t<n},t.prototype.is_over_positive=function(t,e,n,i){return e>i||t>n},t}(),z=function(){function t(){}return t.set_canvas=function(e,n,i){var r=document.getElementById(e);return t.set_canvas_element(r,n,i)},t.set_canvas_element=function(t,e,n){return t.style.width=e+"px",t.style.height=n+"px",t.width=t.clientWidth,t.height=t.clientHeight,t},t.get_context=function(t){return document.getElementById(t).getContext("2d")},t.get_context_by_canvas=function(t){return t.getContext("2d")},t.convert=function(t){return"rgba("+Math.floor(255*t.r)+","+Math.floor(255*t.g)+","+Math.floor(255*t.b)+",1)"},t}(),M=function(){function t(){}return t.uv_to_buffer_space=function(t){return new a(t.x,1-t.y)},t.buffer_to_uv_space=function(t){return new a(t.x,1-t.y)},t.texture2D=function(e,n){var i,r=n.w,o=n.h,s=t.uv_to_buffer_space(e),c=s.x,h=s.y,u=1/r,l=1/o,f=.5*u,p=.5*l,_=c/u,y=h/l,w=Math.floor(_),x=Math.floor(y),m=c%u,v=h%l;if(m>=f&&v>=p){_==w&&(w-=1),y==x&&(x-=1);var d=new a(w,x),g=new a(d.x+1,d.y),b=new a(d.x,d.y+1),z=new a(d.x+1,d.y+1);return{rectUV:i=new a((m-f)/u,(v-p)/l),NW:d,NE:g,SW:b,SE:z,color:t.Bilinear_Sampler(i,d,g,b,z,n)}}if(m<=f&&v>=p){y==x&&(x-=1),d=new a(w,x);var M=new a(d.x-1,d.y);return b=new a(d.x-1,d.y+1),z=new a(d.x,d.y+1),{rectUV:i=new a((m+f)/u,(v-p)/l),NW:M,NE:d,SW:b,SE:z,color:t.Bilinear_Sampler(i,M,d,b,z,n)}}return m<=f&&v<=p?(d=new a(w,x),M=new a(d.x-1,d.y-1),g=new a(d.x,d.y-1),b=new a(d.x-1,d.y),{rectUV:i=new a((m+f)/u,(v+p)/l),NW:M,NE:g,SW:b,SE:d,color:t.Bilinear_Sampler(i,M,g,b,d,n)}):m>=f&&v<=p?(_==w&&(w-=1),d=new a(w,x),M=new a(d.x,d.y-1),g=new a(d.x+1,d.y-1),z=new a(d.x+1,d.y),{rectUV:i=new a((m-f)/u,(v+p)/l),NW:M,NE:g,SW:d,SE:z,color:t.Bilinear_Sampler(i,M,g,d,z,n)}):void 0},t.Bilinear_Sampler=function(t,e,n,i,r,o){var a=o.get_clamp_mode(e.x,e.y),c=o.get_clamp_mode(n.x,n.y),h=o.get_clamp_mode(i.x,i.y),u=o.get_clamp_mode(r.x,r.y),l=s.lerp(a,c,t.x),f=s.lerp(h,u,t.x);return s.lerp(l,f,t.y)},t}(),k=function(){function t(t){this.load_texture_buffer=this.load_texture_buffer.bind(this),this.begin_load(t)}return t.prototype.begin_load=function(t){this.img=new Image,this.img.src=t,this.img.onload=this.load_texture_buffer},t.prototype.load_texture_buffer=function(){var t=this.img.width,e=this.img.height,n=z.set_canvas("canvas_texture",t,e),i=z.get_context_by_canvas(n);i.drawImage(this.img,0,0),this.buffer=new b(t,e);for(var r=0;r<e;++r)for(var o=0;o<t;++o){var a=i.getImageData(o,r,1,1).data;this.buffer.set(o,r,new s(a[0]/255,a[1]/255,a[2]/255,a[3]/255))}},t.prototype.get=function(t){return this.buffer?M.texture2D(t,this.buffer):{rectUV:null,NW:null,NE:null,SW:null,SE:null,color:s.black}},t}(),S=function(){function t(){}return t.$=function(t){return document.getElementById(t)},t}();new(function(){function t(){var t=this;this.cameraIndex_view=1,this.cameraIndex_control=0,this.camera=null,this.screenWidth=320,this.screenHeight=240,this.box=null,this.peek_screen_pos=new a(45,60),window.onload=function(){t.init(),S.$("btn_timeout").onclick=function(){t.stop()},S.$("btn_resume").onclick=function(){t.resume()},S.$("btn_toggle_drawing_mode").onclick=function(){c.use_solid_color=!c.use_solid_color},S.$("btn_toggle_ndc_clamp_effect").onclick=function(){c.ndc_clamp_effect=!c.ndc_clamp_effect},S.$("btn_set_peek_position").onclick=function(){var e=Number(S.$("text_s_x").value),n=Number(S.$("text_s_y").value);t.peek_screen_pos.x=e,t.peek_screen_pos.y=n,c.set_peek_screen_pos(t.peek_screen_pos),console.log(e,n)},S.$("btn_print_peek_position").onclick=function(){c.print_peek_position()}},document.onkeydown=this.keyProc.bind(this),this.drawScene=this.drawScene.bind(this),c.set_peek_screen_pos(this.peek_screen_pos)}return t.prototype.init=function(){c.color_buffer=new b(this.screenWidth,this.screenHeight),c.z_buffer=new b(this.screenWidth,this.screenHeight),this.render_target=new g(this.screenWidth,this.screenHeight),this.ctx=z.set_canvas("canvas_line",this.screenWidth,this.screenHeight).getContext("2d"),z.set_canvas("canvas",this.screenWidth,this.screenHeight),this.box=new m,this.camera=new d(new e(0,50,-200),new e(0,0,0),60,this.screenWidth,this.screenHeight,5,500),this.texture=new k("texture/Collage 2021-11-13 14_17_54.jpg"),this.start()},t.prototype.start=function(){this.stop(),this.sum_t=0;var t=new Date;this.last_t=t.getTime(),this.thandle=window.requestAnimationFrame(this.drawScene)},t.prototype.resume=function(){var t=new Date;this.last_t=t.getTime(),this.thandle=window.requestAnimationFrame(this.drawScene)},t.prototype.stop=function(){window.cancelAnimationFrame(this.thandle),this.thandle=null},t.prototype.drawScene=function(t){var e=(new Date).getTime(),n=e-this.last_t;this.last_t=e,this.sum_t=this.sum_t+n,document.title=n.toString(),this.ctx.clearRect(0,0,this.screenWidth,this.screenHeight),this.ctx.beginPath(),this.ctx.fillStyle="rgba(180,30,15,0.1)",this.ctx.fillRect(0,0,this.screenWidth,this.screenHeight),this.ctx.fillStyle="rgba(255,255,0,1)",this.ctx.fillRect(this.peek_screen_pos.x,this.peek_screen_pos.y,1,10),this.ctx.fillRect(this.peek_screen_pos.x,this.peek_screen_pos.y,10,1),c.clear(s.black,1);var i=o.offset(0,0,0),r=(this.sum_t,o.rotateByY(336.55499999999995)),a=o.transformTransform(i,r);this.box.rasterize(this.camera,a,this.texture),this.box.draw_line(this.ctx),c.show(this.render_target),this.thandle=window.requestAnimationFrame(this.drawScene)},t.prototype.keyProc=function(t){switch(t.keyCode){case 87:this.camera.moveEye(1,this.camera.z_axis);break;case 82:this.camera.moveEye(-1,this.camera.z_axis);break;case 69:this.camera.moveEye(1,this.camera.y_axis);break;case 68:this.camera.moveEye(-1,this.camera.y_axis);break;case 83:this.camera.moveEye(-1,this.camera.x_axis);break;case 70:this.camera.moveEye(1,this.camera.x_axis);break;case 38:this.camera.addPitch(.1);break;case 40:this.camera.addPitch(-.1);break;case 37:this.camera.addYaw(-.1);break;case 39:this.camera.addYaw(.1)}},t}())})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,