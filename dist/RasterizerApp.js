(()=>{"use strict";const t=function(t,e){this.from=t,this.dir=e},e=function(){function t(t,e,n){this.x=0,this.y=0,this.z=0,this.x=t,this.y=e,this.z=n}return t.min_max=function(e,n,r){return{min:new t(Math.min(Math.min(e.x,n.x),r.x),Math.min(Math.min(e.y,n.y),r.y),Math.min(Math.min(e.z,n.z),r.z)),max:new t(Math.max(Math.max(e.x,n.x),r.x),Math.max(Math.max(e.y,n.y),r.y),Math.max(Math.max(e.z,n.z),r.z))}},t.calculate_normal=function(e,n,r){var i=t.minus(n,e),o=t.minus(r,e);return t.cross(i,o).normalize()},t.calculate_center=function(t,e,n){return t.add(e).add(n).multiply(1/3)},t.uv=function(e,n){return new t(e,n,0)},t.reflect=function(e,n){var r=-2*t.dot(e,n);return n.multiply(r).add(e)},t.add=function(e,n){return new t(n.x+e.x,n.y+e.y,n.z+e.z)},t.minus=function(e,n){return new t(e.x-n.x,e.y-n.y,e.z-n.z)},t.multiply=function(e,n){return new t(e.x*n,e.y*n,e.z*n)},t.multiply3=function(e,n){return new t(e.x*n.x,e.y*n.y,e.z*n.z)},t.cross=function(e,n){return new t(e.y*n.z-e.z*n.y,-e.x*n.z+e.z*n.x,e.x*n.y-e.y*n.x)},t.dot=function(t,e){return t.x*e.x+t.y*e.y+t.z*e.z},t.equal=function(t,e){return f(t.x,e.x)&&f(t.y,e.y)&&f(t.z,e.z)},t.lerp=function(e,n,r){return new t(w(e.x,n.x,r),w(e.y,n.y,r),w(e.z,n.z,r))},t.prototype.length=function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},t.prototype.normalize=function(){var t=this.length();return this.x=this.x/t,this.y=this.y/t,this.z=this.z/t,this},t.prototype.add=function(e){return t.add(this,e)},t.prototype.minus=function(e){return t.minus(this,e)},t.prototype.multiply=function(e){return t.multiply(this,e)},t.prototype.negative=function(){return t.multiply(this,-1)},t.prototype.Vector2D=function(){return this.z=0,this},t.prototype.clone=function(){return new t(this.x,this.y,this.z)},t.up=new t(0,1,0),t.zero=new t(0,0,0),t}(),n=function(t,e){this.p=t,this.w=e},r=function(){function t(t,r){this.from=t,this.dir=new n(e.minus(r.p,t.p),r.w-t.w)}return t.prototype.t_when_x_equal_w=function(){return(this.from.w-this.from.p.x)/(this.dir.p.x-this.dir.w)},t.prototype.t_when_y_equal_w=function(){return(this.from.w-this.from.p.y)/(this.dir.p.y-this.dir.w)},t.prototype.t_when_z_equal_w=function(){return(this.from.w-this.from.p.z)/(this.dir.p.z-this.dir.w)},t.prototype.t_when_x_equal_minus_w=function(){return-(this.from.w+this.from.p.x)/(this.dir.w+this.dir.p.x)},t.prototype.t_when_y_equal_minus_w=function(){return-(this.from.w+this.from.p.y)/(this.dir.w+this.dir.p.y)},t.prototype.t_when_z_equal_zero_w=function(){return-this.from.p.z/this.dir.p.z},t}(),i=function(){function t(t,e){this.C=t,this.N=e}return t.prototype.is_positive=function(t){var n=e.minus(t,this.C);return e.dot(n,this.N)>0},t.prototype.hit=function(e,n){var r=t.hit(e,this);return r.is_hit&&(r.s=n),r},t.hit=function(t,n){var r=t.from,i=t.dir,o=e.dot(i,n.N),a=e.dot(e.minus(n.C,r),n.N);if(f(o,0))return{is_hit:!1,hit_pos:null,t:-1};var s=a/o;return{is_hit:s>0,hit_pos:r.add(i.multiply(s)),i,t:s,normal:n.N}},t}(),o=function(){function t(t,e,n,r){this.xAxis=t,this.yAxis=e,this.zAxis=n,this.position=r}return t.transformPoint=function(t,e){var n=t.xAxis.multiply(e.x),r=t.yAxis.multiply(e.y),i=t.zAxis.multiply(e.z);return t.position.add(n).add(r).add(i)},t.transformVector=function(t,e){var n=t.xAxis.multiply(e.x),r=t.yAxis.multiply(e.y),i=t.zAxis.multiply(e.z);return n.add(r).add(i)},t.transformTransform=function(e,n){return new t(t.transformVector(e,n.xAxis),t.transformVector(e,n.yAxis),t.transformVector(e,n.zAxis),t.transformPoint(e,n.position))},t.rotateByZ=function(n){var r=u(n),i=Math.cos(r),o=Math.sin(r);return new t(new e(i,o,0),new e(-o,i,0),new e(0,0,1),e.zero)},t.rotateByY=function(n){var r=u(n),i=Math.cos(r),o=Math.sin(r),a=new e(o,0,i);return new t(new e(i,0,-o),new e(0,1,0),a,e.zero)},t.rotateByX=function(n){var r=u(n),i=Math.cos(r),o=Math.sin(r);return new t(new e(1,0,0),new e(0,i,o),new e(0,-o,i),new e(0,0,0))},t.offset=function(n,r,i){return new t(new e(1,0,0),new e(0,1,0),new e(0,0,1),new e(n,r,i))},t}(),a=function(){function t(e,n){this.multiply=function(e){return new t(this.x*e,this.y*e)},this.toString=function(){return"( "+this.x+" , "+this.y+" )"},this.x=e,this.y=n}return t.add=function(e,n){return new t(n.x+e.x,n.y+e.y)},t.minus=function(e,n){return new t(e.x-n.x,e.y-n.y)},t.prototype.plus=function(e){return new t(this.x+e.x,this.y+e.y)},t}(),s=function(){function t(){}return t.clear=function(e,n){t.color_buffer.clear(e),t.z_buffer.clear(n)},t.show=function(e){e.set_pixel((function(e,n){return t.color_buffer.get(e,n)})),e.show_buffer("canvas")},t.clip_helper=function(t,e,n,r,i){for(var o=[],a=0,s=t;a<s.length;a++)for(var h=0,u=_(s[a],e,n,r,i);h<u.length;h++){var c=u[h];o.push(c)}return o},t.clip_in_Projection_Space=function(e,n,r,i){var o=[new h(e,n,r)],a=t.clip_helper(o,(function(t){return t.v0.w<t.v0.p.z}),(function(t){return t.v1.w<t.v1.p.z}),(function(t){return t.v2.w<t.v2.p.z}),c.Far);return a=t.clip_helper(a,(function(t){return 0>t.v0.p.z}),(function(t){return 0>t.v1.p.z}),(function(t){return 0>t.v2.p.z}),c.Near),a=t.clip_helper(a,(function(t){return t.v0.w<t.v0.p.x}),(function(t){return t.v1.w<t.v1.p.x}),(function(t){return t.v2.w<t.v2.p.x}),c.Right),a=t.clip_helper(a,(function(t){return-t.v0.w>t.v0.p.x}),(function(t){return-t.v1.w>t.v1.p.x}),(function(t){return-t.v2.w>t.v2.p.x}),c.Left),a=t.clip_helper(a,(function(t){return t.v0.w<t.v0.p.y}),(function(t){return t.v1.w<t.v1.p.y}),(function(t){return t.v2.w<t.v2.p.y}),c.Top),t.clip_helper(a,(function(t){return-t.v0.w>t.v0.p.y}),(function(t){return-t.v1.w>t.v1.p.y}),(function(t){return-t.v2.w>t.v2.p.y}),c.Bottom)},t.MVP_backface_culling_clipping=function(n,r,i){var a=o.transformPoint(i,n.v0.p),s=o.transformPoint(i,n.v1.p),h=o.transformPoint(i,n.v2.p),u=r.toCameraSpace(a),c=r.toCameraSpace(s),f=r.toCameraSpace(h),l=r.toProjectionSpace(u),p=r.toProjectionSpace(c),w=r.toProjectionSpace(f),_=e.calculate_normal(u,c,f),y=e.minus(e.zero,e.calculate_center(u,c,f)).normalize();if(e.dot(_,y)<=0)return[];var x=n.v0.clone().update_p(l).update_w(u.z),v=n.v1.clone().update_p(p).update_w(c.z),m=n.v2.clone().update_p(w).update_w(f.z);return t.clip_in_Projection_Space(x,v,m,r)},t.process=function(n,r,i,o){for(var s=[],u=0,c=t.MVP_backface_culling_clipping(n,r,i);u<c.length;u++){var f=c[u],l=r.toNDC(f.v0.p,f.v0.w),p=r.toNDC(f.v1.p,f.v1.w),w=r.toNDC(f.v2.p,f.v2.w),_=r.toScreenSpace(l),y=r.toScreenSpace(p),x=r.toScreenSpace(w);s.push(_),s.push(y),s.push(x);for(var v=e.min_max(_,y,x),m=v.min,d=v.max,g=Math.floor(m.x),b=Math.floor(d.x),z=Math.floor(m.y),M=Math.floor(d.y),S=g;S<=b;++S)for(var k=z;k<=M;++k){var N=new e(S+.5,k+.5,0),P=h["calculate_α_β_γ"](_,y,x,N),W=P.α,B=P.β,C=P.γ;if(h.is_in_triangle(W,B,C)){var E=h.interpolation(C,W,B,l.z,p.z,w.z);if(!(E>t.z_buffer.get(S,k))){t.z_buffer.set(S,k,E);var I=1/h.interpolation(C,W,B,1/f.v0.w,1/f.v1.w,1/f.v2.w),A=h.interpolation(C,W,B,f.v0.u/f.v0.w,f.v1.u/f.v1.w,f.v2.u/f.v2.w)*I,D=h.interpolation(C,W,B,f.v0.v/f.v0.w,f.v1.v/f.v1.w,f.v2.v/f.v2.w)*I,q=o.get(new a(A,D)).color;t.color_buffer.set(S,k,q)}}}}return s},t}(),h=function(){function n(t,e,n){this.v0=t,this.v1=e,this.v2=n}return n.calculate_α_β_γ=function(n,r,o,a){var s=e.minus(a,n),h=e.minus(r,n),u=e.minus(o,n),c=new e(-h.y,h.x,0),f=new t(a,u.multiply(-1)),l=i.hit(f,new i(n,c));l.is_hit;var p=l.hit_pos,w=e.minus(p,n),_=e.minus(s,w),y=w.x/h.x,x=_.x/u.x;return{α:y,β:x,γ:1-y-x}},n.is_in_triangle=function(t,e,n){return t>=0&&e>=0&&n>=0},n.interpolation=function(t,e,n,r,i,o){return r*t+i*e+o*n},n.prototype.rasterize=function(t,e,n){this.v_s=s.process(this,t,e,n)},n.prototype.draw=function(t){if(null!=this.v_s)for(var e=this.v_s.length/3,n=1;n<=e;++n){var r=3*n-1;t.moveTo(this.v_s[r].x,this.v_s[r].y),t.lineTo(this.v_s[r-2].x,this.v_s[r-2].y),t.lineTo(this.v_s[r-1].x,this.v_s[r-1].y),t.lineTo(this.v_s[r].x,this.v_s[r].y)}},n}();function u(t){return Math.PI*t/180}var c;function f(t,e){return Math.abs(t-e)<.001}function l(t,e,n){return t>n?n:t<e?e:t}function p(t,e){return t.map((function(t){return t.h.hit(e,t.s)})).filter((function(t){return t.is_hit})).sort((function(t,e){return t.t-e.t}))}function w(t,e,n){return t+n*(e-t)}function _(t,e,n,i,o){var a=[],s=function(t,e){var n=new r(t.get_Vector4D(),e.get_Vector4D()),i=0;switch(o){case c.Far:i=n.t_when_z_equal_w();break;case c.Near:i=n.t_when_z_equal_zero_w();break;case c.Right:i=n.t_when_x_equal_w();break;case c.Left:i=n.t_when_x_equal_minus_w();break;case c.Top:i=n.t_when_y_equal_w();break;case c.Bottom:i=n.t_when_y_equal_minus_w()}return y.lerp(t,e,i)},u=function(t,e,n){a[0]=new h(t,s(t,e),s(t,n))},f=function(t,e,n){var r=s(n,t),i=s(t,e);a[0]=new h(n,r,i),a[1]=new h(n,i,e)};return e(t)?n(t)?i(t)||u(t.v2,t.v0,t.v1):i(t)?u(t.v1,t.v2,t.v0):f(t.v0,t.v1,t.v2):n(t)?i(t)?u(t.v0,t.v1,t.v2):f(t.v1,t.v2,t.v0):i(t)?f(t.v2,t.v0,t.v1):a[0]=t,a}!function(t){t[t.Near=0]="Near",t[t.Far=1]="Far",t[t.Right=2]="Right",t[t.Left=3]="Left",t[t.Top=4]="Top",t[t.Bottom=5]="Bottom"}(c||(c={})),function(){function t(){}t.accDiv=function(t,e){var n=0,r=0;try{n=t.toString().split(".")[1].length}catch(t){}try{r=e.toString().split(".")[1].length}catch(t){}return Number(t.toString().replace(".",""))/Number(e.toString().replace(".",""))*Math.pow(10,r-n)},t.accAdd=function(t,e){var n,r,i,o;try{n=t.toString().split(".")[1].length}catch(t){n=0}try{r=e.toString().split(".")[1].length}catch(t){r=0}if(o=Math.abs(n-r),i=Math.pow(10,Math.max(n,r)),o>0){var a=Math.pow(10,o);n>r?(t=Number(t.toString().replace(".","")),e=Number(e.toString().replace(".",""))*a):(t=Number(t.toString().replace(".",""))*a,e=Number(e.toString().replace(".","")))}else t=Number(t.toString().replace(".","")),e=Number(e.toString().replace(".",""));return(t+e)/i}}(),function(){function t(){}t.drawLine=function(t,e,n,r){var i=t,o=e,s=a.minus(o,i),h=100;if(0!=s.y)if(0!=s.x){var u=s.x/s.y,c=Math.abs(u);if(u>0){if(c<=1)for(p=1;p<h;p++){i.y=i.y+1,i.x=i.x+c;var f=Math.floor(i.x);if(!r.is_legal_index(f,i.y))break;if(r.is_over_positive(i.x,i.y,o.x,o.y))break;r.set(f,i.y,n)}else if(c>1)for(p=1;p<h;p++){i.y=i.y+1/c,i.x=i.x+1;var l=Math.floor(i.y);if(!r.is_legal_index(i.x,l))break;if(r.is_over_positive(i.x,i.y,o.x,o.y))break;r.set(i.x,l,n)}}else if(u<0)if(c<=1)for(p=1;p<h&&(i.y=i.y+1,i.x=i.x-c,f=Math.floor(i.x),r.is_legal_index(f,i.y))&&!r.is_over_negative(i.x,i.y,o.x,o.y);p++)r.set(f,i.y,n);else if(c>1)for(p=1;p<h&&(i.y=i.y+1/c,i.x=i.x-1,l=Math.floor(i.y),r.is_legal_index(i.x,l))&&!r.is_over_negative(i.x,i.y,o.x,o.y);p++)r.set(i.x,l,n)}else for(var p=1;p<h&&(i.y=i.y+1,r.is_legal_index(i.x,i.y))&&!(i.y>o.y);p++)r.set(i.x,i.y,n);else for(p=1;p<h&&(i.x=i.x+1,r.is_legal_index(i.x,i.y))&&!(i.x>o.x);p++)r.set(i.x,i.y,n)},t.drawCircle=function(e,n){for(var r=2*Math.PI/50,i=new a(10,10),o=-Math.PI/3,s=0;s<50;s++){var h=Math.floor(i.x+9*Math.cos(o+r*s)),u=Math.floor(i.y+9*Math.sin(o+r*s)),c=Math.floor(i.x+9*Math.cos(o+r*(s+1))),f=Math.floor(i.y+9*Math.sin(o+r*(s+1)));t.drawLineWrapper(new a(h,u),new a(c,f),e,n)}},t.drawStar=function(e,n){for(var r=2*Math.PI/5,i=new a(10,10),o=-Math.PI/3,s=0,h=0;h<5;h++){var u=Math.floor(i.x+9*Math.cos(o+r*s)),c=Math.floor(i.y+9*Math.sin(o+r*s)),f=Math.floor(i.x+9*Math.cos(o+r*(s+2))),l=Math.floor(i.y+9*Math.sin(o+r*(s+2)));t.drawLineWrapper(new a(u,c),new a(f,l),e,n),s+=2}},t.drawLineWrapper=function(e,n,r,i){e.y<n.y?t.drawLine(e,n,r,i):n.y<e.y?t.drawLine(n,e,r,i):e.x<n.x?t.drawLine(e,n,r,i):n.x<e.x&&t.drawLine(n,e,r,i)}}();const y=function(){function t(t,e,n,r,i){this.p=t,this.n=e,this.w=n,this.u=r,this.v=i}return t.build_vertex=function(e,n,r,i,o){return new t(e,n,r,i,o)},t.lerp=function(n,r,i){return new t(e.lerp(n.p,r.p,i),e.lerp(n.n,r.n,i),w(n.w,r.w,i),w(n.u,r.u,i),w(n.v,r.v,i))},t.prototype.clone=function(){return new t(this.p.clone(),this.n.clone(),this.w,this.u,this.v)},t.prototype.update_p=function(t){return this.p=t,this},t.prototype.update_w=function(t){return this.w=t,this},t.prototype.get_Vector4D=function(){return new n(this.p,this.w)},t}(),x=function(){function t(){this.triangles=[];var t=new e(0,0,-1);this.triangles.push(new h(new y(new e(-10,-10,-10),t,1,0,0),new y(new e(10,10,-10),t,1,1,1),new y(new e(10,-10,-10),t,1,1,0))),this.triangles.push(new h(new y(new e(-10,-10,-10),t,1,0,0),new y(new e(-10,10,-10),t,1,0,1),new y(new e(10,10,-10),t,1,1,1)));for(var n=[o.rotateByY(90),o.rotateByY(180),o.rotateByY(270),o.rotateByX(90),o.rotateByX(-90)],r=0;r<n.length;++r){var i=n[r],a=o.transformPoint(i,t);this.triangles.push(new h(y.build_vertex(o.transformPoint(i,new e(-10,-10,-10)),a,1,0,0),y.build_vertex(o.transformPoint(i,new e(10,10,-10)),a,1,1,1),y.build_vertex(o.transformPoint(i,new e(10,-10,-10)),a,1,1,0))),this.triangles.push(new h(y.build_vertex(o.transformPoint(i,new e(-10,-10,-10)),a,1,0,0),y.build_vertex(o.transformPoint(i,new e(-10,10,-10)),a,1,0,1),y.build_vertex(o.transformPoint(i,new e(10,10,-10)),a,1,1,1)))}}return t.prototype.rasterize=function(t,e,n){this.triangles_after_clip=this.triangles;for(var r=0;r<this.triangles_after_clip.length;++r)this.triangles_after_clip[r].rasterize(t,e,n)},t.prototype.draw_line=function(t){t.globalCompositeOperation="destination-over",t.strokeStyle="rgba(255,0,0,1)",t.beginPath();for(var e=0;e<this.triangles_after_clip.length;++e)this.triangles_after_clip[e].draw(t);t.stroke()},t}(),v=function(){function n(t){this.color=t}return n.prototype.shading=function(n,r,i,o){var a=n.normal,s=l(-e.dot(r,a),0,1),h=function(e,n,r){var i=n.negative(),o=e.hit_pos.add(i.multiply(.001));return 0!=p(r,new t(o,i)).length?.45:1}(n,r,i);return this.color.multiply(s).multiply(h)},n.yellow=new n(new e(1,1,0)),n.red=new n(new e(1,0,0)),n.green=new n(new e(0,1,0)),n.blue=new n(new e(0,0,1)),n.gray=new n(new e(.5,.5,.5)),n.white=new n(new e(1,1,1)),n}(),m=function(){function n(t,n,r,i,o,a,s){this.moveEye=function(t,n){this.eye=e.add(this.eye,n.multiply(t))},this.ratio=i/o,this.screenW=i,this.screenH=o,this.screenCenterX=.5*this.screenW,this.screenCenterY=.5*this.screenH,this.halfW=.5*this.screenW,this.halfH=.5*this.screenH,this.z_axis=e.minus(n,t).normalize();var h=e.up;this.x_axis=e.cross(h,this.z_axis).normalize(),this.y_axis=e.cross(this.z_axis,this.x_axis),this.eye=t,this.fov_degree=r,this.N=a,this.F=s,this.a=s/(s-a),this.b=-a*s/(s-a),console.log(this.a,this.b)}return n.prototype.addPitch=function(t){},n.prototype.addYaw=function(t){},n.prototype.create_ray_dir=function(t,e,n){var r=u(.5*this.fov_degree),i=Math.tan(r),o=i*n;return this.z_axis.add(this.x_axis.multiply(t*o)).add(this.y_axis.multiply(e*i))},n.prototype.toCameraSpace=function(t){var n=t.minus(this.eye);return new e(e.dot(n,this.x_axis),e.dot(n,this.y_axis),e.dot(n,this.z_axis))},n.prototype.toProjectionSpace=function(t){var n=.5*u(this.fov_degree),r=1/Math.tan(n),i=1/(this.ratio*Math.tan(n));return new e(t.x*i,t.y*r,t.z*this.a+this.b)},n.prototype.toNDC=function(t,e){var n=1/e;return t.multiply(n)},n.prototype.toScreenSpace=function(t){var n=this.halfW*t.x+this.screenCenterX,r=-this.halfH*t.y+this.screenCenterY;return new e(n,r,0)},n.prototype.render=function(n,r){var i=this,o=new e(1,-1,0).normalize(),a=.5/n.h,s=[{x:0,y:0},{x:a,y:a},{x:-a,y:a},{x:-a,y:-a},{x:a,y:-a}];n.render_pixel((function(n,a,h){var u=i.create_ray_dir(n,a,h),c=s.map((function(e){var n=u.add(i.x_axis.multiply(e.x)).add(i.y_axis.multiply(e.y));return new t(i.eye,n.normalize())})).map((function(t){var e=p(r,t);if(0!=e.length){var n=e[0];return n.s.shading(n,o,r,1)}return v.gray.color})),f=s.length;return c.reduce((function(t,e){return t.add(e)}),e.zero).multiply(1/f)}))},n}(),d=function(){function t(t,e){void 0===t&&(t=320),void 0===e&&(e=240),this.w=320,this.h=240,this.backbuffer=null,this.w=t,this.h=e,this.backbuffer=new OffscreenCanvas(this.w,this.h)}return t.prototype.render_pixel=function(t){for(var e=this.backbuffer.getContext("2d"),n=e.getImageData(0,0,this.w,this.h),r=n.data,i=this.w/this.h,o=0;o<this.h;++o)for(var a=0;a<this.w;++a){var s=4*(a+o*this.w),h=(a+.5)/this.w,u=(o+.5)/this.h,c=t(2*h-1,2*(u=1-u)-1,i),f=c.x,l=c.y,p=c.z,w=1/2.1;f=Math.pow(f,w),l=Math.pow(l,w),p=Math.pow(p,w),r[s++]=Math.round(255*f),r[s++]=Math.round(255*l),r[s++]=Math.round(255*p),r[s]=255}e.putImageData(n,0,0)},t.prototype.set_pixel=function(t){for(var e=this.backbuffer.getContext("2d"),n=e.getImageData(0,0,this.w,this.h),r=n.data,i=(this.w,this.h,0);i<this.h;++i)for(var o=0;o<this.w;++o){var a=4*(o+i*this.w),s=t(o,i),h=s.r,u=s.g,c=s.b,f=1/2.1;h=Math.pow(h,f),u=Math.pow(u,f),c=Math.pow(c,f),r[a++]=Math.round(255*h),r[a++]=Math.round(255*u),r[a++]=Math.round(255*c),r[a]=255}e.putImageData(n,0,0)},t.prototype.show_buffer=function(t){var e=document.getElementById(t);e.style.width=this.w+"px",e.style.height=this.h+"px",e.width=e.clientWidth,e.height=e.clientHeight,e.getContext("bitmaprenderer").transferFromImageBitmap(this.backbuffer.transferToImageBitmap())},t}(),g=function(){function t(e,n,r,i){this.add=function(e){return new t(this.r+e.r,this.g+e.g,this.b+e.b,1)},this.r=e,this.g=n,this.b=r,this.a=i}return t.lerp=function(e,n,r){return new t(w(e.r,n.r,r),w(e.g,n.g,r),w(e.b,n.b,r),1)},t.prototype.multiply=function(e){return new t(this.r*e,this.g*e,this.b*e,1)},t.prototype.toString=function(){return"( "+this.r+" , "+this.g+" , "+this.b+" )"},t.debug=new t(1,0,1,1),t.golden=new t(1,215/255,0,1),t.yellow=new t(1,1,0,1),t.pink=new t(1,192/255,203/255,1),t.black=new t(0,0,0,1),t.red=new t(1,0,0,1),t}(),b=function(){function t(t,e){this.w=t,this.h=e,this.buffer=new Array(this.h),console.log(t,e);for(var n=0;n<this.h;++n)this.buffer[n]=new Array(this.w)}return t.prototype.set=function(t,e,n){if(!this.is_legal_index(t,e))return console.log("set",this.w,this.h,t,e),g.debug;this.buffer[e][t]=n},t.prototype.get=function(t,e){return this.is_legal_index(t,e)?this.buffer[e][t]:(console.log("get",this.w,this.h,t,e),g.debug)},t.prototype.clear=function(t){for(var e=0;e<this.h;++e)for(var n=0;n<this.w;++n)this.buffer[e][n]=t},t.prototype.get_clamp_mode=function(t,e){var n=l(t,0,this.w-1),r=l(e,0,this.h-1);return this.buffer[r][n]},t.prototype.is_legal_index=function(t,e){return t>=0&&t<this.w&&e>=0&&e<this.h},t.prototype.is_over_negative=function(t,e,n,r){return e>r||t<n},t.prototype.is_over_positive=function(t,e,n,r){return e>r||t>n},t}(),z=function(){function t(){}return t.set_canvas=function(e,n,r){var i=document.getElementById(e);return t.set_canvas_element(i,n,r)},t.set_canvas_element=function(t,e,n){return t.style.width=e+"px",t.style.height=n+"px",t.width=t.clientWidth,t.height=t.clientHeight,t},t.get_context=function(t){return document.getElementById(t).getContext("2d")},t.get_context_by_canvas=function(t){return t.getContext("2d")},t.convert=function(t){return"rgba("+Math.floor(255*t.r)+","+Math.floor(255*t.g)+","+Math.floor(255*t.b)+",1)"},t}(),M=function(){function t(){}return t.uv_to_buffer_space=function(t){return new a(t.x,1-t.y)},t.buffer_to_uv_space=function(t){return new a(t.x,1-t.y)},t.texture2D=function(e,n){var r,i=n.w,o=n.h,s=t.uv_to_buffer_space(e),h=s.x,u=s.y,c=1/i,f=1/o,l=.5*c,p=.5*f,w=h/c,_=u/f,y=Math.floor(w),x=Math.floor(_),v=h%c,m=u%f;if(v>=l&&m>=p){w==y&&(y-=1),_==x&&(x-=1);var d=new a(y,x),g=new a(d.x+1,d.y),b=new a(d.x,d.y+1),z=new a(d.x+1,d.y+1);return{rectUV:r=new a((v-l)/c,(m-p)/f),NW:d,NE:g,SW:b,SE:z,color:t.Bilinear_Sampler(r,d,g,b,z,n)}}if(v<=l&&m>=p){_==x&&(x-=1),d=new a(y,x);var M=new a(d.x-1,d.y);return b=new a(d.x-1,d.y+1),z=new a(d.x,d.y+1),{rectUV:r=new a((v+l)/c,(m-p)/f),NW:M,NE:d,SW:b,SE:z,color:t.Bilinear_Sampler(r,M,d,b,z,n)}}return v<=l&&m<=p?(d=new a(y,x),M=new a(d.x-1,d.y-1),g=new a(d.x,d.y-1),b=new a(d.x-1,d.y),{rectUV:r=new a((v+l)/c,(m+p)/f),NW:M,NE:g,SW:b,SE:d,color:t.Bilinear_Sampler(r,M,g,b,d,n)}):v>=l&&m<=p?(w==y&&(y-=1),d=new a(y,x),M=new a(d.x,d.y-1),g=new a(d.x+1,d.y-1),z=new a(d.x+1,d.y),{rectUV:r=new a((v-l)/c,(m+p)/f),NW:M,NE:g,SW:d,SE:z,color:t.Bilinear_Sampler(r,M,g,d,z,n)}):void 0},t.Bilinear_Sampler=function(t,e,n,r,i,o){var a=o.get_clamp_mode(e.x,e.y),s=o.get_clamp_mode(n.x,n.y),h=o.get_clamp_mode(r.x,r.y),u=o.get_clamp_mode(i.x,i.y),c=g.lerp(a,s,t.x),f=g.lerp(h,u,t.x);return g.lerp(c,f,t.y)},t}(),S=function(){function t(t){this.load_texture_buffer=this.load_texture_buffer.bind(this),this.begin_load(t)}return t.prototype.begin_load=function(t){this.img=new Image,this.img.src=t,this.img.onload=this.load_texture_buffer},t.prototype.load_texture_buffer=function(){var t=this.img.width,e=this.img.height,n=z.set_canvas("canvas_texture",t,e),r=z.get_context_by_canvas(n);r.drawImage(this.img,0,0),this.buffer=new b(t,e);for(var i=0;i<e;++i)for(var o=0;o<t;++o){var a=r.getImageData(o,i,1,1).data;this.buffer.set(o,i,new g(a[0]/255,a[1]/255,a[2]/255,a[3]/255))}},t.prototype.get=function(t){return this.buffer?M.texture2D(t,this.buffer):{rectUV:null,NW:null,NE:null,SW:null,SE:null,color:g.black}},t}();new(function(){function t(){var t=this;this.cameraIndex_view=1,this.cameraIndex_control=0,this.camera=null,this.screenWidth=800,this.screenHeight=600,this.box=null,window.onload=function(){t.init(),document.getElementById("btn_timeout").onclick=function(){t.stop()},document.getElementById("btn_resume").onclick=function(){t.resume()}},document.onkeydown=this.keyProc.bind(this),this.drawScene=this.drawScene.bind(this)}return t.prototype.init=function(){s.color_buffer=new b(this.screenWidth,this.screenHeight),s.z_buffer=new b(this.screenWidth,this.screenHeight),this.render_target=new d(this.screenWidth,this.screenHeight),this.ctx=z.set_canvas("canvas_line",this.screenWidth,this.screenHeight).getContext("2d"),z.set_canvas("canvas",this.screenWidth,this.screenHeight),this.box=new x,this.camera=new m(new e(0,50,-200),new e(0,0,0),60,this.screenWidth,this.screenHeight,50,500),this.texture=new S("/texture/smoking_2.jpg"),this.start()},t.prototype.start=function(){this.stop(),this.sum_t=0;var t=new Date;this.last_t=t.getTime(),this.thandle=window.requestAnimationFrame(this.drawScene)},t.prototype.resume=function(){var t=new Date;this.last_t=t.getTime(),this.thandle=window.requestAnimationFrame(this.drawScene)},t.prototype.stop=function(){window.cancelAnimationFrame(this.thandle),this.thandle=null},t.prototype.drawScene=function(t){var e=(new Date).getTime(),n=e-this.last_t;this.last_t=e,this.sum_t=this.sum_t+n,document.title=n.toString(),this.ctx.clearRect(0,0,this.screenWidth,this.screenHeight),this.ctx.beginPath(),this.ctx.fillStyle="rgba(180,30,15,0.1)",this.ctx.fillRect(0,0,this.screenWidth,this.screenHeight),s.clear(g.black,1);var r=o.offset(0,0,0),i=this.sum_t/1e3*15%360,a=o.rotateByY(i),h=o.transformTransform(r,a);this.box.rasterize(this.camera,h,this.texture),this.box.draw_line(this.ctx),r=o.offset(0,0,150),a=o.rotateByY(i),h=o.transformTransform(a,r),this.box.rasterize(this.camera,h,this.texture),this.box.draw_line(this.ctx),s.show(this.render_target),this.thandle=window.requestAnimationFrame(this.drawScene)},t.prototype.keyProc=function(t){switch(t.keyCode){case 87:this.camera.moveEye(1,this.camera.z_axis);break;case 82:this.camera.moveEye(-1,this.camera.z_axis);break;case 69:this.camera.moveEye(1,this.camera.y_axis);break;case 68:this.camera.moveEye(-1,this.camera.y_axis);break;case 83:this.camera.moveEye(-1,this.camera.x_axis);break;case 70:this.camera.moveEye(1,this.camera.x_axis);break;case 38:this.camera.addPitch(.1);break;case 40:this.camera.addPitch(-.1);break;case 37:this.camera.addYaw(-.1);break;case 39:this.camera.addYaw(.1)}},t}())})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,