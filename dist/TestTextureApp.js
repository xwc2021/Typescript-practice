(()=>{"use strict";const t=function(t,n){this.from=t,this.dir=n},n=function(){function t(t,n,e){this.x=0,this.y=0,this.z=0,this.x=t,this.y=n,this.z=e}return t.min_max=function(n,e,r){return{min:new t(Math.min(Math.min(n.x,e.x),r.x),Math.min(Math.min(n.y,e.y),r.y),Math.min(Math.min(n.z,e.z),r.z)),max:new t(Math.max(Math.max(n.x,e.x),r.x),Math.max(Math.max(n.y,e.y),r.y),Math.max(Math.max(n.z,e.z),r.z))}},t.calculate_normal=function(n,e,r){var i=t.minus(e,n),o=t.minus(r,n);return t.cross(i,o).normalize()},t.calculate_center=function(t,n,e){return t.add(n).add(e).multiply(1/3)},t.uv=function(n,e){return new t(n,e,0)},t.reflect=function(n,e){var r=-2*t.dot(n,e);return e.multiply(r).add(n)},t.add=function(n,e){return new t(e.x+n.x,e.y+n.y,e.z+n.z)},t.minus=function(n,e){return new t(n.x-e.x,n.y-e.y,n.z-e.z)},t.multiply=function(n,e){return new t(n.x*e,n.y*e,n.z*e)},t.multiply3=function(n,e){return new t(n.x*e.x,n.y*e.y,n.z*e.z)},t.cross=function(n,e){return new t(n.y*e.z-n.z*e.y,-n.x*e.z+n.z*e.x,n.x*e.y-n.y*e.x)},t.dot=function(t,n){return t.x*n.x+t.y*n.y+t.z*n.z},t.equal=function(t,n){return l(t.x,n.x)&&l(t.y,n.y)&&l(t.z,n.z)},t.lerp=function(n,e,r){return new t(_(n.x,e.x,r),_(n.y,e.y,r),_(n.z,e.z,r))},t.prototype.clamp_x=function(t,n){return this.x=p(this.x,t,n),this},t.prototype.clamp_y=function(t,n){return this.y=p(this.y,t,n),this},t.prototype.length=function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},t.prototype.normalize=function(){var t=this.length();return this.x=this.x/t,this.y=this.y/t,this.z=this.z/t,this},t.prototype.add=function(n){return t.add(this,n)},t.prototype.minus=function(n){return t.minus(this,n)},t.prototype.multiply=function(n){return t.multiply(this,n)},t.prototype.negative=function(){return t.multiply(this,-1)},t.prototype.Vector2D=function(){return this.z=0,this},t.prototype.clone=function(){return new t(this.x,this.y,this.z)},t.up=new t(0,1,0),t.zero=new t(0,0,0),t}(),e=function(t,n){this.p=t,this.w=n},r=function(){function t(t,r){this.from=t,this.dir=new e(n.minus(r.p,t.p),r.w-t.w)}return t.prototype.t_when_x_equal_w=function(){return(this.from.w-this.from.p.x)/(this.dir.p.x-this.dir.w)},t.prototype.t_when_y_equal_w=function(){return(this.from.w-this.from.p.y)/(this.dir.p.y-this.dir.w)},t.prototype.t_when_z_equal_w=function(){return(this.from.w-this.from.p.z)/(this.dir.p.z-this.dir.w)},t.prototype.t_when_x_equal_minus_w=function(){return-(this.from.w+this.from.p.x)/(this.dir.w+this.dir.p.x)},t.prototype.t_when_y_equal_minus_w=function(){return-(this.from.w+this.from.p.y)/(this.dir.w+this.dir.p.y)},t.prototype.t_when_z_equal_zero_w=function(){return-this.from.p.z/this.dir.p.z},t}(),i=function(){function t(t,n){this.C=t,this.N=n}return t.prototype.is_positive=function(t){var e=n.minus(t,this.C);return n.dot(e,this.N)>0},t.prototype.hit=function(n,e){var r=t.hit(n,this);return r.is_hit&&(r.s=e),r},t.hit=function(t,e){var r=t.from,i=t.dir,o=n.dot(i,e.N),u=n.dot(n.minus(e.C,r),e.N);if(l(o,0))return{is_hit:!1,hit_pos:null,t:-1};var a=u/o;return{is_hit:a>0,hit_pos:r.add(i.multiply(a)),i,t:a,normal:e.N}},t}(),o=function(){function t(t,n,e,r){this.xAxis=t,this.yAxis=n,this.zAxis=e,this.position=r}return t.transformPoint=function(t,n){var e=t.xAxis.multiply(n.x),r=t.yAxis.multiply(n.y),i=t.zAxis.multiply(n.z);return t.position.add(e).add(r).add(i)},t.transformVector=function(t,n){var e=t.xAxis.multiply(n.x),r=t.yAxis.multiply(n.y),i=t.zAxis.multiply(n.z);return e.add(r).add(i)},t.transformTransform=function(n,e){return new t(t.transformVector(n,e.xAxis),t.transformVector(n,e.yAxis),t.transformVector(n,e.zAxis),t.transformPoint(n,e.position))},t.rotateByZ=function(e){var r=h(e),i=Math.cos(r),o=Math.sin(r);return new t(new n(i,o,0),new n(-o,i,0),new n(0,0,1),n.zero)},t.rotateByY=function(e){var r=h(e),i=Math.cos(r),o=Math.sin(r),u=new n(o,0,i);return new t(new n(i,0,-o),new n(0,1,0),u,n.zero)},t.rotateByX=function(e){var r=h(e),i=Math.cos(r),o=Math.sin(r);return new t(new n(1,0,0),new n(0,i,o),new n(0,-o,i),new n(0,0,0))},t.offset=function(e,r,i){return new t(new n(1,0,0),new n(0,1,0),new n(0,0,1),new n(e,r,i))},t}(),u=function(){function t(n,e){this.multiply=function(n){return new t(this.x*n,this.y*n)},this.toString=function(){return"( "+this.x+" , "+this.y+" )"},this.x=n,this.y=e}return t.add=function(n,e){return new t(e.x+n.x,e.y+n.y)},t.minus=function(n,e){return new t(n.x-e.x,n.y-e.y)},t.prototype.plus=function(n){return new t(this.x+n.x,this.y+n.y)},t}(),a=function(){function t(){}return t.clear=function(n,e){t.color_buffer.clear(n),t.z_buffer.clear(e)},t.show=function(n){n.set_pixel((function(n,e){return t.color_buffer.get(n,e)})),n.show_buffer("canvas")},t.clip_helper=function(t,n,e,r,i){for(var o=[],u=0,a=t;u<a.length;u++)for(var s=0,c=v(a[u],n,e,r,i);s<c.length;s++){var h=c[s];o.push(h)}return o},t.clip_in_Projection_Space=function(n,e,r,i){var o=[new s(n,e,r)],u=t.clip_helper(o,(function(t){return t.v0.w<t.v0.p.z}),(function(t){return t.v1.w<t.v1.p.z}),(function(t){return t.v2.w<t.v2.p.z}),f.Far);return u=t.clip_helper(u,(function(t){return 0>t.v0.p.z}),(function(t){return 0>t.v1.p.z}),(function(t){return 0>t.v2.p.z}),f.Near),u=t.clip_helper(u,(function(t){return t.v0.w<t.v0.p.x}),(function(t){return t.v1.w<t.v1.p.x}),(function(t){return t.v2.w<t.v2.p.x}),f.Right),u=t.clip_helper(u,(function(t){return-t.v0.w>t.v0.p.x}),(function(t){return-t.v1.w>t.v1.p.x}),(function(t){return-t.v2.w>t.v2.p.x}),f.Left),u=t.clip_helper(u,(function(t){return t.v0.w<t.v0.p.y}),(function(t){return t.v1.w<t.v1.p.y}),(function(t){return t.v2.w<t.v2.p.y}),f.Top),t.clip_helper(u,(function(t){return-t.v0.w>t.v0.p.y}),(function(t){return-t.v1.w>t.v1.p.y}),(function(t){return-t.v2.w>t.v2.p.y}),f.Bottom)},t.MVP_backface_culling_clipping=function(e,r,i){var u=o.transformPoint(i,e.v0.p),a=o.transformPoint(i,e.v1.p),s=o.transformPoint(i,e.v2.p),c=r.toCameraSpace(u),h=r.toCameraSpace(a),f=r.toCameraSpace(s),l=r.toProjectionSpace(c),p=r.toProjectionSpace(h),_=r.toProjectionSpace(f),v=n.calculate_normal(c,h,f),y=n.minus(n.zero,n.calculate_center(c,h,f)).normalize();if(n.dot(v,y)<=0)return[];var w=e.v0.clone().update_p(l).update_w(c.z),x=e.v1.clone().update_p(p).update_w(h.z),m=e.v2.clone().update_p(_).update_w(f.z);return t.clip_in_Projection_Space(w,x,m,r)},t.process=function(e,r,i,o,a,c){for(var h=[],f=0,l=t.MVP_backface_culling_clipping(e,r,i);f<l.length;f++){var p=l[f],_=r.toNDC(p.v0.p,p.v0.w),v=r.toNDC(p.v1.p,p.v1.w),y=r.toNDC(p.v2.p,p.v2.w);c&&(_.clamp_x(-1,1).clamp_y(-1,1),v.clamp_x(-1,1).clamp_y(-1,1),y.clamp_x(-1,1).clamp_y(-1,1));var w=r.toScreenSpace(_),m=r.toScreenSpace(v),d=r.toScreenSpace(y);h.push(w),h.push(m),h.push(d);var g=n.min_max(w,m,d),b=g.min,z=g.max,M=Math.floor(b.x),S=Math.floor(z.x),N=Math.floor(b.y),P=Math.floor(z.y);M=Math.max(0,M),N=Math.max(0,N),S=Math.min(this.color_buffer.w-1,S),P=Math.min(this.color_buffer.h-1,P);for(var B=M;B<=S;++B)for(var k=N;k<=P;++k){var R=new n(B+.5,k+.5,0),V=s["calculate_α_β_γ"](w,m,d,R),A=V.success,C=V.α,q=V.β,W=V.γ;if(A&&s.is_in_triangle(C,q,W)){var E=s.interpolation(W,C,q,_.z,v.z,y.z);if(!(E>t.z_buffer.get(B,k))){t.z_buffer.set(B,k,E);var I=1/s.interpolation(W,C,q,1/p.v0.w,1/p.v1.w,1/p.v2.w),$=s.interpolation(W,C,q,p.v0.u/p.v0.w,p.v1.u/p.v1.w,p.v2.u/p.v2.w)*I,D=s.interpolation(W,C,q,p.v0.v/p.v0.w,p.v1.v/p.v1.w,p.v2.v/p.v2.w)*I,L=o.get(new u($,D)).color;a?t.color_buffer.set(B,k,x.yellow):t.color_buffer.set(B,k,L)}}}}return h},t}(),s=function(){function e(t,n,e){this.v0=t,this.v1=n,this.v2=e}return e.calculate_α_β_γ=function(e,r,o,u){var a=n.minus(u,e),s=n.minus(r,e),c=n.minus(o,e),h=new n(-s.y,s.x,0),f=new t(u,c.multiply(-1)),l=i.hit(f,new i(e,h)).hit_pos;if(null==l)return{success:!1,α:1,β:0,γ:0};var p=n.minus(l,e),_=n.minus(a,p),v=0==s.x?p.y/s.y:p.x/s.x,y=0==c.x?_.y/c.y:_.x/c.x;return isNaN(v)&&console.log(p.x,s.x),isNaN(y)&&console.log(_.x,c.x),{success:!0,α:v,β:y,γ:1-v-y}},e.is_in_triangle=function(t,n,e){return t>=0&&n>=0&&e>=0},e.interpolation=function(t,n,e,r,i,o){return r*t+i*n+o*e},e.prototype.rasterize=function(t,n,e,r,i){this.v_s=a.process(this,t,n,e,r,i)},e.prototype.draw=function(t){if(null!=this.v_s)for(var n=this.v_s.length/3,e=1;e<=n;++e){var r=3*e-1;t.moveTo(this.v_s[r].x,this.v_s[r].y),t.lineTo(this.v_s[r-2].x,this.v_s[r-2].y),t.lineTo(this.v_s[r-1].x,this.v_s[r-1].y),t.lineTo(this.v_s[r].x,this.v_s[r].y)}},e}(),c=function(){function t(t,n,e,r,i){this.p=t,this.n=n,this.w=e,this.u=r,this.v=i}return t.build_vertex=function(n,e,r,i,o){return new t(n,e,r,i,o)},t.lerp=function(e,r,i){return new t(n.lerp(e.p,r.p,i),n.lerp(e.n,r.n,i),_(e.w,r.w,i),_(e.u,r.u,i),_(e.v,r.v,i))},t.prototype.clone=function(){return new t(this.p.clone(),this.n.clone(),this.w,this.u,this.v)},t.prototype.update_p=function(t){return this.p=t,this},t.prototype.update_w=function(t){return this.w=t,this},t.prototype.get_Vector4D=function(){return new e(this.p,this.w)},t}();function h(t){return Math.PI*t/180}var f;function l(t,n){return Math.abs(t-n)<.001}function p(t,n,e){return t>e?e:t<n?n:t}function _(t,n,e){return t+e*(n-t)}function v(t,n,e,i,o){var u=[],a=function(t,n){var e=new r(t.get_Vector4D(),n.get_Vector4D()),i=0;switch(o){case f.Far:i=e.t_when_z_equal_w();break;case f.Near:i=e.t_when_z_equal_zero_w();break;case f.Right:i=e.t_when_x_equal_w();break;case f.Left:i=e.t_when_x_equal_minus_w();break;case f.Top:i=e.t_when_y_equal_w();break;case f.Bottom:i=e.t_when_y_equal_minus_w()}return c.lerp(t,n,i)},h=function(t,n,e){u[0]=new s(t,a(t,n),a(t,e))},l=function(t,n,e){var r=a(e,t),i=a(t,n);u[0]=new s(e,r,i),u[1]=new s(e,i,n)};return n(t)?e(t)?i(t)||h(t.v2,t.v0,t.v1):i(t)?h(t.v1,t.v2,t.v0):l(t.v0,t.v1,t.v2):e(t)?i(t)?h(t.v0,t.v1,t.v2):l(t.v1,t.v2,t.v0):i(t)?l(t.v2,t.v0,t.v1):u[0]=t,u}!function(t){t[t.Near=0]="Near",t[t.Far=1]="Far",t[t.Right=2]="Right",t[t.Left=3]="Left",t[t.Top=4]="Top",t[t.Bottom=5]="Bottom"}(f||(f={}));var y=function(){function t(){}return t.accDiv=function(t,n){var e=0,r=0;try{e=t.toString().split(".")[1].length}catch(t){}try{r=n.toString().split(".")[1].length}catch(t){}return Number(t.toString().replace(".",""))/Number(n.toString().replace(".",""))*Math.pow(10,r-e)},t.accAdd=function(t,n){var e,r,i,o;try{e=t.toString().split(".")[1].length}catch(t){e=0}try{r=n.toString().split(".")[1].length}catch(t){r=0}if(o=Math.abs(e-r),i=Math.pow(10,Math.max(e,r)),o>0){var u=Math.pow(10,o);e>r?(t=Number(t.toString().replace(".","")),n=Number(n.toString().replace(".",""))*u):(t=Number(t.toString().replace(".",""))*u,n=Number(n.toString().replace(".","")))}else t=Number(t.toString().replace(".","")),n=Number(n.toString().replace(".",""));return(t+n)/i},t}(),w=function(){function t(){}return t.drawLine=function(t,n,e,r){var i=t,o=n,a=u.minus(o,i),s=100;if(0!=a.y)if(0!=a.x){var c=a.x/a.y,h=Math.abs(c);if(c>0){if(h<=1)for(p=1;p<s;p++){i.y=i.y+1,i.x=i.x+h;var f=Math.floor(i.x);if(!r.is_legal_index(f,i.y))break;if(r.is_over_positive(i.x,i.y,o.x,o.y))break;r.set(f,i.y,e)}else if(h>1)for(p=1;p<s;p++){i.y=i.y+1/h,i.x=i.x+1;var l=Math.floor(i.y);if(!r.is_legal_index(i.x,l))break;if(r.is_over_positive(i.x,i.y,o.x,o.y))break;r.set(i.x,l,e)}}else if(c<0)if(h<=1)for(p=1;p<s&&(i.y=i.y+1,i.x=i.x-h,f=Math.floor(i.x),r.is_legal_index(f,i.y))&&!r.is_over_negative(i.x,i.y,o.x,o.y);p++)r.set(f,i.y,e);else if(h>1)for(p=1;p<s&&(i.y=i.y+1/h,i.x=i.x-1,l=Math.floor(i.y),r.is_legal_index(i.x,l))&&!r.is_over_negative(i.x,i.y,o.x,o.y);p++)r.set(i.x,l,e)}else for(var p=1;p<s&&(i.y=i.y+1,r.is_legal_index(i.x,i.y))&&!(i.y>o.y);p++)r.set(i.x,i.y,e);else for(p=1;p<s&&(i.x=i.x+1,r.is_legal_index(i.x,i.y))&&!(i.x>o.x);p++)r.set(i.x,i.y,e)},t.drawCircle=function(n,e){for(var r=2*Math.PI/50,i=new u(10,10),o=-Math.PI/3,a=0;a<50;a++){var s=Math.floor(i.x+9*Math.cos(o+r*a)),c=Math.floor(i.y+9*Math.sin(o+r*a)),h=Math.floor(i.x+9*Math.cos(o+r*(a+1))),f=Math.floor(i.y+9*Math.sin(o+r*(a+1)));t.drawLineWrapper(new u(s,c),new u(h,f),n,e)}},t.drawStar=function(n,e){for(var r=2*Math.PI/5,i=new u(10,10),o=-Math.PI/3,a=0,s=0;s<5;s++){var c=Math.floor(i.x+9*Math.cos(o+r*a)),h=Math.floor(i.y+9*Math.sin(o+r*a)),f=Math.floor(i.x+9*Math.cos(o+r*(a+2))),l=Math.floor(i.y+9*Math.sin(o+r*(a+2)));t.drawLineWrapper(new u(c,h),new u(f,l),n,e),a+=2}},t.drawLineWrapper=function(n,e,r,i){n.y<e.y?t.drawLine(n,e,r,i):e.y<n.y?t.drawLine(e,n,r,i):n.x<e.x?t.drawLine(n,e,r,i):e.x<n.x&&t.drawLine(e,n,r,i)},t}();const x=function(){function t(n,e,r,i){this.add=function(n){return new t(this.r+n.r,this.g+n.g,this.b+n.b,1)},this.r=n,this.g=e,this.b=r,this.a=i}return t.lerp=function(n,e,r){return new t(_(n.r,e.r,r),_(n.g,e.g,r),_(n.b,e.b,r),1)},t.prototype.multiply=function(n){return new t(this.r*n,this.g*n,this.b*n,1)},t.prototype.toString=function(){return"( "+this.r+" , "+this.g+" , "+this.b+" )"},t.debug=new t(1,0,1,1),t.golden=new t(1,215/255,0,1),t.yellow=new t(1,1,0,1),t.pink=new t(1,192/255,203/255,1),t.black=new t(0,0,0,1),t.red=new t(1,0,0,1),t}(),m=function(){function t(t,n){this.w=t,this.h=n,this.buffer=new Array(this.h),console.log(t,n);for(var e=0;e<this.h;++e)this.buffer[e]=new Array(this.w)}return t.prototype.set=function(t,n,e){if(!this.is_legal_index(t,n))return console.log("set",this.w,this.h,t,n),x.debug;this.buffer[n][t]=e},t.prototype.get=function(t,n){return this.is_legal_index(t,n)?this.buffer[n][t]:(console.log("get",this.w,this.h,t,n),x.debug)},t.prototype.clear=function(t){for(var n=0;n<this.h;++n)for(var e=0;e<this.w;++e)this.buffer[n][e]=t},t.prototype.get_clamp_mode=function(t,n){var e=p(t,0,this.w-1),r=p(n,0,this.h-1);return this.buffer[r][e]},t.prototype.is_legal_index=function(t,n){return t>=0&&t<this.w&&n>=0&&n<this.h},t.prototype.is_over_negative=function(t,n,e,r){return n>r||t<e},t.prototype.is_over_positive=function(t,n,e,r){return n>r||t>e},t}(),d=function(){function t(){}return t.set_canvas=function(n,e,r){var i=document.getElementById(n);return t.set_canvas_element(i,e,r)},t.set_canvas_element=function(t,n,e){return t.style.width=n+"px",t.style.height=e+"px",t.width=t.clientWidth,t.height=t.clientHeight,t},t.get_context=function(t){return document.getElementById(t).getContext("2d")},t.get_context_by_canvas=function(t){return t.getContext("2d")},t.convert=function(t){return"rgba("+Math.floor(255*t.r)+","+Math.floor(255*t.g)+","+Math.floor(255*t.b)+",1)"},t}(),g=function(){function t(){}return t.uv_to_buffer_space=function(t){return new u(t.x,1-t.y)},t.buffer_to_uv_space=function(t){return new u(t.x,1-t.y)},t.texture2D=function(n,e){var r,i=e.w,o=e.h,a=t.uv_to_buffer_space(n),s=a.x,c=a.y,h=1/i,f=1/o,l=.5*h,p=.5*f,_=s/h,v=c/f,y=Math.floor(_),w=Math.floor(v),x=s%h,m=c%f;if(x>=l&&m>=p){_==y&&(y-=1),v==w&&(w-=1);var d=new u(y,w),g=new u(d.x+1,d.y),b=new u(d.x,d.y+1),z=new u(d.x+1,d.y+1);return{rectUV:r=new u((x-l)/h,(m-p)/f),NW:d,NE:g,SW:b,SE:z,color:t.Bilinear_Sampler(r,d,g,b,z,e)}}if(x<=l&&m>=p){v==w&&(w-=1),d=new u(y,w);var M=new u(d.x-1,d.y);return b=new u(d.x-1,d.y+1),z=new u(d.x,d.y+1),{rectUV:r=new u((x+l)/h,(m-p)/f),NW:M,NE:d,SW:b,SE:z,color:t.Bilinear_Sampler(r,M,d,b,z,e)}}return x<=l&&m<=p?(d=new u(y,w),M=new u(d.x-1,d.y-1),g=new u(d.x,d.y-1),b=new u(d.x-1,d.y),{rectUV:r=new u((x+l)/h,(m+p)/f),NW:M,NE:g,SW:b,SE:d,color:t.Bilinear_Sampler(r,M,g,b,d,e)}):x>=l&&m<=p?(_==y&&(y-=1),d=new u(y,w),M=new u(d.x,d.y-1),g=new u(d.x+1,d.y-1),z=new u(d.x+1,d.y),{rectUV:r=new u((x-l)/h,(m+p)/f),NW:M,NE:g,SW:d,SE:z,color:t.Bilinear_Sampler(r,M,g,d,z,e)}):void 0},t.Bilinear_Sampler=function(t,n,e,r,i,o){var u=o.get_clamp_mode(n.x,n.y),a=o.get_clamp_mode(e.x,e.y),s=o.get_clamp_mode(r.x,r.y),c=o.get_clamp_mode(i.x,i.y),h=x.lerp(u,a,t.x),f=x.lerp(s,c,t.x);return x.lerp(h,f,t.y)},t}(),b=function(){function t(){}return t.$=function(t){return document.getElementById(t)},t}();new(function(){function t(){var t=this;this.canvas_width=600,this.canvas_height=600,this.row_count=20,this.colume_count=20,window.onload=function(){t.init(),b.$("btn_reset").onclick=function(){t.Render()},b.$("move_right").onclick=function(){t.moveRight(),t.Render()},b.$("move_up").onclick=function(){t.moveUp(),t.Render()},b.$("canvas").onclick=function(n){t.reBulid(new u(n.offsetX,n.offsetY))}}}return t.prototype.texture2D=function(t){var n=g.texture2D(t,this.buffer),e=n.rectUV,r=n.NW,i=n.NE,o=n.SW,u=n.SE,a=n.color;this.drawPointByGridIndex(r),this.drawPointByGridIndex(i),this.drawPointByGridIndex(o),this.drawPointByGridIndex(u),this.drawRect(r),this.drawPointByRectUV(r,e);var s=d.get_context("canvas2");s.globalCompositeOperation="source-over",s.fillStyle=d.convert(a),s.fillRect(0,0,30,30)},t.prototype.drawUV=function(){var t=parseFloat(b.$("u").value),n=parseFloat(b.$("v").value);this.texture2D(new u(t,n))},t.prototype.moveRight=function(){var t=parseFloat(b.$("u").value),n=1/this.colume_count;t=y.accAdd(t,n),b.$("u").value=t.toString()},t.prototype.moveUp=function(){var t=parseFloat(b.$("v").value),n=1/this.row_count;t=y.accAdd(t,n),b.$("v").value=t.toString()},t.prototype.reBulid=function(t){var n=t.x/this.canvas_width,e=t.y/this.canvas_height,r=new u(n,e),i=g.buffer_to_uv_space(r);b.$("u").value=i.x.toString(),b.$("v").value=i.y.toString(),this.Render()},t.prototype.reset=function(){this.rect_w=this.canvas_width/this.colume_count,this.rect_h=this.canvas_height/this.row_count,null==this.buffer&&(this.buffer=new m(this.colume_count,this.row_count),console.log("init buffer"));for(var t=0;t<this.colume_count;t++)for(var n=0;n<this.row_count;n++)this.buffer.set(t,n,new x(0,0,0,1))},t.prototype.init=function(){this.reset(),w.drawStar(x.golden,this.buffer),this.Render()},t.prototype.Render=function(){this.drawBuffer(),this.drawUV()},t.prototype.drawBuffer=function(){var t=d.get_context("canvas");t.clearRect(0,0,600,600);for(var n=0;n<this.row_count;n++)for(var e=0;e<this.colume_count;e++)t.beginPath(),t.fillStyle=d.convert(this.buffer.get(e,n)),t.fillRect(e*this.rect_w+1,n*this.rect_h+1,this.rect_w-1,this.rect_h-1),t.stroke()},t.prototype.drawPointByGridIndex=function(t){var n=d.get_context("canvas");n.globalCompositeOperation="source-over",n.beginPath(),n.fillStyle="rgba(255,255,0,1)",n.fillRect((t.x+.5)*this.rect_w-3,(t.y+.5)*this.rect_h-3,6,6),n.stroke()},t.prototype.drawRect=function(t){var n=d.get_context("canvas");n.globalCompositeOperation="source-over",n.beginPath(),n.strokeStyle="rgba(255,255,0,1)",n.rect((t.x+.5)*this.rect_w,(t.y+.5)*this.rect_h,this.rect_w,this.rect_h),n.stroke()},t.prototype.drawPointByRectUV=function(t,n){var e=d.get_context("canvas");e.globalCompositeOperation="source-over",e.beginPath(),e.fillStyle="rgba(0,255,0,1)";var r=new u((t.x+.5)*this.rect_w+this.rect_w*n.x,(t.y+.5)*this.rect_h+this.rect_h*n.y);e.fillRect(r.x-3,r.y-3,6,6),e.stroke()},t}())})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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L01hdGgvUmF5LnRzIiwid2VicGFjazovL3dlYmdsX3Rlc3QvLi9zcmMvTWF0aC9WZWN0b3IudHMiLCJ3ZWJwYWNrOi8vd2ViZ2xfdGVzdC8uL3NyYy9NYXRoL1ZlY3RvcjRELnRzIiwid2VicGFjazovL3dlYmdsX3Rlc3QvLi9zcmMvTWF0aC9SYXk0RC50cyIsIndlYnBhY2s6Ly93ZWJnbF90ZXN0Ly4vc3JjL01hdGgvUGxhbmUudHMiLCJ3ZWJwYWNrOi8vd2ViZ2xfdGVzdC8uL3NyYy9NYXRoL1RyYW5zZm9ybS50cyIsIndlYnBhY2s6Ly93ZWJnbF90ZXN0Ly4vc3JjL01hdGgvVmVjdG9yMkQudHMiLCJ3ZWJwYWNrOi8vd2ViZ2xfdGVzdC8uL3NyYy9NYXRoL1Jhc3Rlcml6ZXIudHMiLCJ3ZWJwYWNrOi8vd2ViZ2xfdGVzdC8uL3NyYy9NYXRoL1RyaWFuZ2xlLnRzIiwid2VicGFjazovL3dlYmdsX3Rlc3QvLi9zcmMvTWF0aC9WZXJ0ZXgudHMiLCJ3ZWJwYWNrOi8vd2ViZ2xfdGVzdC8uL3NyYy9NYXRoL1Rvb2wudHMiLCJ3ZWJwYWNrOi8vd2ViZ2xfdGVzdC8uL3NyYy9NYXRoL1JHQkEudHMiLCJ3ZWJwYWNrOi8vd2ViZ2xfdGVzdC8uL3NyYy9NYXRoL0J1ZmZlcjJELnRzIiwid2VicGFjazovL3dlYmdsX3Rlc3QvLi9zcmMvTWF0aC9DYW52YXNIZWxwZXIudHMiLCJ3ZWJwYWNrOi8vd2ViZ2xfdGVzdC8uL3NyYy9NYXRoL1NhbXBsZXIudHMiLCJ3ZWJwYWNrOi8vd2ViZ2xfdGVzdC8uL3NyYy9NYXRoL0hIZWxwZXIudHMiLCJ3ZWJwYWNrOi8vd2ViZ2xfdGVzdC8uL3NyYy9UZXN0VGV4dHVyZUFwcC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVmVjb3IgZnJvbSBcIi4vVmVjdG9yXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSYXkge1xyXG4gICAgZnJvbTogVmVjb3I7XHJcbiAgICBkaXI6IFZlY29yO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGZyb206IFZlY29yLCBkaXI6IFZlY29yKSB7XHJcbiAgICAgICAgdGhpcy5mcm9tID0gZnJvbTtcclxuICAgICAgICB0aGlzLmRpciA9IGRpcjtcclxuICAgIH1cclxufTsiLCJpbXBvcnQgeyBsZXJwLCBudW1iZXJfZXF1YWwsIGNsYW1wIH0gZnJvbSAnLi9Ub29sJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmVjdG9yIHtcclxuXHJcbiAgICBzdGF0aWMgbWluX21heCh2MDogVmVjdG9yLCB2MTogVmVjdG9yLCB2MjogVmVjdG9yKSB7XHJcblxyXG4gICAgICAgIGxldCBtaW4gPSBuZXcgVmVjdG9yKE1hdGgubWluKE1hdGgubWluKHYwLngsIHYxLngpLCB2Mi54KSwgTWF0aC5taW4oTWF0aC5taW4odjAueSwgdjEueSksIHYyLnkpLCBNYXRoLm1pbihNYXRoLm1pbih2MC56LCB2MS56KSwgdjIueikpO1xyXG4gICAgICAgIGxldCBtYXggPSBuZXcgVmVjdG9yKE1hdGgubWF4KE1hdGgubWF4KHYwLngsIHYxLngpLCB2Mi54KSwgTWF0aC5tYXgoTWF0aC5tYXgodjAueSwgdjEueSksIHYyLnkpLCBNYXRoLm1heChNYXRoLm1heCh2MC56LCB2MS56KSwgdjIueikpO1xyXG4gICAgICAgIHJldHVybiB7IG1pbiwgbWF4IH07XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGNhbGN1bGF0ZV9ub3JtYWwodjA6IFZlY3RvciwgdjE6IFZlY3RvciwgdjI6IFZlY3Rvcikge1xyXG4gICAgICAgIGxldCB2MDEgPSBWZWN0b3IubWludXModjEsIHYwKTtcclxuICAgICAgICBsZXQgdjAyID0gVmVjdG9yLm1pbnVzKHYyLCB2MCk7XHJcbiAgICAgICAgbGV0IG5vcm1hbCA9IFZlY3Rvci5jcm9zcyh2MDEsIHYwMik7XHJcbiAgICAgICAgcmV0dXJuIG5vcm1hbC5ub3JtYWxpemUoKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgY2FsY3VsYXRlX2NlbnRlcih2MDogVmVjdG9yLCB2MTogVmVjdG9yLCB2MjogVmVjdG9yKSB7XHJcbiAgICAgICAgcmV0dXJuIHYwLmFkZCh2MSkuYWRkKHYyKS5tdWx0aXBseSgxIC8gMyk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHV2KHU6IG51bWJlciwgdjogbnVtYmVyKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IodSwgdiwgMCk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHVwID0gbmV3IFZlY3RvcigwLCAxLCAwKTtcclxuICAgIHN0YXRpYyB6ZXJvID0gbmV3IFZlY3RvcigwLCAwLCAwKTtcclxuXHJcbiAgICBzdGF0aWMgcmVmbGVjdChJOiBWZWN0b3IsIE46IFZlY3Rvcikge1xyXG4gICAgICAgIGxldCBMID0gLTIgKiBWZWN0b3IuZG90KEksIE4pXHJcbiAgICAgICAgcmV0dXJuIE4ubXVsdGlwbHkoTCkuYWRkKEkpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBhZGQoQTogVmVjdG9yLCBCOiBWZWN0b3IpIHtcclxuICAgICAgICBsZXQgdGVtcCA9IG5ldyBWZWN0b3IoQi54ICsgQS54LCBCLnkgKyBBLnksIEIueiArIEEueik7XHJcbiAgICAgICAgcmV0dXJuIHRlbXBcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgbWludXMoQTogVmVjdG9yLCBCOiBWZWN0b3IpIHtcclxuICAgICAgICBsZXQgdGVtcCA9IG5ldyBWZWN0b3IoQS54IC0gQi54LCBBLnkgLSBCLnksIEEueiAtIEIueik7XHJcbiAgICAgICAgcmV0dXJuIHRlbXBcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgbXVsdGlwbHkoQTogVmVjdG9yLCBzOiBudW1iZXIpIHtcclxuICAgICAgICBsZXQgdGVtcCA9IG5ldyBWZWN0b3IoQS54ICogcywgQS55ICogcywgQS56ICogcyk7XHJcbiAgICAgICAgcmV0dXJuIHRlbXBcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgbXVsdGlwbHkzKEE6IFZlY3RvciwgQjogVmVjdG9yKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IoQS54ICogQi54LCBBLnkgKiBCLnksIEEueiAqIEIueik7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGNyb3NzKEE6IFZlY3RvciwgQjogVmVjdG9yKSB7XHJcbiAgICAgICAgbGV0IHRlbXAgPSBuZXcgVmVjdG9yKEEueSAqIEIueiAtIEEueiAqIEIueSwgLUEueCAqIEIueiArIEEueiAqIEIueCwgQS54ICogQi55IC0gQS55ICogQi54KTtcclxuICAgICAgICByZXR1cm4gdGVtcDtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZG90KEE6IFZlY3RvciwgQjogVmVjdG9yKSB7XHJcbiAgICAgICAgcmV0dXJuIEEueCAqIEIueCArIEEueSAqIEIueSArIEEueiAqIEIuejtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZXF1YWwoQTogVmVjdG9yLCBCOiBWZWN0b3IpIHtcclxuICAgICAgICByZXR1cm4gbnVtYmVyX2VxdWFsKEEueCwgQi54KSAmJiBudW1iZXJfZXF1YWwoQS55LCBCLnkpICYmIG51bWJlcl9lcXVhbChBLnosIEIueik7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGxlcnAoQTogVmVjdG9yLCBCOiBWZWN0b3IsIHQ6IG51bWJlcikge1xyXG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yKFxyXG4gICAgICAgICAgICBsZXJwKEEueCwgQi54LCB0KSxcclxuICAgICAgICAgICAgbGVycChBLnksIEIueSwgdCksXHJcbiAgICAgICAgICAgIGxlcnAoQS56LCBCLnosIHQpKTtcclxuICAgIH1cclxuXHJcbiAgICB4OiBudW1iZXIgPSAwO1xyXG4gICAgeTogbnVtYmVyID0gMDtcclxuICAgIHo6IG51bWJlciA9IDA7XHJcbiAgICBjb25zdHJ1Y3RvcihweDogbnVtYmVyLCBweTogbnVtYmVyLCBwejogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy54ID0gcHg7XHJcbiAgICAgICAgdGhpcy55ID0gcHk7XHJcbiAgICAgICAgdGhpcy56ID0gcHo7XHJcbiAgICB9XHJcblxyXG4gICAgY2xhbXBfeChtaW46IG51bWJlciwgbWF4OiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLnggPSBjbGFtcCh0aGlzLngsIG1pbiwgbWF4KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBjbGFtcF95KG1pbjogbnVtYmVyLCBtYXg6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMueSA9IGNsYW1wKHRoaXMueSwgbWluLCBtYXgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIGxlbmd0aCgpIHtcclxuICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSArIHRoaXMueiAqIHRoaXMueik7XHJcbiAgICB9XHJcblxyXG4gICAgbm9ybWFsaXplKCkge1xyXG4gICAgICAgIGxldCB0ZW1wID0gdGhpcy5sZW5ndGgoKTtcclxuICAgICAgICB0aGlzLnggPSB0aGlzLnggLyB0ZW1wO1xyXG4gICAgICAgIHRoaXMueSA9IHRoaXMueSAvIHRlbXA7XHJcbiAgICAgICAgdGhpcy56ID0gdGhpcy56IC8gdGVtcDtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBhZGQoQTogVmVjdG9yKSB7XHJcbiAgICAgICAgcmV0dXJuIFZlY3Rvci5hZGQodGhpcywgQSk7XHJcbiAgICB9XHJcblxyXG4gICAgbWludXMoQTogVmVjdG9yKSB7XHJcbiAgICAgICAgcmV0dXJuIFZlY3Rvci5taW51cyh0aGlzLCBBKTtcclxuICAgIH1cclxuXHJcbiAgICBtdWx0aXBseShzOiBudW1iZXIpIHtcclxuICAgICAgICByZXR1cm4gVmVjdG9yLm11bHRpcGx5KHRoaXMsIHMpO1xyXG4gICAgfVxyXG5cclxuICAgIG5lZ2F0aXZlKCkge1xyXG4gICAgICAgIHJldHVybiBWZWN0b3IubXVsdGlwbHkodGhpcywgLTEpO1xyXG4gICAgfVxyXG5cclxuICAgIFZlY3RvcjJEKCkge1xyXG4gICAgICAgIHRoaXMueiA9IDA7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgY2xvbmUoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IodGhpcy54LCB0aGlzLnksIHRoaXMueik7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgVmVjb3IgZnJvbSBcIi4vVmVjdG9yXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWZWN0b3I0RCB7XHJcbiAgICBwOiBWZWNvcjtcclxuICAgIHc6IG51bWJlcjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihwOiBWZWNvciwgdzogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5wID0gcDtcclxuICAgICAgICB0aGlzLncgPSB3O1xyXG4gICAgfVxyXG59OyIsImltcG9ydCBWZWN0b3IgZnJvbSBcIi4vVmVjdG9yXCI7XHJcbmltcG9ydCBWZWNvcjREIGZyb20gXCIuL1ZlY3RvcjREXCI7XHJcblxyXG4vLyDlnKgzRCBzcGFjZeijgeWIh+eahOipsVxyXG4vLyDpgoTopoHogIPmha7ku4DpurzmmYLlgJnopoHnlKgoeCx5LHcp6KOB5YiHXHJcbi8vIOS7gOm6vOaZguWAmeimgeeUqCh4LHkseinoo4HliIdcclxuLy8gXHJcbi8vIOS4jeWmguebtOaOpeWcqDREIHNwYWNl6KOB5YiHXHJcbi8vIGh0dHBzOi8vZ3Bubm90ZXMuYmxvZ3Nwb3QuY29tLzIwMjEvMTEvYmxvZy1wb3N0XzI4Lmh0bWxcclxuLy8g5ZyWIDREIHNwYWNlIGNsaXBcclxuLy8g6YCZ6KOh55SoRGlyZWN0eOeahE5EQ1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSYXk0RCB7XHJcbiAgICBmcm9tOiBWZWNvcjREO1xyXG4gICAgZGlyOiBWZWNvcjREO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGZyb206IFZlY29yNEQsIHRvOiBWZWNvcjREKSB7XHJcbiAgICAgICAgdGhpcy5mcm9tID0gZnJvbTtcclxuICAgICAgICB0aGlzLmRpciA9IG5ldyBWZWNvcjREKFZlY3Rvci5taW51cyh0by5wLCBmcm9tLnApLCB0by53IC0gZnJvbS53KTtcclxuICAgIH1cclxuXHJcbiAgICB0X3doZW5feF9lcXVhbF93KCkge1xyXG4gICAgICAgIC8vIGZyb20ueCArIHQgKiBkaXIueD0gZnJvbS53ICsgdCAqIGRpci53O1xyXG4gICAgICAgIGxldCB0ID0gKHRoaXMuZnJvbS53IC0gdGhpcy5mcm9tLnAueCkgLyAodGhpcy5kaXIucC54IC0gdGhpcy5kaXIudyk7XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9XHJcblxyXG4gICAgdF93aGVuX3lfZXF1YWxfdygpIHtcclxuICAgICAgICBsZXQgdCA9ICh0aGlzLmZyb20udyAtIHRoaXMuZnJvbS5wLnkpIC8gKHRoaXMuZGlyLnAueSAtIHRoaXMuZGlyLncpO1xyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfVxyXG5cclxuICAgIHRfd2hlbl96X2VxdWFsX3coKSB7XHJcbiAgICAgICAgbGV0IHQgPSAodGhpcy5mcm9tLncgLSB0aGlzLmZyb20ucC56KSAvICh0aGlzLmRpci5wLnogLSB0aGlzLmRpci53KTtcclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH1cclxuXHJcbiAgICB0X3doZW5feF9lcXVhbF9taW51c193KCkge1xyXG4gICAgICAgIC8vIGZyb20ueCArIHQgKiBkaXIueD0gLShmcm9tLncgKyB0ICogZGlyLncpO1xyXG5cclxuICAgICAgICBsZXQgdCA9IC0odGhpcy5mcm9tLncgKyB0aGlzLmZyb20ucC54KSAvICh0aGlzLmRpci53ICsgdGhpcy5kaXIucC54KTtcclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH1cclxuXHJcbiAgICB0X3doZW5feV9lcXVhbF9taW51c193KCkge1xyXG4gICAgICAgIGxldCB0ID0gLSh0aGlzLmZyb20udyArIHRoaXMuZnJvbS5wLnkpIC8gKHRoaXMuZGlyLncgKyB0aGlzLmRpci5wLnkpO1xyXG4gICAgICAgIHJldHVybiB0O1xyXG4gICAgfVxyXG5cclxuICAgIHRfd2hlbl96X2VxdWFsX3plcm9fdygpIHtcclxuXHJcbiAgICAgICAgLy8gZnJvbS56ICsgdCAqIGRpci56PSAwO1xyXG4gICAgICAgIGxldCB0ID0gLXRoaXMuZnJvbS5wLnogLyB0aGlzLmRpci5wLno7XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9XHJcbn07IiwiaW1wb3J0IFZlY3RvciBmcm9tICcuL1ZlY3Rvcic7XHJcbmltcG9ydCBSYXkgZnJvbSAnLi9SYXknO1xyXG5pbXBvcnQgeyBudW1iZXJfZXF1YWwgfSBmcm9tICcuL1Rvb2wnO1xyXG5pbXBvcnQgSGl0SW5mbyBmcm9tICcuL0hpdEluZm8nO1xyXG5pbXBvcnQgSGl0YWJsZSBmcm9tICcuL0hpdGFibGUnO1xyXG5pbXBvcnQgU2hhZGVyIGZyb20gJy4uL01hdGVyYWlscy9TaGFkZXInO1xyXG5cclxuLy8g5bmz6Z2iXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBsYW5lIGltcGxlbWVudHMgSGl0YWJsZSB7XHJcblxyXG4gICAgQzogVmVjdG9yO1xyXG4gICAgTjogVmVjdG9yO1xyXG4gICAgY29uc3RydWN0b3IocG9pbnQ6IFZlY3Rvciwgbm9ybWFsOiBWZWN0b3IpIHtcclxuICAgICAgICB0aGlzLkMgPSBwb2ludDtcclxuICAgICAgICB0aGlzLk4gPSBub3JtYWw7XHJcbiAgICB9XHJcblxyXG4gICAgLy8g5ris6KmmdGVzcF9w5ZKM5pa55ZCR6YeP5piv5LiN5piv5Zyo5ZCM5LiA6YKKXHJcbiAgICBpc19wb3NpdGl2ZSh0ZXN0X3A6IFZlY3Rvcikge1xyXG4gICAgICAgIGxldCBkaWZmID0gVmVjdG9yLm1pbnVzKHRlc3RfcCwgdGhpcy5DKTtcclxuICAgICAgICBsZXQgdmFsdWUgPSBWZWN0b3IuZG90KGRpZmYsIHRoaXMuTik7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlID4gMDtcclxuICAgIH1cclxuXHJcbiAgICBoaXQocmF5OiBSYXksIHM6IFNoYWRlcik6IEhpdEluZm8ge1xyXG4gICAgICAgIGxldCByZXN1bHQgPSBQbGFuZS5oaXQocmF5LCB0aGlzKTtcclxuICAgICAgICBpZiAocmVzdWx0LmlzX2hpdClcclxuICAgICAgICAgICAgcmVzdWx0LnMgPSBzO1xyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGhpdChyYXk6IFJheSwgcGxhbmU6IFBsYW5lKTogSGl0SW5mbyB7XHJcbiAgICAgICAgLy8gcmF5IGhpdCBwbGFuZSBcclxuICAgICAgICBsZXQgZnJvbSA9IHJheS5mcm9tO1xyXG4gICAgICAgIGxldCBkaXIgPSByYXkuZGlyO1xyXG5cclxuICAgICAgICAvLyAoRi1DKeOAgk4gKyB0IChE44CCTikgPSAwXHJcbiAgICAgICAgLy8gdCAgPSAoQy1GKeOAgk4gLyAoROOAgk4pXHJcbiAgICAgICAgLy8gdCAgPSAoQSAvIChCKVxyXG4gICAgICAgIGxldCBCID0gVmVjdG9yLmRvdChkaXIsIHBsYW5lLk4pO1xyXG4gICAgICAgIGxldCBBID0gVmVjdG9yLmRvdChWZWN0b3IubWludXMocGxhbmUuQywgZnJvbSksIHBsYW5lLk4pO1xyXG5cclxuICAgICAgICAvLyBhdm9pZCBkaXZpZGUgYnkgMFxyXG4gICAgICAgIGlmIChudW1iZXJfZXF1YWwoQiwgMCkpXHJcbiAgICAgICAgICAgIHJldHVybiB7IGlzX2hpdDogZmFsc2UsIGhpdF9wb3M6IG51bGwsIHQ6IC0xIH07XHJcblxyXG4gICAgICAgIGxldCB0ID0gQSAvIEI7XHJcbiAgICAgICAgbGV0IGlzX2hpdCA9IHQgPiAwLjA7XHJcbiAgICAgICAgbGV0IGhpdF9wb3MgPSBmcm9tLmFkZChkaXIubXVsdGlwbHkodCkpO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGlzX2hpdCxcclxuICAgICAgICAgICAgaGl0X3BvcyxcclxuICAgICAgICAgICAgaTogZGlyLFxyXG4gICAgICAgICAgICB0LFxyXG4gICAgICAgICAgICBub3JtYWw6IHBsYW5lLk5cclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgVmVjdG9yIGZyb20gXCIuL1ZlY3RvclwiO1xyXG5pbXBvcnQgeyBkZWdyZWVfdG9fUmFkIH0gZnJvbSAnLi9Ub29sJ1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVHJhbnNmb3JtIHtcclxuICAgIHhBeGlzOiBWZWN0b3I7XHJcbiAgICB5QXhpczogVmVjdG9yO1xyXG4gICAgekF4aXM6IFZlY3RvcjtcclxuICAgIHBvc2l0aW9uOiBWZWN0b3I7XHJcbiAgICBjb25zdHJ1Y3Rvcih4QXhpczogVmVjdG9yLCB5QXhpczogVmVjdG9yLCB6QXhpczogVmVjdG9yLCBwb3NpdGlvbjogVmVjdG9yKSB7XHJcbiAgICAgICAgdGhpcy54QXhpcyA9IHhBeGlzO1xyXG4gICAgICAgIHRoaXMueUF4aXMgPSB5QXhpcztcclxuICAgICAgICB0aGlzLnpBeGlzID0gekF4aXM7XHJcbiAgICAgICAgdGhpcy5wb3NpdGlvbiA9IHBvc2l0aW9uO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyB0cmFuc2Zvcm1Qb2ludCh0cmFuc2Zvcm06IFRyYW5zZm9ybSwgcG9pbnQ6IFZlY3Rvcikge1xyXG4gICAgICAgIGxldCB2ZWN0b3JYID0gdHJhbnNmb3JtLnhBeGlzLm11bHRpcGx5KHBvaW50LngpO1xyXG4gICAgICAgIGxldCB2ZWN0b3JZID0gdHJhbnNmb3JtLnlBeGlzLm11bHRpcGx5KHBvaW50LnkpO1xyXG4gICAgICAgIGxldCB2ZWN0b3JaID0gdHJhbnNmb3JtLnpBeGlzLm11bHRpcGx5KHBvaW50LnopO1xyXG5cclxuICAgICAgICByZXR1cm4gdHJhbnNmb3JtLnBvc2l0aW9uLmFkZCh2ZWN0b3JYKS5hZGQodmVjdG9yWSkuYWRkKHZlY3RvclopO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyB0cmFuc2Zvcm1WZWN0b3IodHJhbnNmb3JtOiBUcmFuc2Zvcm0sIHZlcnRleDogVmVjdG9yKSB7XHJcbiAgICAgICAgbGV0IHZlY3RvclggPSB0cmFuc2Zvcm0ueEF4aXMubXVsdGlwbHkodmVydGV4LngpO1xyXG4gICAgICAgIGxldCB2ZWN0b3JZID0gdHJhbnNmb3JtLnlBeGlzLm11bHRpcGx5KHZlcnRleC55KTtcclxuICAgICAgICBsZXQgdmVjdG9yWiA9IHRyYW5zZm9ybS56QXhpcy5tdWx0aXBseSh2ZXJ0ZXgueik7XHJcblxyXG4gICAgICAgIHJldHVybiB2ZWN0b3JYLmFkZCh2ZWN0b3JZKS5hZGQodmVjdG9yWik7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHRyYW5zZm9ybVRyYW5zZm9ybSh0cmFuc2Zvcm06IFRyYW5zZm9ybSwgaW5wdXRUcmFuc2Zvcm06IFRyYW5zZm9ybSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgVHJhbnNmb3JtKFxyXG4gICAgICAgICAgICBUcmFuc2Zvcm0udHJhbnNmb3JtVmVjdG9yKHRyYW5zZm9ybSwgaW5wdXRUcmFuc2Zvcm0ueEF4aXMpLFxyXG4gICAgICAgICAgICBUcmFuc2Zvcm0udHJhbnNmb3JtVmVjdG9yKHRyYW5zZm9ybSwgaW5wdXRUcmFuc2Zvcm0ueUF4aXMpLFxyXG4gICAgICAgICAgICBUcmFuc2Zvcm0udHJhbnNmb3JtVmVjdG9yKHRyYW5zZm9ybSwgaW5wdXRUcmFuc2Zvcm0uekF4aXMpLFxyXG4gICAgICAgICAgICBUcmFuc2Zvcm0udHJhbnNmb3JtUG9pbnQodHJhbnNmb3JtLCBpbnB1dFRyYW5zZm9ybS5wb3NpdGlvbiksXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgcm90YXRlQnlaKGRlZ3JlZTogbnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IHJhZGlhbiA9IGRlZ3JlZV90b19SYWQoZGVncmVlKTtcclxuICAgICAgICBsZXQgYyA9IE1hdGguY29zKHJhZGlhbiksIHMgPSBNYXRoLnNpbihyYWRpYW4pO1xyXG4gICAgICAgIGxldCB4QXhpcyA9IG5ldyBWZWN0b3IoYywgcywgMCk7XHJcbiAgICAgICAgbGV0IHlBeGlzID0gbmV3IFZlY3RvcigtcywgYywgMCk7XHJcbiAgICAgICAgbGV0IHpBeGlzID0gbmV3IFZlY3RvcigwLCAwLCAxKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBUcmFuc2Zvcm0oXHJcbiAgICAgICAgICAgIHhBeGlzLFxyXG4gICAgICAgICAgICB5QXhpcyxcclxuICAgICAgICAgICAgekF4aXMsXHJcbiAgICAgICAgICAgIFZlY3Rvci56ZXJvLFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHJvdGF0ZUJ5WShkZWdyZWU6IG51bWJlcikge1xyXG4gICAgICAgIGxldCByYWRpYW4gPSBkZWdyZWVfdG9fUmFkKGRlZ3JlZSk7XHJcbiAgICAgICAgbGV0IGMgPSBNYXRoLmNvcyhyYWRpYW4pLCBzID0gTWF0aC5zaW4ocmFkaWFuKTtcclxuICAgICAgICBsZXQgekF4aXMgPSBuZXcgVmVjdG9yKHMsIDAsIGMpO1xyXG4gICAgICAgIGxldCB4QXhpcyA9IG5ldyBWZWN0b3IoYywgMCwgLXMpO1xyXG4gICAgICAgIGxldCB5QXhpcyA9IG5ldyBWZWN0b3IoMCwgMSwgMCk7XHJcblxyXG4gICAgICAgIHJldHVybiBuZXcgVHJhbnNmb3JtKFxyXG4gICAgICAgICAgICB4QXhpcyxcclxuICAgICAgICAgICAgeUF4aXMsXHJcbiAgICAgICAgICAgIHpBeGlzLFxyXG4gICAgICAgICAgICBWZWN0b3IuemVybyxcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyByb3RhdGVCeVgoZGVncmVlOiBudW1iZXIpIHtcclxuICAgICAgICBsZXQgcmFkaWFuID0gZGVncmVlX3RvX1JhZChkZWdyZWUpO1xyXG4gICAgICAgIGxldCBjID0gTWF0aC5jb3MocmFkaWFuKSwgcyA9IE1hdGguc2luKHJhZGlhbik7XHJcbiAgICAgICAgbGV0IHhBeGlzID0gbmV3IFZlY3RvcigxLCAwLCAwKTtcclxuICAgICAgICBsZXQgeUF4aXMgPSBuZXcgVmVjdG9yKDAsIGMsIHMpO1xyXG4gICAgICAgIGxldCB6QXhpcyA9IG5ldyBWZWN0b3IoMCwgLXMsIGMpO1xyXG5cclxuICAgICAgICByZXR1cm4gbmV3IFRyYW5zZm9ybShcclxuICAgICAgICAgICAgeEF4aXMsXHJcbiAgICAgICAgICAgIHlBeGlzLFxyXG4gICAgICAgICAgICB6QXhpcyxcclxuICAgICAgICAgICAgbmV3IFZlY3RvcigwLCAwLCAwKSxcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBvZmZzZXQoeDogbnVtYmVyLCB5OiBudW1iZXIsIHo6IG51bWJlcikge1xyXG4gICAgICAgIHJldHVybiBuZXcgVHJhbnNmb3JtKFxyXG4gICAgICAgICAgICBuZXcgVmVjdG9yKDEsIDAsIDApLFxyXG4gICAgICAgICAgICBuZXcgVmVjdG9yKDAsIDEsIDApLFxyXG4gICAgICAgICAgICBuZXcgVmVjdG9yKDAsIDAsIDEpLFxyXG4gICAgICAgICAgICBuZXcgVmVjdG9yKHgsIHksIHopLFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcbn0iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBWZWN0b3IyRCB7XHJcblxyXG4gICAgc3RhdGljIGFkZChBOiBWZWN0b3IyRCwgQjogVmVjdG9yMkQpIHtcclxuICAgICAgICBsZXQgdGVtcCA9IG5ldyBWZWN0b3IyRChCLnggKyBBLngsIEIueSArIEEueSk7XHJcbiAgICAgICAgcmV0dXJuIHRlbXBcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgbWludXMoQTogVmVjdG9yMkQsIEI6IFZlY3RvcjJEKSB7XHJcbiAgICAgICAgbGV0IHRlbXAgPSBuZXcgVmVjdG9yMkQoQS54IC0gQi54LCBBLnkgLSBCLnkpO1xyXG4gICAgICAgIHJldHVybiB0ZW1wXHJcbiAgICB9XHJcblxyXG4gICAgeDogbnVtYmVyO1xyXG4gICAgeTogbnVtYmVyO1xyXG4gICAgY29uc3RydWN0b3IoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLnggPSB4O1xyXG4gICAgICAgIHRoaXMueSA9IHk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIHBsdXMocDogVmVjdG9yMkQpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjJEKHRoaXMueCArIHAueCwgdGhpcy55ICsgcC55KTtcclxuICAgIH1cclxuXHJcbiAgICBtdWx0aXBseSA9IGZ1bmN0aW9uIChzOiBudW1iZXIpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjJEKHRoaXMueCAqIHMsIHRoaXMueSAqIHMpO1xyXG4gICAgfVxyXG5cclxuICAgIHRvU3RyaW5nID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBcIiggXCIgKyB0aGlzLnggKyBcIiAsIFwiICsgdGhpcy55ICsgXCIgKVwiO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IFRyYW5zZm9ybSBmcm9tICcuL1RyYW5zZm9ybSc7XHJcbmltcG9ydCBUcmlhbmdsZSBmcm9tICcuL1RyaWFuZ2xlJztcclxuaW1wb3J0IHsgQ2xpcFBsYW5lLCBjbGlwIH0gZnJvbSAnLi9Ub29sJztcclxuaW1wb3J0IFZlcnRleCBmcm9tICcuL1ZlcnRleCc7XHJcbmltcG9ydCBDYW1lcmEgZnJvbSAnLi9DYW1lcmEnO1xyXG5pbXBvcnQgVmVjdG9yIGZyb20gJy4vVmVjdG9yJztcclxuaW1wb3J0IEJ1ZmZlcjJEIGZyb20gXCIuL0J1ZmZlcjJEXCI7XHJcbmltcG9ydCBSR0JBIGZyb20gXCIuL1JHQkFcIjtcclxuaW1wb3J0IFJlbmRlclRhcmdldCBmcm9tICcuL1JlbmRlclRhcmdldCc7XHJcbmltcG9ydCBUZXh0dXJlMkQgZnJvbSAnLi9UZXh0dXJlMkQnO1xyXG5pbXBvcnQgVmVjdG9yMkQgZnJvbSAnLi9WZWN0b3IyRCc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSYXN0ZXJpemVyIHtcclxuICAgIHN0YXRpYyBjb2xvcl9idWZmZXI6IEJ1ZmZlcjJEPFJHQkE+O1xyXG4gICAgc3RhdGljIHpfYnVmZmVyOiBCdWZmZXIyRDxudW1iZXI+O1xyXG5cclxuICAgIHN0YXRpYyBjbGVhcihjb2xvcjogUkdCQSwgejogbnVtYmVyKSB7XHJcbiAgICAgICAgUmFzdGVyaXplci5jb2xvcl9idWZmZXIuY2xlYXIoY29sb3IpO1xyXG4gICAgICAgIFJhc3Rlcml6ZXIuel9idWZmZXIuY2xlYXIoeik7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHNob3cocmVuZGVyX3RhcmdldDogUmVuZGVyVGFyZ2V0KSB7XHJcbiAgICAgICAgcmVuZGVyX3RhcmdldC5zZXRfcGl4ZWwoKHg6IG51bWJlciwgeTogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBSYXN0ZXJpemVyLmNvbG9yX2J1ZmZlci5nZXQoeCwgeSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmVuZGVyX3RhcmdldC5zaG93X2J1ZmZlcignY2FudmFzJyk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGNsaXBfaGVscGVyKGluX2xpc3Q6IFRyaWFuZ2xlW10sXHJcbiAgICAgICAgdjBfb3V0OiAodHJpYW5nbGU6IFRyaWFuZ2xlKSA9PiBib29sZWFuLFxyXG4gICAgICAgIHYxX291dDogKHRyaWFuZ2xlOiBUcmlhbmdsZSkgPT4gYm9vbGVhbixcclxuICAgICAgICB2Ml9vdXQ6ICh0cmlhbmdsZTogVHJpYW5nbGUpID0+IGJvb2xlYW4sXHJcbiAgICAgICAgcGxhbmU6IENsaXBQbGFuZSkge1xyXG5cclxuICAgICAgICBsZXQgb3V0X2xpc3Q6IFRyaWFuZ2xlW10gPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBUIG9mIGluX2xpc3QpIHtcclxuICAgICAgICAgICAgbGV0IHJlc3VsdCA9IGNsaXAoVCwgdjBfb3V0LCB2MV9vdXQsIHYyX291dCwgcGxhbmUpO1xyXG4gICAgICAgICAgICBmb3IgKGxldCB0IG9mIHJlc3VsdClcclxuICAgICAgICAgICAgICAgIG91dF9saXN0LnB1c2godCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvdXRfbGlzdDtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgY2xpcF9pbl9Qcm9qZWN0aW9uX1NwYWNlKHYwOiBWZXJ0ZXgsIHYxOiBWZXJ0ZXgsIHYyOiBWZXJ0ZXgsIHBjYW1lcmE6IENhbWVyYSkge1xyXG4gICAgICAgIC8vIFRvZG865Z+36KGMNuWAi+W5s+mdoueahOS4ieinkuW9ouijgeWIh1xyXG4gICAgICAgIC8vIOWSjHnou7jlpL40NeW6pueahDLlgIvlubPpnaLjgIHlkox46Lu45aS+NDXluqbnmoQy5YCL5bmz6Z2i44CB6YKE5pyJTmPlkoxGY1xyXG4gICAgICAgIC8vIGh0dHBzOi8vZ3Bubm90ZXMuYmxvZ3Nwb3QuY29tLzIwMjEvMTEvYmxvZy1wb3N0XzI4Lmh0bWxcclxuXHJcbiAgICAgICAgbGV0IGluX2xpc3QgPSBbbmV3IFRyaWFuZ2xlKHYwLCB2MSwgdjIpXTtcclxuXHJcbiAgICAgICAgLy8gRmFyXHJcbiAgICAgICAgbGV0IG91dF9saXN0ID0gUmFzdGVyaXplci5jbGlwX2hlbHBlcihpbl9saXN0LFxyXG4gICAgICAgICAgICAoVDogVHJpYW5nbGUpID0+IHsgcmV0dXJuIFQudjAudyA8IFQudjAucC56OyB9LFxyXG4gICAgICAgICAgICAoVDogVHJpYW5nbGUpID0+IHsgcmV0dXJuIFQudjEudyA8IFQudjEucC56OyB9LFxyXG4gICAgICAgICAgICAoVDogVHJpYW5nbGUpID0+IHsgcmV0dXJuIFQudjIudyA8IFQudjIucC56OyB9LFxyXG4gICAgICAgICAgICBDbGlwUGxhbmUuRmFyKTtcclxuXHJcbiAgICAgICAgLy8gTmVhclxyXG4gICAgICAgIG91dF9saXN0ID0gUmFzdGVyaXplci5jbGlwX2hlbHBlcihvdXRfbGlzdCxcclxuICAgICAgICAgICAgKFQ6IFRyaWFuZ2xlKSA9PiB7IHJldHVybiAwID4gVC52MC5wLno7IH0sXHJcbiAgICAgICAgICAgIChUOiBUcmlhbmdsZSkgPT4geyByZXR1cm4gMCA+IFQudjEucC56OyB9LFxyXG4gICAgICAgICAgICAoVDogVHJpYW5nbGUpID0+IHsgcmV0dXJuIDAgPiBULnYyLnAuejsgfSxcclxuICAgICAgICAgICAgQ2xpcFBsYW5lLk5lYXIpO1xyXG5cclxuICAgICAgICAvLyDkuI3lsI1SaWdodCDjgIFMZWZ044CBVG9w44CBQm90dG9t5L2c6KOB5YiH5LqGXHJcbiAgICAgICAgLy8g6KOB5YiH5b6M5Y+N6ICM5pyD5pyJYnVn77yM5ZyW77yaYnVnL2J1Z193aGVuX2NsaXBwaW5nXzJcclxuICAgICAgICAvLyDlj43mraPlnKhzY3JlZW4gc3BhY2XlhYnmn7XljJbkuInop5LlvaLmmYLkuZ/mnIPnlKjpgornlYzoo4HliIdcclxuICAgICAgICAvLyByZXR1cm4gb3V0X2xpc3Q7XHJcblxyXG4gICAgICAgIC8vIFJpZ2h0XHJcbiAgICAgICAgb3V0X2xpc3QgPSBSYXN0ZXJpemVyLmNsaXBfaGVscGVyKG91dF9saXN0LFxyXG4gICAgICAgICAgICAoVDogVHJpYW5nbGUpID0+IHsgcmV0dXJuIFQudjAudyA8IFQudjAucC54OyB9LFxyXG4gICAgICAgICAgICAoVDogVHJpYW5nbGUpID0+IHsgcmV0dXJuIFQudjEudyA8IFQudjEucC54OyB9LFxyXG4gICAgICAgICAgICAoVDogVHJpYW5nbGUpID0+IHsgcmV0dXJuIFQudjIudyA8IFQudjIucC54OyB9LFxyXG4gICAgICAgICAgICBDbGlwUGxhbmUuUmlnaHQpO1xyXG5cclxuICAgICAgICAvLyBMZWZ0XHJcbiAgICAgICAgb3V0X2xpc3QgPSBSYXN0ZXJpemVyLmNsaXBfaGVscGVyKG91dF9saXN0LFxyXG4gICAgICAgICAgICAoVDogVHJpYW5nbGUpID0+IHsgcmV0dXJuIC1ULnYwLncgPiBULnYwLnAueDsgfSxcclxuICAgICAgICAgICAgKFQ6IFRyaWFuZ2xlKSA9PiB7IHJldHVybiAtVC52MS53ID4gVC52MS5wLng7IH0sXHJcbiAgICAgICAgICAgIChUOiBUcmlhbmdsZSkgPT4geyByZXR1cm4gLVQudjIudyA+IFQudjIucC54OyB9LFxyXG4gICAgICAgICAgICBDbGlwUGxhbmUuTGVmdCk7XHJcblxyXG4gICAgICAgIC8vIFRvcFxyXG4gICAgICAgIG91dF9saXN0ID0gUmFzdGVyaXplci5jbGlwX2hlbHBlcihvdXRfbGlzdCxcclxuICAgICAgICAgICAgKFQ6IFRyaWFuZ2xlKSA9PiB7IHJldHVybiBULnYwLncgPCBULnYwLnAueTsgfSxcclxuICAgICAgICAgICAgKFQ6IFRyaWFuZ2xlKSA9PiB7IHJldHVybiBULnYxLncgPCBULnYxLnAueTsgfSxcclxuICAgICAgICAgICAgKFQ6IFRyaWFuZ2xlKSA9PiB7IHJldHVybiBULnYyLncgPCBULnYyLnAueTsgfSxcclxuICAgICAgICAgICAgQ2xpcFBsYW5lLlRvcCk7XHJcblxyXG4gICAgICAgIC8vIEJvdHRvbVxyXG4gICAgICAgIG91dF9saXN0ID0gUmFzdGVyaXplci5jbGlwX2hlbHBlcihvdXRfbGlzdCxcclxuICAgICAgICAgICAgKFQ6IFRyaWFuZ2xlKSA9PiB7IHJldHVybiAtVC52MC53ID4gVC52MC5wLnk7IH0sXHJcbiAgICAgICAgICAgIChUOiBUcmlhbmdsZSkgPT4geyByZXR1cm4gLVQudjEudyA+IFQudjEucC55OyB9LFxyXG4gICAgICAgICAgICAoVDogVHJpYW5nbGUpID0+IHsgcmV0dXJuIC1ULnYyLncgPiBULnYyLnAueTsgfSxcclxuICAgICAgICAgICAgQ2xpcFBsYW5lLkJvdHRvbSk7XHJcblxyXG4gICAgICAgIHJldHVybiBvdXRfbGlzdDtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgTVZQX2JhY2tmYWNlX2N1bGxpbmdfY2xpcHBpbmcodHJpYW5nbGU6IFRyaWFuZ2xlLCBwY2FtZXJhOiBDYW1lcmEsIHdvcmxkVHJhbnNmb3JtOiBUcmFuc2Zvcm0pIHtcclxuICAgICAgICAvLyB0byB3b3JsZCBzcGFjZVxyXG4gICAgICAgIGxldCB2MF93ID0gVHJhbnNmb3JtLnRyYW5zZm9ybVBvaW50KHdvcmxkVHJhbnNmb3JtLCB0cmlhbmdsZS52MC5wKTtcclxuICAgICAgICBsZXQgdjFfdyA9IFRyYW5zZm9ybS50cmFuc2Zvcm1Qb2ludCh3b3JsZFRyYW5zZm9ybSwgdHJpYW5nbGUudjEucCk7XHJcbiAgICAgICAgbGV0IHYyX3cgPSBUcmFuc2Zvcm0udHJhbnNmb3JtUG9pbnQod29ybGRUcmFuc2Zvcm0sIHRyaWFuZ2xlLnYyLnApO1xyXG5cclxuICAgICAgICAvLyB0byBjYW1lcmEgc3BhY2VcclxuICAgICAgICBsZXQgdjBfYyA9IHBjYW1lcmEudG9DYW1lcmFTcGFjZSh2MF93KTtcclxuICAgICAgICBsZXQgdjFfYyA9IHBjYW1lcmEudG9DYW1lcmFTcGFjZSh2MV93KTtcclxuICAgICAgICBsZXQgdjJfYyA9IHBjYW1lcmEudG9DYW1lcmFTcGFjZSh2Ml93KTtcclxuXHJcbiAgICAgICAgLy8gdG8gcHJvamVjdGlvbiBzcGFjZSAoY2xpcCBzcGFjZSlcclxuICAgICAgICBsZXQgdjBfcCA9IHBjYW1lcmEudG9Qcm9qZWN0aW9uU3BhY2UodjBfYyk7XHJcbiAgICAgICAgbGV0IHYxX3AgPSBwY2FtZXJhLnRvUHJvamVjdGlvblNwYWNlKHYxX2MpO1xyXG4gICAgICAgIGxldCB2Ml9wID0gcGNhbWVyYS50b1Byb2plY3Rpb25TcGFjZSh2Ml9jKTtcclxuXHJcbiAgICAgICAgLy8gYmFjayBmYWNlIGN1bGxpbmcgXHJcbiAgICAgICAgLy8gbGV0IHYwX3Rlc3QgPSBuZXcgVmVjdG9yKHYwX3AueCwgdjBfcC55LCB2MF9jLnopO1xyXG4gICAgICAgIC8vIGxldCB2MV90ZXN0ID0gbmV3IFZlY3Rvcih2MV9wLngsIHYxX3AueSwgdjFfYy56KTtcclxuICAgICAgICAvLyBsZXQgdjJfdGVzdCA9IG5ldyBWZWN0b3IodjJfcC54LCB2Ml9wLnksIHYyX2Mueik7XHJcbiAgICAgICAgLy8gbGV0IG5vcm1hbCA9IFZlY3Rvci5jYWxjdWxhdGVfbm9ybWFsKHYwX3Rlc3QsIHYxX3Rlc3QsIHYyX3Rlc3QpO1xyXG4gICAgICAgIC8vIGxldCBjZW50ZXJfdG9fZXllID0gVmVjdG9yLm1pbnVzKFZlY3Rvci56ZXJvLCBWZWN0b3IuY2FsY3VsYXRlX2NlbnRlcih2MF90ZXN0LCB2MV90ZXN0LCB2Ml90ZXN0KSkubm9ybWFsaXplKCk7XHJcblxyXG4gICAgICAgIC8vIOWcqHZpZXcgc3BhY2XlgZrvvIzkuI3nhLblnKhjbGlwIHNwYWNl5YGa77yM6YKE6KaB5oqKeueUqHflj5bku6PmjonvvIzmnInpu57mkJ7lt6VcclxuICAgICAgICBsZXQgbm9ybWFsID0gVmVjdG9yLmNhbGN1bGF0ZV9ub3JtYWwodjBfYywgdjFfYywgdjJfYyk7XHJcbiAgICAgICAgbGV0IGNlbnRlcl90b19leWUgPSBWZWN0b3IubWludXMoVmVjdG9yLnplcm8sIFZlY3Rvci5jYWxjdWxhdGVfY2VudGVyKHYwX2MsIHYxX2MsIHYyX2MpKS5ub3JtYWxpemUoKTtcclxuICAgICAgICBsZXQgY29zX3ZhbHVlID0gVmVjdG9yLmRvdChub3JtYWwsIGNlbnRlcl90b19leWUpOztcclxuICAgICAgICBpZiAoY29zX3ZhbHVlIDw9IDApIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coJ2N1bGxpbmcnKVxyXG4gICAgICAgICAgICByZXR1cm4gW107XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyDph43mlrDntoHlrpp1dlxyXG4gICAgICAgIGxldCB2MCA9IHRyaWFuZ2xlLnYwLmNsb25lKCkudXBkYXRlX3AodjBfcCkudXBkYXRlX3codjBfYy56KTtcclxuICAgICAgICBsZXQgdjEgPSB0cmlhbmdsZS52MS5jbG9uZSgpLnVwZGF0ZV9wKHYxX3ApLnVwZGF0ZV93KHYxX2Mueik7XHJcbiAgICAgICAgbGV0IHYyID0gdHJpYW5nbGUudjIuY2xvbmUoKS51cGRhdGVfcCh2Ml9wKS51cGRhdGVfdyh2Ml9jLnopO1xyXG5cclxuICAgICAgICAvLyDln7fooYzkuInop5LlvaLoo4HliIdcclxuICAgICAgICByZXR1cm4gUmFzdGVyaXplci5jbGlwX2luX1Byb2plY3Rpb25fU3BhY2UodjAsIHYxLCB2MiwgcGNhbWVyYSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIHN0YXRpYyBwcm9jZXNzKHRyaWFuZ2xlOiBUcmlhbmdsZSwgcGNhbWVyYTogQ2FtZXJhLCB3b3JsZFRyYW5zZm9ybTogVHJhbnNmb3JtLCB0ZXh0dXJlOiBUZXh0dXJlMkQsIHVzZV9zb2xpZF9jb2xvcjogYm9vbGVhbiwgbmRjX2NsYW1wX2VmZmVjdDogYm9vbGVhbikge1xyXG5cclxuICAgICAgICAvLyB0byBNVlBcclxuICAgICAgICBsZXQgdHJpYW5nbGVfbGlzdCA9IFJhc3Rlcml6ZXIuTVZQX2JhY2tmYWNlX2N1bGxpbmdfY2xpcHBpbmcodHJpYW5nbGUsIHBjYW1lcmEsIHdvcmxkVHJhbnNmb3JtKTtcclxuXHJcbiAgICAgICAgbGV0IGxpc3QgPSBbXTtcclxuICAgICAgICBsZXQgY291bnQgPSAwO1xyXG4gICAgICAgIC8vIHRvIE5EQ1xyXG4gICAgICAgIGZvciAobGV0IFQgb2YgdHJpYW5nbGVfbGlzdCkge1xyXG5cclxuICAgICAgICAgICAgbGV0IG4wID0gcGNhbWVyYS50b05EQyhULnYwLnAsIFQudjAudyk7XHJcbiAgICAgICAgICAgIGxldCBuMSA9IHBjYW1lcmEudG9OREMoVC52MS5wLCBULnYxLncpO1xyXG4gICAgICAgICAgICBsZXQgbjIgPSBwY2FtZXJhLnRvTkRDKFQudjIucCwgVC52Mi53KTtcclxuXHJcbiAgICAgICAgICAgIC8vIE5EQ+aHieipsuimgeiQveWcqFxyXG4gICAgICAgICAgICAvLyAtMSDiiaQgeCDiiaQgMSwgLTEg4omkIHkg4omkIDFcclxuXHJcbiAgICAgICAgICAgIC8vIOS4jeijgeWIh2xlZnTjgIFyaWdodOOAgXRvcOOAgWJvdHRvbe+8jOeEtuW+jGNsYW1wIG5kY+S5n+eul+aYr+S4gOeorueJueauiuaViOaenFxyXG4gICAgICAgICAgICBpZiAobmRjX2NsYW1wX2VmZmVjdCkge1xyXG4gICAgICAgICAgICAgICAgbjAuY2xhbXBfeCgtMSwgMSkuY2xhbXBfeSgtMSwgMSk7XHJcbiAgICAgICAgICAgICAgICBuMS5jbGFtcF94KC0xLCAxKS5jbGFtcF95KC0xLCAxKTtcclxuICAgICAgICAgICAgICAgIG4yLmNsYW1wX3goLTEsIDEpLmNsYW1wX3koLTEsIDEpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyB0byBzY3JlZW4gc3BhY2VcclxuICAgICAgICAgICAgLy8gMCDiiaQgeCDiiaQgdywgMCDiiaQgeSDiiaQgaFxyXG4gICAgICAgICAgICBsZXQgczAgPSBwY2FtZXJhLnRvU2NyZWVuU3BhY2UobjApO1xyXG4gICAgICAgICAgICBsZXQgczEgPSBwY2FtZXJhLnRvU2NyZWVuU3BhY2UobjEpO1xyXG4gICAgICAgICAgICBsZXQgczIgPSBwY2FtZXJhLnRvU2NyZWVuU3BhY2UobjIpO1xyXG5cclxuICAgICAgICAgICAgLy8g54K65LqG5ZKM5pys5L6G55qEY29kZeebuOWuue+8jOaaq+aZguWFiOWCs+WHuuWOu1xyXG4gICAgICAgICAgICBsaXN0LnB1c2goczApO1xyXG4gICAgICAgICAgICBsaXN0LnB1c2goczEpO1xyXG4gICAgICAgICAgICBsaXN0LnB1c2goczIpO1xyXG5cclxuICAgICAgICAgICAgLy8g5om+5Ye65YyF5ZyN55qE55+p5b2iXHJcbiAgICAgICAgICAgIGxldCB7IG1pbiwgbWF4IH0gPSBWZWN0b3IubWluX21heChzMCwgczEsIHMyKTtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2cobWluLngsIG1heC54LCAnfCcsIG1pbi55LCBtYXgueSk7XHJcbiAgICAgICAgICAgIGxldCBtaW5feCA9IE1hdGguZmxvb3IobWluLngpO1xyXG4gICAgICAgICAgICBsZXQgbWF4X3ggPSBNYXRoLmZsb29yKG1heC54KTtcclxuICAgICAgICAgICAgbGV0IG1pbl95ID0gTWF0aC5mbG9vcihtaW4ueSk7XHJcbiAgICAgICAgICAgIGxldCBtYXhfeSA9IE1hdGguZmxvb3IobWF4LnkpO1xyXG5cclxuICAgICAgICAgICAgLy8gY2xhbXAgYnkgc2NyZWVuIHNpemVcclxuICAgICAgICAgICAgbWluX3ggPSBNYXRoLm1heCgwLCBtaW5feCk7XHJcbiAgICAgICAgICAgIG1pbl95ID0gTWF0aC5tYXgoMCwgbWluX3kpO1xyXG4gICAgICAgICAgICBtYXhfeCA9IE1hdGgubWluKHRoaXMuY29sb3JfYnVmZmVyLncgLSAxLCBtYXhfeCk7XHJcbiAgICAgICAgICAgIG1heF95ID0gTWF0aC5taW4odGhpcy5jb2xvcl9idWZmZXIuaCAtIDEsIG1heF95KTtcclxuXHJcbiAgICAgICAgICAgIGxldCBhbGwgPSAobWF4X3ggLSBtaW5feCkgKiAobWF4X3kgLSBtaW5feSk7XHJcbiAgICAgICAgICAgIGxldCBkcmF3ID0gMDtcclxuICAgICAgICAgICAgZm9yIChsZXQgeCA9IG1pbl94OyB4IDw9IG1heF94OyArK3gpIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IHkgPSBtaW5feTsgeSA8PSBtYXhfeTsgKyt5KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIOenu+WLleWNiuWAi+WDj+e0oFxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBQID0gbmV3IFZlY3Rvcih4ICsgMC41LCB5ICsgMC41LCAwKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyDlsI3nn6nlvaLoo6HnmoTmr4/lgIvpu55QXHJcbiAgICAgICAgICAgICAgICAgICAgLy8g5Yik5a6a5piv5ZCm5L2N5Zyoc2NyZWVuIHNwYWNl5LiJ6KeS5b2i6KOh6Z2iXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHsgc3VjY2VzcywgzrEsIM6yLCDOsyB9ID0gVHJpYW5nbGUuY2FsY3VsYXRlX86xX86yX86zKHMwLCBzMSwgczIsIFApO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghc3VjY2VzcylcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWVcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIVRyaWFuZ2xlLmlzX2luX3RyaWFuZ2xlKM6xLCDOsiwgzrMpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgeWVzIFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyAoMSnoqIjnrpd65YC8IFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIOW+nk5EQ+WIsFNjcmVlbiBTcGFjZeaYr+S7v+WwhOiuiuaPm++8jOWFp+aPkuasiumHjc6x44CBzrLjgIHOs+S4gOaoo1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vZ3Bubm90ZXMuYmxvZ3Nwb3QuY29tLzIwMTkvMTEvYmxvZy1wb3N0XzMwLmh0bWxcclxuICAgICAgICAgICAgICAgICAgICBsZXQgeiA9IFRyaWFuZ2xlLmludGVycG9sYXRpb24ozrMsIM6xLCDOsiwgbjAueiwgbjEueiwgbjIueik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHogdGVzdFxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBidWZmZXJfeiA9IFJhc3Rlcml6ZXIuel9idWZmZXIuZ2V0KHgsIHkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh6ID4gYnVmZmVyX3opXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyDlr6vlhaV65YC8XHJcbiAgICAgICAgICAgICAgICAgICAgUmFzdGVyaXplci56X2J1ZmZlci5zZXQoeCwgeSwgeik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vICgyKeWcqE5EQ+mAsuihjOWFp+aPku+8jOS5mOS4inflm57liLBwcm9qZWN0aW9uIHNwYWNlXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaHR0cHM6Ly9ncG5ub3Rlcy5ibG9nc3BvdC5jb20vMjAyMS8xMS9ibG9nLXBvc3RfMjcuaHRtbFxyXG4gICAgICAgICAgICAgICAgICAgIGxldCB3ID0gMSAvIFRyaWFuZ2xlLmludGVycG9sYXRpb24ozrMsIM6xLCDOsiwgMSAvIFQudjAudywgMSAvIFQudjEudywgMSAvIFQudjIudyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIOimgeWcqE5EQ+aPkuWAvO+8jOaJgOS7pemZpOS7pXdcclxuICAgICAgICAgICAgICAgICAgICBsZXQgdV9uZGMgPSBUcmlhbmdsZS5pbnRlcnBvbGF0aW9uKM6zLCDOsSwgzrIsIFQudjAudSAvIFQudjAudywgVC52MS51IC8gVC52MS53LCBULnYyLnUgLyBULnYyLncpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCB2X25kYyA9IFRyaWFuZ2xlLmludGVycG9sYXRpb24ozrMsIM6xLCDOsiwgVC52MC52IC8gVC52MC53LCBULnYxLnYgLyBULnYxLncsIFQudjIudiAvIFQudjIudyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIHByb2plY3Rpb24gc3BhY2UgXHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHUgPSB1X25kYyAqIHc7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IHYgPSB2X25kYyAqIHc7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGxldCB7IGNvbG9yIH0gPSB0ZXh0dXJlLmdldChuZXcgVmVjdG9yMkQodSwgdikpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1c2Vfc29saWRfY29sb3IpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFJhc3Rlcml6ZXIuY29sb3JfYnVmZmVyLnNldCh4LCB5LCBSR0JBLnllbGxvdyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBSYXN0ZXJpemVyLmNvbG9yX2J1ZmZlci5zZXQoeCwgeSwgY29sb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIGRyYXcrKztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjb3VudCsrO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhjb3VudCwgTWF0aC5mbG9vcigxMDAgKiBkcmF3IC8gYWxsKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBsaXN0O1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IFRyYW5zZm9ybSBmcm9tICcuL1RyYW5zZm9ybSc7XHJcbmltcG9ydCBWZWN0b3IgZnJvbSAnLi9WZWN0b3InXHJcbmltcG9ydCBWZXJ0ZXggZnJvbSAnLi9WZXJ0ZXgnXHJcbmltcG9ydCBDYW1lcmEgZnJvbSAnLi9DYW1lcmEnO1xyXG5pbXBvcnQgUGxhbmUgZnJvbSAnLi9QbGFuZSc7XHJcbmltcG9ydCBSYXkgZnJvbSAnLi9SYXknO1xyXG5pbXBvcnQgUmFzdGVyaXplciBmcm9tICcuL1Jhc3Rlcml6ZXInO1xyXG5pbXBvcnQgVGV4dHVyZTJEIGZyb20gJy4vVGV4dHVyZTJEJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRyaWFuZ2xlIHtcclxuXHJcbiAgICAvLyDpgJnkupvpu5566YO95pivMFxyXG4gICAgc3RhdGljIGNhbGN1bGF0ZV/OsV/Osl/OsyhzMDogVmVjdG9yLCBzMTogVmVjdG9yLCBzMjogVmVjdG9yLCBQOiBWZWN0b3IpIHtcclxuICAgICAgICBsZXQgZGlmZiA9IFZlY3Rvci5taW51cyhQLCBzMCk7XHJcblxyXG4gICAgICAgIC8vIOaxgnJheShQLFMwLVMyKeWSjHJheShTMCxTMS1TMinnmoTkuqTpu55cclxuICAgICAgICAvLyDnrYnlkIzmlrzmsYJyYXkoUCxTMC1TMinlkozlubPpnaLnmoTkuqTpu55cclxuICAgICAgICBsZXQgZGlyMDEgPSBWZWN0b3IubWludXMoczEsIHMwKTtcclxuICAgICAgICBsZXQgZGlyMDIgPSBWZWN0b3IubWludXMoczIsIHMwKTtcclxuICAgICAgICBsZXQgbiA9IG5ldyBWZWN0b3IoLWRpcjAxLnksIGRpcjAxLngsIDApO1xyXG4gICAgICAgIGxldCByYXkgPSBuZXcgUmF5KFAsIGRpcjAyLm11bHRpcGx5KC0xKSk7XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IFBsYW5lLmhpdChyYXksIG5ldyBQbGFuZShzMCwgbikpO1xyXG5cclxuICAgICAgICBsZXQgcF9vbl9kaXIwMSA9IHJlc3VsdC5oaXRfcG9zO1xyXG4gICAgICAgIGlmIChwX29uX2RpcjAxID09IG51bGwpIHsgIC8vIOmAgOWMluaIkOebtOe3mueahOS4ieinkuW9ouaJjeacieS5n+WPr+iDvVxyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZygn5bmz6KGMJywgczAsIHMxLCBzMiwgUCk7XHJcblxyXG4gICAgICAgICAgICAvLyDkuI3omZXnkIZcclxuICAgICAgICAgICAgcmV0dXJuIHsgc3VjY2VzczogZmFsc2UsIM6xOiAxLCDOsjogMCwgzrM6IDAgfTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHZlY3Rvcl/OsSA9IFZlY3Rvci5taW51cyhwX29uX2RpcjAxLCBzMCk7XHJcbiAgICAgICAgbGV0IHZlY3Rvcl/OsiA9IFZlY3Rvci5taW51cyhkaWZmLCB2ZWN0b3JfzrEpO1xyXG5cclxuICAgICAgICAvLyDmk4vmjolkaXIwMeOAgWRpcjAy5piveei7uOW5s+ihjOeahOaDheazgVxyXG4gICAgICAgIGxldCDOsSA9IChkaXIwMS54ID09IDApID8gdmVjdG9yX86xLnkgLyBkaXIwMS55IDogdmVjdG9yX86xLnggLyBkaXIwMS54O1xyXG4gICAgICAgIGxldCDOsiA9IChkaXIwMi54ID09IDApID8gdmVjdG9yX86yLnkgLyBkaXIwMi55IDogdmVjdG9yX86yLnggLyBkaXIwMi54O1xyXG4gICAgICAgIGlmIChpc05hTijOsSkpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2codmVjdG9yX86xLngsIGRpcjAxLngpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGlzTmFOKM6yKSkge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyh2ZWN0b3JfzrIueCwgZGlyMDIueCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCDOsyA9IDEgLSDOsSAtIM6yO1xyXG5cclxuICAgICAgICByZXR1cm4geyBzdWNjZXNzOiB0cnVlLCDOsSwgzrIsIM6zIH1cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgaXNfaW5fdHJpYW5nbGUozrE6IG51bWJlciwgzrI6IG51bWJlciwgzrM6IG51bWJlcikge1xyXG4gICAgICAgIHJldHVybiAozrEgPj0gMCAmJiDOsiA+PSAwICYmIM6zID49IDApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOWboOeCumNhbGN1bGF0ZV/OsV/Osl/Os+WvpuS9nOeahOaWueW8j++8jOaJgOS7pemghuW6j+aYr86z44CBzrHjgIHOsiDwn5idXHJcbiAgICBzdGF0aWMgaW50ZXJwb2xhdGlvbijOszogbnVtYmVyLCDOsTogbnVtYmVyLCDOsjogbnVtYmVyLCB2MDogbnVtYmVyLCB2MTogbnVtYmVyLCB2MjogbnVtYmVyKSB7XHJcbiAgICAgICAgcmV0dXJuIHYwICogzrMgKyB2MSAqIM6xICsgdjIgKiDOsjtcclxuICAgIH1cclxuXHJcbiAgICB2MDogVmVydGV4O1xyXG4gICAgdjE6IFZlcnRleDtcclxuICAgIHYyOiBWZXJ0ZXg7XHJcbiAgICBjb25zdHJ1Y3RvcihwdjA6IFZlcnRleCwgcHYxOiBWZXJ0ZXgsIHB2MjogVmVydGV4KSB7XHJcbiAgICAgICAgdGhpcy52MCA9IHB2MDtcclxuICAgICAgICB0aGlzLnYxID0gcHYxO1xyXG4gICAgICAgIHRoaXMudjIgPSBwdjI7XHJcbiAgICB9XHJcblxyXG4gICAgdl9zOiBWZWN0b3JbXTtcclxuICAgIHJhc3Rlcml6ZShwY2FtZXJhOiBDYW1lcmEsIHdvcmxkVHJhbnNmb3JtOiBUcmFuc2Zvcm0sIHRleHR1cmU6IFRleHR1cmUyRCwgdXNlX3NvbGlkX2NvbG9yOiBib29sZWFuLCBuZGNfY2xhbXBfZWZmZWN0OiBib29sZWFuKSB7XHJcbiAgICAgICAgdGhpcy52X3MgPSBSYXN0ZXJpemVyLnByb2Nlc3ModGhpcywgcGNhbWVyYSwgd29ybGRUcmFuc2Zvcm0sIHRleHR1cmUsIHVzZV9zb2xpZF9jb2xvciwgbmRjX2NsYW1wX2VmZmVjdCk7XHJcbiAgICB9XHJcblxyXG4gICAgZHJhdyhjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRCkge1xyXG4gICAgICAgIGlmICh0aGlzLnZfcyA9PSBudWxsKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgIGxldCB0Q291bnQgPSB0aGlzLnZfcy5sZW5ndGggLyAzO1xyXG4gICAgICAgIGZvciAobGV0IGMgPSAxOyBjIDw9IHRDb3VudDsgKytjKSB7XHJcbiAgICAgICAgICAgIGxldCBpbmRleCA9IDMgKiBjIC0gMTtcclxuICAgICAgICAgICAgY3R4Lm1vdmVUbyh0aGlzLnZfc1tpbmRleF0ueCwgdGhpcy52X3NbaW5kZXhdLnkpO1xyXG4gICAgICAgICAgICBjdHgubGluZVRvKHRoaXMudl9zW2luZGV4IC0gMl0ueCwgdGhpcy52X3NbaW5kZXggLSAyXS55KTtcclxuICAgICAgICAgICAgY3R4LmxpbmVUbyh0aGlzLnZfc1tpbmRleCAtIDFdLngsIHRoaXMudl9zW2luZGV4IC0gMV0ueSk7XHJcbiAgICAgICAgICAgIGN0eC5saW5lVG8odGhpcy52X3NbaW5kZXhdLngsIHRoaXMudl9zW2luZGV4XS55KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbiIsIlxyXG5pbXBvcnQgeyBsZXJwIH0gZnJvbSAnLi9Ub29sJztcclxuaW1wb3J0IFZlY3RvciBmcm9tICcuL1ZlY3RvcidcclxuaW1wb3J0IFZlY3RvcjREIGZyb20gJy4vVmVjdG9yNEQnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmVydGV4IHtcclxuICAgIHN0YXRpYyBidWlsZF92ZXJ0ZXgocDogVmVjdG9yLCBuOiBWZWN0b3IsIHc6IG51bWJlciwgdTogbnVtYmVyLCB2OiBudW1iZXIpIHtcclxuICAgICAgICBsZXQgdmVydGV4ID0gbmV3IFZlcnRleChwLCBuLCB3LCB1LCB2KTtcclxuICAgICAgICByZXR1cm4gdmVydGV4O1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBsZXJwKHYwOiBWZXJ0ZXgsIHYxOiBWZXJ0ZXgsIHQ6IG51bWJlcikge1xyXG4gICAgICAgIGxldCBwID0gVmVjdG9yLmxlcnAodjAucCwgdjEucCwgdCk7XHJcbiAgICAgICAgbGV0IG4gPSBWZWN0b3IubGVycCh2MC5uLCB2MS5uLCB0KTtcclxuICAgICAgICBsZXQgdyA9IGxlcnAodjAudywgdjEudywgdCk7XHJcbiAgICAgICAgbGV0IHUgPSBsZXJwKHYwLnUsIHYxLnUsIHQpO1xyXG4gICAgICAgIGxldCB2ID0gbGVycCh2MC52LCB2MS52LCB0KTtcclxuICAgICAgICByZXR1cm4gbmV3IFZlcnRleChwLCBuLCB3LCB1LCB2KTtcclxuICAgIH1cclxuXHJcbiAgICBwOiBWZWN0b3I7XHJcbiAgICB3OiBudW1iZXI7XHJcbiAgICB1OiBudW1iZXI7XHJcbiAgICB2OiBudW1iZXI7XHJcbiAgICBuOiBWZWN0b3I7XHJcblxyXG4gICAgY29uc3RydWN0b3IocDogVmVjdG9yLCBuOiBWZWN0b3IsIHc6IG51bWJlciwgdTogbnVtYmVyLCB2OiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLnAgPSBwO1xyXG4gICAgICAgIHRoaXMubiA9IG47XHJcbiAgICAgICAgdGhpcy53ID0gdztcclxuICAgICAgICB0aGlzLnUgPSB1O1xyXG4gICAgICAgIHRoaXMudiA9IHY7XHJcbiAgICB9XHJcblxyXG4gICAgY2xvbmUoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBWZXJ0ZXgodGhpcy5wLmNsb25lKCksIHRoaXMubi5jbG9uZSgpLCB0aGlzLncsIHRoaXMudSwgdGhpcy52KTtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVfcChwOiBWZWN0b3IpIHtcclxuICAgICAgICB0aGlzLnAgPSBwO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG5cclxuICAgIHVwZGF0ZV93KHc6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMudyA9IHc7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0X1ZlY3RvcjREKCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yNEQodGhpcy5wLCB0aGlzLncpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IFNjZW5lTm9kZSBmcm9tIFwiLi4vT2JqZWN0L1NjZW5lTm9kZVwiO1xyXG5pbXBvcnQgUmF5IGZyb20gXCIuL1JheVwiO1xyXG5pbXBvcnQgUmF5NEQgZnJvbSBcIi4vUmF5NERcIjtcclxuaW1wb3J0IEhpdEluZm8gZnJvbSBcIi4vSGl0SW5mb1wiO1xyXG5pbXBvcnQgVmVjdG9yIGZyb20gXCIuL1ZlY3RvclwiO1xyXG5pbXBvcnQgVHJpYW5nbGUgZnJvbSBcIi4vVHJpYW5nbGVcIjtcclxuaW1wb3J0IFZlcnRleCBmcm9tIFwiLi9WZXJ0ZXhcIjtcclxuaW1wb3J0IFBsYW5lIGZyb20gXCIuL1BsYW5lXCI7XHJcbmltcG9ydCBSR0JBIGZyb20gXCIuL1JHQkFcIjtcclxuaW1wb3J0IEJ1ZmZlcjJEIGZyb20gXCIuL0J1ZmZlcjJEXCI7XHJcbmltcG9ydCBWZWN0b3IyRCBmcm9tIFwiLi9WZWN0b3IyRFwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRlZ3JlZV90b19SYWQoZDogbnVtYmVyKSB7XHJcbiAgICByZXR1cm4gTWF0aC5QSSAqIGQgLyAxODA7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZXBzaWxvbjogbnVtYmVyID0gMC4wMDE7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbnVtYmVyX2VxdWFsKGE6IG51bWJlciwgYjogbnVtYmVyKSB7XHJcbiAgICByZXR1cm4gTWF0aC5hYnMoYSAtIGIpIDwgZXBzaWxvbjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNsYW1wKHg6IG51bWJlciwgbWluOiBudW1iZXIsIG1heDogbnVtYmVyKSB7XHJcbiAgICBpZiAoeCA+IG1heClcclxuICAgICAgICByZXR1cm4gbWF4O1xyXG4gICAgZWxzZSBpZiAoeCA8IG1pbilcclxuICAgICAgICByZXR1cm4gbWluO1xyXG4gICAgZWxzZVxyXG4gICAgICAgIHJldHVybiB4O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0X2hpdF9zb3J0X2xpc3Qob2JqX2xpc3Q6IFNjZW5lTm9kZVtdLCByYXk6IFJheSkge1xyXG4gICAgbGV0IGhpdF9zb3J0X2xpc3QgPSBvYmpfbGlzdC5tYXAob2JqID0+IG9iai5oLmhpdChyYXksIG9iai5zKSlcclxuICAgICAgICAuZmlsdGVyKGluZm8gPT4gaW5mby5pc19oaXQpXHJcbiAgICAgICAgLnNvcnQoKGE6IEhpdEluZm8sIGI6IEhpdEluZm8pID0+IGEudCAtIGIudCk7XHJcblxyXG4gICAgcmV0dXJuIGhpdF9zb3J0X2xpc3Q7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRfc2hhZG93X3dlaWdodChoaXRfaW5mbzogSGl0SW5mbywgZGlyZWN0aW9uX2xpZ2h0X2RpcjogVmVjdG9yLCBvYmpfbGlzdDogU2NlbmVOb2RlW10pIHtcclxuXHJcbiAgICAvLyDmmK/lkKblnKjlvbHlrZDlhadcclxuICAgIGxldCBkaXIgPSBkaXJlY3Rpb25fbGlnaHRfZGlyLm5lZ2F0aXZlKCk7XHJcbiAgICBsZXQgZnJvbSA9IGhpdF9pbmZvLmhpdF9wb3MuYWRkKGRpci5tdWx0aXBseShlcHNpbG9uKSk7IC8vIOWBj+enu+S4gOWwj+autei3nembou+8jOmBv+WFjeWwhOS4reiHquW3sVxyXG4gICAgbGV0IHJheSA9IG5ldyBSYXkoZnJvbSwgZGlyKTtcclxuICAgIGxldCBoaXRfc29ydF9saXN0ID0gZ2V0X2hpdF9zb3J0X2xpc3Qob2JqX2xpc3QsIHJheSk7XHJcbiAgICBpZiAoaGl0X3NvcnRfbGlzdC5sZW5ndGggIT0gMCkgeyAvLyDlnKjlvbHlrZDlhadcclxuICAgICAgICByZXR1cm4gMC40NTsgLy8g5LiN6KaB5aSq6buRXHJcbiAgICB9IGVsc2VcclxuICAgICAgICByZXR1cm4gMTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGxlcnAoYTogbnVtYmVyLCBiOiBudW1iZXIsIHQ6IG51bWJlcikge1xyXG4gICAgcmV0dXJuIGEgKyB0ICogKGIgLSBhKTtcclxufVxyXG5cclxuZXhwb3J0IGVudW0gQ2xpcFBsYW5lIHtcclxuICAgIE5lYXIsXHJcbiAgICBGYXIsXHJcbiAgICBSaWdodCxcclxuICAgIExlZnQsXHJcbiAgICBUb3AsXHJcbiAgICBCb3R0b21cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNsaXAodHJpYW5nbGU6IFRyaWFuZ2xlLFxyXG4gICAgdjBfb3V0OiAodHJpYW5nbGU6IFRyaWFuZ2xlKSA9PiBib29sZWFuLFxyXG4gICAgdjFfb3V0OiAodHJpYW5nbGU6IFRyaWFuZ2xlKSA9PiBib29sZWFuLFxyXG4gICAgdjJfb3V0OiAodHJpYW5nbGU6IFRyaWFuZ2xlKSA9PiBib29sZWFuLFxyXG4gICAgcGxhbmU6IENsaXBQbGFuZSkge1xyXG5cclxuICAgIGxldCB2X2NsaXA6IFRyaWFuZ2xlW10gPSBbXTtcclxuXHJcbiAgICBsZXQgZ2V0Q3Jvc3NQb2ludCA9IGZ1bmN0aW9uICh2MDogVmVydGV4LCB2MTogVmVydGV4KSB7XHJcbiAgICAgICAgbGV0IHJheSA9IG5ldyBSYXk0RCh2MC5nZXRfVmVjdG9yNEQoKSwgdjEuZ2V0X1ZlY3RvcjREKCkpO1xyXG5cclxuICAgICAgICBsZXQgdCA9IDA7XHJcbiAgICAgICAgc3dpdGNoIChwbGFuZSkge1xyXG4gICAgICAgICAgICBjYXNlIENsaXBQbGFuZS5GYXI6XHJcbiAgICAgICAgICAgICAgICB0ID0gcmF5LnRfd2hlbl96X2VxdWFsX3coKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENsaXBQbGFuZS5OZWFyOlxyXG4gICAgICAgICAgICAgICAgdCA9IHJheS50X3doZW5fel9lcXVhbF96ZXJvX3coKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENsaXBQbGFuZS5SaWdodDpcclxuICAgICAgICAgICAgICAgIHQgPSByYXkudF93aGVuX3hfZXF1YWxfdygpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgQ2xpcFBsYW5lLkxlZnQ6XHJcbiAgICAgICAgICAgICAgICB0ID0gcmF5LnRfd2hlbl94X2VxdWFsX21pbnVzX3coKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENsaXBQbGFuZS5Ub3A6XHJcbiAgICAgICAgICAgICAgICB0ID0gcmF5LnRfd2hlbl95X2VxdWFsX3coKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIENsaXBQbGFuZS5Cb3R0b206XHJcbiAgICAgICAgICAgICAgICB0ID0gcmF5LnRfd2hlbl95X2VxdWFsX21pbnVzX3coKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIFZlcnRleC5sZXJwKHYwLCB2MSwgdCk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gdm8gaW4gXHJcbiAgICBsZXQgY2xpcF9maXJzdF9pbiA9IGZ1bmN0aW9uICh2MDogVmVydGV4LCB2MTogVmVydGV4LCB2MjogVmVydGV4KSB7XHJcbiAgICAgICAgLy8gMSB0cmlhbmdsZSB0byAxIHRyaWFuZ2xlXHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ29uZScpO1xyXG4gICAgICAgIHZfY2xpcFswXSA9IG5ldyBUcmlhbmdsZSh2MCwgZ2V0Q3Jvc3NQb2ludCh2MCwgdjEpLCBnZXRDcm9zc1BvaW50KHYwLCB2MikpXHJcbiAgICB9XHJcblxyXG4gICAgLy8gdm8gb3V0XHJcbiAgICBsZXQgY2xpcF9maXJzdF9vdXQgPSBmdW5jdGlvbiAodjA6IFZlcnRleCwgdjE6IFZlcnRleCwgdjI6IFZlcnRleCkge1xyXG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCd0d28nKTtcclxuICAgICAgICAvLyAxIHRyaWFuZ2xlIHRvIDIgdHJpYW5nbGVcclxuICAgICAgICBsZXQgY3Jvc3MxID0gZ2V0Q3Jvc3NQb2ludCh2MiwgdjApO1xyXG4gICAgICAgIGxldCBjcm9zczIgPSBnZXRDcm9zc1BvaW50KHYwLCB2MSk7XHJcblxyXG4gICAgICAgIHZfY2xpcFswXSA9IG5ldyBUcmlhbmdsZSh2MiwgY3Jvc3MxLCBjcm9zczIpO1xyXG4gICAgICAgIHZfY2xpcFsxXSA9IG5ldyBUcmlhbmdsZSh2MiwgY3Jvc3MyLCB2MSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIC8vIOaciTjnqK7mg4Xms4FcclxuICAgIGlmICh2MF9vdXQodHJpYW5nbGUpKS8vb3V0XHJcbiAgICB7XHJcbiAgICAgICAgaWYgKHYxX291dCh0cmlhbmdsZSkpLy8gb3V0IG91dFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYgKHYyX291dCh0cmlhbmdsZSkpLy8gb3V0IG91dCBvdXQgKG5vIGNsaXApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdmdWxsIG91dCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgLy9vdXQgb3V0IGluXHJcbiAgICAgICAgICAgICAgICBjbGlwX2ZpcnN0X2luKHRyaWFuZ2xlLnYyLCB0cmlhbmdsZS52MCwgdHJpYW5nbGUudjEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIC8vb3V0IGluIFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYgKHYyX291dCh0cmlhbmdsZSkpLy9vdXQgaW4gb3V0XHJcbiAgICAgICAgICAgICAgICBjbGlwX2ZpcnN0X2luKHRyaWFuZ2xlLnYxLCB0cmlhbmdsZS52MiwgdHJpYW5nbGUudjApO1xyXG4gICAgICAgICAgICBlbHNlIC8vIG91dCBpbiBpblxyXG4gICAgICAgICAgICAgICAgY2xpcF9maXJzdF9vdXQodHJpYW5nbGUudjAsIHRyaWFuZ2xlLnYxLCB0cmlhbmdsZS52Mik7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZWxzZSAvLyBpblxyXG4gICAge1xyXG4gICAgICAgIGlmICh2MV9vdXQodHJpYW5nbGUpKS8vIGluIG91dCBcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmICh2Ml9vdXQodHJpYW5nbGUpKS8vIGluIG91dCBvdXRcclxuICAgICAgICAgICAgICAgIGNsaXBfZmlyc3RfaW4odHJpYW5nbGUudjAsIHRyaWFuZ2xlLnYxLCB0cmlhbmdsZS52Mik7XHJcbiAgICAgICAgICAgIGVsc2UgLy8gaW4gb3V0IGluXHJcbiAgICAgICAgICAgICAgICBjbGlwX2ZpcnN0X291dCh0cmlhbmdsZS52MSwgdHJpYW5nbGUudjIsIHRyaWFuZ2xlLnYwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSAvLyBpbiBpblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYgKHYyX291dCh0cmlhbmdsZSkpLy8gaW4gaW4gb3V0XHJcbiAgICAgICAgICAgICAgICBjbGlwX2ZpcnN0X291dCh0cmlhbmdsZS52MiwgdHJpYW5nbGUudjAsIHRyaWFuZ2xlLnYxKTtcclxuICAgICAgICAgICAgZWxzZSAvLyBpbiBpbiBpbiAobm8gY2xpcClcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgdl9jbGlwWzBdID0gdHJpYW5nbGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdl9jbGlwO1xyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgTWF0aEhlbHBlciB7XHJcbiAgICAvL+S/ruato+mZpOazlemMr+iqpFxyXG4gICAgc3RhdGljIGFjY0RpdihhcmcxOiBudW1iZXIsIGFyZzI6IG51bWJlcikge1xyXG4gICAgICAgIC8vY29kZSBmcm9tIGh0dHA6Ly84c3QuYmxvZ3Nwb3QudHcvMjAxMi8xMC9qc2J1Zy5odG1sXHJcbiAgICAgICAgbGV0IHQxID0gMCwgdDIgPSAwLCByMSwgcjI7XHJcbiAgICAgICAgdHJ5IHsgdDEgPSBhcmcxLnRvU3RyaW5nKCkuc3BsaXQoXCIuXCIpWzFdLmxlbmd0aCB9IGNhdGNoIChlKSB7IH1cclxuICAgICAgICB0cnkgeyB0MiA9IGFyZzIudG9TdHJpbmcoKS5zcGxpdChcIi5cIilbMV0ubGVuZ3RoIH0gY2F0Y2ggKGUpIHsgfVxyXG5cclxuICAgICAgICByMSA9IE51bWJlcihhcmcxLnRvU3RyaW5nKCkucmVwbGFjZShcIi5cIiwgXCJcIikpXHJcbiAgICAgICAgcjIgPSBOdW1iZXIoYXJnMi50b1N0cmluZygpLnJlcGxhY2UoXCIuXCIsIFwiXCIpKVxyXG4gICAgICAgIHJldHVybiAocjEgLyByMikgKiBNYXRoLnBvdygxMCwgdDIgLSB0MSk7XHJcbiAgICB9XHJcblxyXG4gICAgLy/kv67mraPliqDms5XpjK/oqqRcclxuICAgIHN0YXRpYyBhY2NBZGQoYXJnMTogbnVtYmVyLCBhcmcyOiBudW1iZXIpIHtcclxuICAgICAgICAvL2NvZGUgZnJvbSBodHRwOi8vOHN0LmJsb2dzcG90LnR3LzIwMTIvMTAvanNidWcuaHRtbFxyXG4gICAgICAgIGxldCByMSwgcjIsIG0sIGM7XHJcbiAgICAgICAgdHJ5IHsgcjEgPSBhcmcxLnRvU3RyaW5nKCkuc3BsaXQoXCIuXCIpWzFdLmxlbmd0aCB9IGNhdGNoIChlKSB7IHIxID0gMCB9XHJcbiAgICAgICAgdHJ5IHsgcjIgPSBhcmcyLnRvU3RyaW5nKCkuc3BsaXQoXCIuXCIpWzFdLmxlbmd0aCB9IGNhdGNoIChlKSB7IHIyID0gMCB9XHJcbiAgICAgICAgYyA9IE1hdGguYWJzKHIxIC0gcjIpO1xyXG4gICAgICAgIG0gPSBNYXRoLnBvdygxMCwgTWF0aC5tYXgocjEsIHIyKSlcclxuICAgICAgICBpZiAoYyA+IDApIHtcclxuICAgICAgICAgICAgbGV0IGNtID0gTWF0aC5wb3coMTAsIGMpO1xyXG4gICAgICAgICAgICBpZiAocjEgPiByMikge1xyXG4gICAgICAgICAgICAgICAgYXJnMSA9IE51bWJlcihhcmcxLnRvU3RyaW5nKCkucmVwbGFjZShcIi5cIiwgXCJcIikpO1xyXG4gICAgICAgICAgICAgICAgYXJnMiA9IE51bWJlcihhcmcyLnRvU3RyaW5nKCkucmVwbGFjZShcIi5cIiwgXCJcIikpICogY207XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBhcmcxID0gTnVtYmVyKGFyZzEudG9TdHJpbmcoKS5yZXBsYWNlKFwiLlwiLCBcIlwiKSkgKiBjbTtcclxuICAgICAgICAgICAgICAgIGFyZzIgPSBOdW1iZXIoYXJnMi50b1N0cmluZygpLnJlcGxhY2UoXCIuXCIsIFwiXCIpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgYXJnMSA9IE51bWJlcihhcmcxLnRvU3RyaW5nKCkucmVwbGFjZShcIi5cIiwgXCJcIikpO1xyXG4gICAgICAgICAgICBhcmcyID0gTnVtYmVyKGFyZzIudG9TdHJpbmcoKS5yZXBsYWNlKFwiLlwiLCBcIlwiKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiAoYXJnMSArIGFyZzIpIC8gbVxyXG4gICAgfVxyXG59XHJcblxyXG4vLyDku6XliY3lr6vnmoRjb2RlXHJcbmV4cG9ydCBjbGFzcyBEcmF3SGVscGVyIHtcclxuXHJcbiAgICBzdGF0aWMgZHJhd0xpbmUob25lOiBWZWN0b3IyRCwgdHdvOiBWZWN0b3IyRCwgdmFsdWU6IFJHQkEsIGJ1ZmZlcjogQnVmZmVyMkQ8UkdCQT4pIHtcclxuXHJcbiAgICAgICAgbGV0IG5vdyA9IG9uZTtcclxuICAgICAgICBsZXQgdG8gPSB0d287XHJcbiAgICAgICAgbGV0IGRpZmYgPSBWZWN0b3IyRC5taW51cyh0bywgbm93KTtcclxuXHJcbiAgICAgICAgbGV0IHN0ZXAgPSAxMDA7XHJcbiAgICAgICAgaWYgKGRpZmYueSA9PSAwKS8vaG9yaXpvblxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBzdGVwOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIC8v5bem55Wr5Yiw5Y+zXHJcbiAgICAgICAgICAgICAgICBub3cueCA9IG5vdy54ICsgMTtcclxuICAgICAgICAgICAgICAgIGlmICghYnVmZmVyLmlzX2xlZ2FsX2luZGV4KG5vdy54LCBub3cueSkpXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG5vdy54ID4gdG8ueClcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBidWZmZXIuc2V0KG5vdy54LCBub3cueSwgdmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChkaWZmLnggPT0gMCkvL3ZlcnRpY2FsXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHN0ZXA7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgLy/kuIrnlavliLDkuItcclxuICAgICAgICAgICAgICAgIG5vdy55ID0gbm93LnkgKyAxO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFidWZmZXIuaXNfbGVnYWxfaW5kZXgobm93LngsIG5vdy55KSlcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAobm93LnkgPiB0by55KVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIGJ1ZmZlci5zZXQobm93LngsIG5vdy55LCB2YWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgbGV0IHJhdGlvID0gZGlmZi54IC8gZGlmZi55O1xyXG4gICAgICAgIGxldCBhYnNfciA9IE1hdGguYWJzKHJhdGlvKTtcclxuXHJcbiAgICAgICAgaWYgKHJhdGlvID4gMCkge1xyXG4gICAgICAgICAgICBpZiAoYWJzX3IgPD0gMSkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBzdGVwOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBub3cueSA9IG5vdy55ICsgMTtcclxuICAgICAgICAgICAgICAgICAgICBub3cueCA9IG5vdy54ICsgYWJzX3I7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGludFggPSBNYXRoLmZsb29yKG5vdy54KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWJ1ZmZlci5pc19sZWdhbF9pbmRleChpbnRYLCBub3cueSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoYnVmZmVyLmlzX292ZXJfcG9zaXRpdmUobm93LngsIG5vdy55LCB0by54LCB0by55KSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlci5zZXQoaW50WCwgbm93LnksIHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChhYnNfciA+IDEpIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgc3RlcDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbm93LnkgPSBub3cueSArIDEgLyBhYnNfcjtcclxuICAgICAgICAgICAgICAgICAgICBub3cueCA9IG5vdy54ICsgMTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgaW50WSA9IE1hdGguZmxvb3Iobm93LnkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghYnVmZmVyLmlzX2xlZ2FsX2luZGV4KG5vdy54LCBpbnRZKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChidWZmZXIuaXNfb3Zlcl9wb3NpdGl2ZShub3cueCwgbm93LnksIHRvLngsIHRvLnkpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyLnNldChub3cueCwgaW50WSwgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHJhdGlvIDwgMCkge1xyXG4gICAgICAgICAgICBpZiAoYWJzX3IgPD0gMSkge1xyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCBzdGVwOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBub3cueSA9IG5vdy55ICsgMTtcclxuICAgICAgICAgICAgICAgICAgICBub3cueCA9IG5vdy54IC0gYWJzX3I7XHJcbiAgICAgICAgICAgICAgICAgICAgbGV0IGludFggPSBNYXRoLmZsb29yKG5vdy54KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWJ1ZmZlci5pc19sZWdhbF9pbmRleChpbnRYLCBub3cueSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoYnVmZmVyLmlzX292ZXJfbmVnYXRpdmUobm93LngsIG5vdy55LCB0by54LCB0by55KSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGJ1ZmZlci5zZXQoaW50WCwgbm93LnksIHZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmIChhYnNfciA+IDEpIHtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgc3RlcDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbm93LnkgPSBub3cueSArIDEgLyBhYnNfcjtcclxuICAgICAgICAgICAgICAgICAgICBub3cueCA9IG5vdy54IC0gMTtcclxuICAgICAgICAgICAgICAgICAgICBsZXQgaW50WSA9IE1hdGguZmxvb3Iobm93LnkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghYnVmZmVyLmlzX2xlZ2FsX2luZGV4KG5vdy54LCBpbnRZKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChidWZmZXIuaXNfb3Zlcl9uZWdhdGl2ZShub3cueCwgbm93LnksIHRvLngsIHRvLnkpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyLnNldChub3cueCwgaW50WSwgdmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZHJhd0NpcmNsZSh2YWx1ZTogUkdCQSwgYnVmZmVyOiBCdWZmZXIyRDxSR0JBPikge1xyXG4gICAgICAgIGxldCBpdCA9IDUwO1xyXG4gICAgICAgIGxldCBkZWx0YSA9IDIgKiBNYXRoLlBJIC8gaXQ7XHJcbiAgICAgICAgbGV0IFIgPSA5O1xyXG4gICAgICAgIGxldCBjZW50ZXIgPSBuZXcgVmVjdG9yMkQoMTAsIDEwKTtcclxuICAgICAgICBsZXQgc3RhcnRUaGVkYSA9IC1NYXRoLlBJIC8gMztcclxuXHJcbiAgICAgICAgLy/nlavlnJNcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGl0OyBpKyspIHtcclxuICAgICAgICAgICAgbGV0IG5vd1ggPSBNYXRoLmZsb29yKGNlbnRlci54ICsgUiAqIE1hdGguY29zKHN0YXJ0VGhlZGEgKyBkZWx0YSAqIGkpKTtcclxuICAgICAgICAgICAgbGV0IG5vd1kgPSBNYXRoLmZsb29yKGNlbnRlci55ICsgUiAqIE1hdGguc2luKHN0YXJ0VGhlZGEgKyBkZWx0YSAqIGkpKTtcclxuXHJcbiAgICAgICAgICAgIGxldCBuZXh0WCA9IE1hdGguZmxvb3IoY2VudGVyLnggKyBSICogTWF0aC5jb3Moc3RhcnRUaGVkYSArIGRlbHRhICogKGkgKyAxKSkpO1xyXG4gICAgICAgICAgICBsZXQgbmV4dFkgPSBNYXRoLmZsb29yKGNlbnRlci55ICsgUiAqIE1hdGguc2luKHN0YXJ0VGhlZGEgKyBkZWx0YSAqIChpICsgMSkpKTtcclxuXHJcbiAgICAgICAgICAgIERyYXdIZWxwZXIuZHJhd0xpbmVXcmFwcGVyKG5ldyBWZWN0b3IyRChub3dYLCBub3dZKSwgbmV3IFZlY3RvcjJEKG5leHRYLCBuZXh0WSksIHZhbHVlLCBidWZmZXIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcblxyXG4gICAgc3RhdGljIGRyYXdTdGFyKHZhbHVlOiBSR0JBLCBidWZmZXI6IEJ1ZmZlcjJEPFJHQkE+KSB7XHJcbiAgICAgICAgbGV0IGl0ID0gNTtcclxuICAgICAgICBsZXQgZGVsdGEgPSAyICogTWF0aC5QSSAvIGl0O1xyXG4gICAgICAgIGxldCBSID0gOTtcclxuICAgICAgICBsZXQgY2VudGVyID0gbmV3IFZlY3RvcjJEKDEwLCAxMCk7XHJcbiAgICAgICAgbGV0IHN0YXJ0VGhlZGEgPSAtTWF0aC5QSSAvIDM7XHJcblxyXG4gICAgICAgIC8v55Wr5pif5pifXHJcbiAgICAgICAgbGV0IGsgPSAwO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXQ7IGkrKykge1xyXG4gICAgICAgICAgICBsZXQgbm93WCA9IE1hdGguZmxvb3IoY2VudGVyLnggKyBSICogTWF0aC5jb3Moc3RhcnRUaGVkYSArIGRlbHRhICogaykpO1xyXG4gICAgICAgICAgICBsZXQgbm93WSA9IE1hdGguZmxvb3IoY2VudGVyLnkgKyBSICogTWF0aC5zaW4oc3RhcnRUaGVkYSArIGRlbHRhICogaykpO1xyXG5cclxuICAgICAgICAgICAgbGV0IG5leHRYID0gTWF0aC5mbG9vcihjZW50ZXIueCArIFIgKiBNYXRoLmNvcyhzdGFydFRoZWRhICsgZGVsdGEgKiAoayArIDIpKSk7XHJcbiAgICAgICAgICAgIGxldCBuZXh0WSA9IE1hdGguZmxvb3IoY2VudGVyLnkgKyBSICogTWF0aC5zaW4oc3RhcnRUaGVkYSArIGRlbHRhICogKGsgKyAyKSkpO1xyXG5cclxuICAgICAgICAgICAgRHJhd0hlbHBlci5kcmF3TGluZVdyYXBwZXIobmV3IFZlY3RvcjJEKG5vd1gsIG5vd1kpLCBuZXcgVmVjdG9yMkQobmV4dFgsIG5leHRZKSwgdmFsdWUsIGJ1ZmZlcik7XHJcbiAgICAgICAgICAgIGsgPSBrICsgMjtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGRyYXdMaW5lV3JhcHBlcih0MDogVmVjdG9yMkQsIHQxOiBWZWN0b3IyRCwgdmFsdWU6IFJHQkEsIGJ1ZmZlcjogQnVmZmVyMkQ8UkdCQT4pIHtcclxuICAgICAgICAvL+W+nuS4iuW+gOS4i+eVq1xyXG4gICAgICAgIGlmICh0MC55IDwgdDEueSlcclxuICAgICAgICAgICAgRHJhd0hlbHBlci5kcmF3TGluZSh0MCwgdDEsIHZhbHVlLCBidWZmZXIpO1xyXG4gICAgICAgIGVsc2UgaWYgKHQxLnkgPCB0MC55KVxyXG4gICAgICAgICAgICBEcmF3SGVscGVyLmRyYXdMaW5lKHQxLCB0MCwgdmFsdWUsIGJ1ZmZlcik7XHJcbiAgICAgICAgZWxzZSAvL+awtOW5s+e3mlxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy/lvp7lt6blvoDlj7PnlatcclxuICAgICAgICAgICAgaWYgKHQwLnggPCB0MS54KVxyXG4gICAgICAgICAgICAgICAgRHJhd0hlbHBlci5kcmF3TGluZSh0MCwgdDEsIHZhbHVlLCBidWZmZXIpO1xyXG4gICAgICAgICAgICBlbHNlIGlmICh0MS54IDwgdDAueClcclxuICAgICAgICAgICAgICAgIERyYXdIZWxwZXIuZHJhd0xpbmUodDEsIHQwLCB2YWx1ZSwgYnVmZmVyKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgVmVjdG9yIGZyb20gXCIuL1ZlY3RvclwiO1xyXG5pbXBvcnQgeyBsZXJwIH0gZnJvbSBcIi4vVG9vbFwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUkdCQSB7XHJcbiAgICBzdGF0aWMgZGVidWcgPSBuZXcgUkdCQSgxLCAwLCAxLCAxKTtcclxuICAgIHN0YXRpYyBnb2xkZW4gPSBuZXcgUkdCQSgxLCAyMTUgLyAyNTUsIDAsIDEpO1xyXG4gICAgc3RhdGljIHllbGxvdyA9IG5ldyBSR0JBKDEsIDEsIDAsIDEpO1xyXG4gICAgc3RhdGljIHBpbmsgPSBuZXcgUkdCQSgxLCAxOTIgLyAyNTUsIDIwMyAvIDI1NSwgMSk7XHJcbiAgICBzdGF0aWMgYmxhY2sgPSBuZXcgUkdCQSgwLCAwLCAwLCAxKTtcclxuICAgIHN0YXRpYyByZWQgPSBuZXcgUkdCQSgxLCAwLCAwLCAxKTtcclxuXHJcbiAgICByOiBudW1iZXI7XHJcbiAgICBnOiBudW1iZXI7XHJcbiAgICBiOiBudW1iZXI7XHJcbiAgICBhOiBudW1iZXI7XHJcbiAgICBjb25zdHJ1Y3RvcihyOiBudW1iZXIsIGc6IG51bWJlciwgYjogbnVtYmVyLCBhOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLnIgPSByO1xyXG4gICAgICAgIHRoaXMuZyA9IGc7XHJcbiAgICAgICAgdGhpcy5iID0gYjtcclxuICAgICAgICB0aGlzLmEgPSBhO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBsZXJwKEE6IFJHQkEsIEI6IFJHQkEsIGs6IG51bWJlcikge1xyXG4gICAgICAgIHJldHVybiBuZXcgUkdCQShcclxuICAgICAgICAgICAgbGVycChBLnIsIEIuciwgayksXHJcbiAgICAgICAgICAgIGxlcnAoQS5nLCBCLmcsIGspLFxyXG4gICAgICAgICAgICBsZXJwKEEuYiwgQi5iLCBrKSxcclxuICAgICAgICAgICAgMSk7XHJcbiAgICB9XHJcblxyXG4gICAgYWRkID0gZnVuY3Rpb24gKEE6IFJHQkEpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFJHQkEodGhpcy5yICsgQS5yLCB0aGlzLmcgKyBBLmcsIHRoaXMuYiArIEEuYiwgMSk7XHJcbiAgICB9XHJcblxyXG5cclxuICAgIG11bHRpcGx5KHM6IG51bWJlcikge1xyXG4gICAgICAgIHJldHVybiBuZXcgUkdCQSh0aGlzLnIgKiBzLCB0aGlzLmcgKiBzLCB0aGlzLmIgKiBzLCAxKTtcclxuICAgIH1cclxuXHJcbiAgICB0b1N0cmluZygpIHtcclxuICAgICAgICByZXR1cm4gXCIoIFwiICsgdGhpcy5yICsgXCIgLCBcIiArIHRoaXMuZyArIFwiICwgXCIgKyB0aGlzLmIgKyBcIiApXCI7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgUkdCQSBmcm9tIFwiLi9SR0JBXCI7XHJcbmltcG9ydCBWZWN0b3IyRCBmcm9tIFwiLi9WZWN0b3IyRFwiO1xyXG5pbXBvcnQgeyBjbGFtcCB9IGZyb20gXCIuL1Rvb2xcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJ1ZmZlcjJEPFQ+IHtcclxuICAgIHc6IG51bWJlcjtcclxuICAgIGg6IG51bWJlcjtcclxuICAgIGJ1ZmZlcjogQXJyYXk8QXJyYXk8VD4+O1xyXG4gICAgY29uc3RydWN0b3IodzogbnVtYmVyLCBoOiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLncgPSB3O1xyXG4gICAgICAgIHRoaXMuaCA9IGg7XHJcbiAgICAgICAgdGhpcy5idWZmZXIgPSBuZXcgQXJyYXk8QXJyYXk8VD4+KHRoaXMuaCk7XHJcbiAgICAgICAgY29uc29sZS5sb2codywgaCk7XHJcbiAgICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCB0aGlzLmg7ICsreSkge1xyXG4gICAgICAgICAgICB0aGlzLmJ1ZmZlclt5XSA9IG5ldyBBcnJheTxUPih0aGlzLncpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzZXQoeDogbnVtYmVyLCB5OiBudW1iZXIsIHZhbHVlOiBUKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaXNfbGVnYWxfaW5kZXgoeCwgeSkpXHJcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyW3ldW3hdID0gdmFsdWU7XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzZXQnLCB0aGlzLncsIHRoaXMuaCwgeCwgeSk7XHJcbiAgICAgICAgICAgIHJldHVybiBSR0JBLmRlYnVnO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBnZXQoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5pc19sZWdhbF9pbmRleCh4LCB5KSlcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyW3ldW3hdO1xyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnZ2V0JywgdGhpcy53LCB0aGlzLmgsIHgsIHkpO1xyXG4gICAgICAgICAgICByZXR1cm4gUkdCQS5kZWJ1ZztcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuICAgIGNsZWFyKHZhbHVlOiBUKSB7XHJcbiAgICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCB0aGlzLmg7ICsreSkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHRoaXMudzsgKyt4KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJ1ZmZlclt5XVt4XSA9IHZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIC8vIOi2hemBjumCiueVjOWwseS9v+eUqOmCiueVjOWAvFxyXG4gICAgZ2V0X2NsYW1wX21vZGUoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcclxuICAgICAgICBsZXQgbnggPSBjbGFtcCh4LCAwLCB0aGlzLncgLSAxKTtcclxuICAgICAgICBsZXQgbnkgPSBjbGFtcCh5LCAwLCB0aGlzLmggLSAxKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYnVmZmVyW255XVtueF07XHJcbiAgICB9XHJcblxyXG4gICAgaXNfbGVnYWxfaW5kZXgoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcclxuICAgICAgICBpZiAoeCA+PSAwICYmIHggPCB0aGlzLncgJiYgeSA+PSAwICYmIHkgPCB0aGlzLmgpXHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIGVsc2UgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG5cclxuICAgIGlzX292ZXJfbmVnYXRpdmUoeDogbnVtYmVyLCB5OiBudW1iZXIsIGVuZFg6IG51bWJlciwgZW5kWTogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHkgPiBlbmRZIHx8IHggPCBlbmRYKVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuXHJcbiAgICBpc19vdmVyX3Bvc2l0aXZlKHg6IG51bWJlciwgeTogbnVtYmVyLCBlbmRYOiBudW1iZXIsIGVuZFk6IG51bWJlcikge1xyXG4gICAgICAgIGlmICh5ID4gZW5kWSB8fCB4ID4gZW5kWClcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgUkdCQSBmcm9tIFwiLi9SR0JBXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDYXZuYXNIZWxwZXIge1xyXG4gICAgc3RhdGljIHNldF9jYW52YXMoaWQ6IHN0cmluZywgdzogbnVtYmVyLCBoOiBudW1iZXIpIHtcclxuICAgICAgICBsZXQgY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpIGFzIEhUTUxDYW52YXNFbGVtZW50O1xyXG4gICAgICAgIHJldHVybiBDYXZuYXNIZWxwZXIuc2V0X2NhbnZhc19lbGVtZW50KGNhbnZhcywgdywgaCk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHNldF9jYW52YXNfZWxlbWVudChjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50LCB3OiBudW1iZXIsIGg6IG51bWJlcikge1xyXG4gICAgICAgIGNhbnZhcy5zdHlsZS53aWR0aCA9IHcgKyAncHgnO1xyXG4gICAgICAgIGNhbnZhcy5zdHlsZS5oZWlnaHQgPSBoICsgJ3B4JztcclxuICAgICAgICBjYW52YXMud2lkdGggPSBjYW52YXMuY2xpZW50V2lkdGg7XHJcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IGNhbnZhcy5jbGllbnRIZWlnaHQ7XHJcblxyXG4gICAgICAgIHJldHVybiBjYW52YXM7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGdldF9jb250ZXh0KGlkOiBzdHJpbmcpIHtcclxuICAgICAgICBsZXQgY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWQpIGFzIEhUTUxDYW52YXNFbGVtZW50O1xyXG4gICAgICAgIHJldHVybiBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgZ2V0X2NvbnRleHRfYnlfY2FudmFzKGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQpIHtcclxuICAgICAgICByZXR1cm4gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGNvbnZlcnQoYzogUkdCQSkge1xyXG4gICAgICAgIHJldHVybiAncmdiYSgnICsgTWF0aC5mbG9vcigyNTUgKiAoYy5yKSkgKyAnLCcgKyBNYXRoLmZsb29yKDI1NSAqIChjLmcpKSArICcsJyArIE1hdGguZmxvb3IoMjU1ICogKGMuYikpICsgJywxKSc7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgQnVmZmVyMkQgZnJvbSBcIi4vQnVmZmVyMkRcIjtcclxuaW1wb3J0IFJHQkEgZnJvbSBcIi4vUkdCQVwiO1xyXG5pbXBvcnQgVmVjdG9yMkQgZnJvbSBcIi4vVmVjdG9yMkRcIjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNhbXBsZXIge1xyXG5cclxuICAgIHN0YXRpYyB1dl90b19idWZmZXJfc3BhY2UodXY6IFZlY3RvcjJEKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyRCh1di54LCAxIC0gdXYueSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGJ1ZmZlcl90b191dl9zcGFjZSh1djogVmVjdG9yMkQpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcjJEKHV2LngsIDEgLSB1di55KTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgdGV4dHVyZTJEKHV2OiBWZWN0b3IyRCwgYnVmZmVyOiBCdWZmZXIyRDxSR0JBPikge1xyXG5cclxuICAgICAgICBsZXQgdyA9IGJ1ZmZlci53O1xyXG4gICAgICAgIGxldCBoID0gYnVmZmVyLmg7XHJcblxyXG4gICAgICAgIGxldCBidWZmZXJfdXYgPSBTYW1wbGVyLnV2X3RvX2J1ZmZlcl9zcGFjZSh1dik7XHJcbiAgICAgICAgbGV0IHUgPSBidWZmZXJfdXYueDtcclxuICAgICAgICBsZXQgdiA9IGJ1ZmZlcl91di55O1xyXG5cclxuICAgICAgICAvL+WFiOaJvuWHuuacgOi/kem7nlxyXG4gICAgICAgIGxldCBncmlkX3UgPSAxIC8gdztcclxuICAgICAgICBsZXQgZ3JpZF92ID0gMSAvIGg7XHJcblxyXG4gICAgICAgIGxldCBoYWxmX2dyaWRfdSA9IGdyaWRfdSAqIDAuNTtcclxuICAgICAgICBsZXQgaGFsZl9ncmlkX3YgPSBncmlkX3YgKiAwLjU7XHJcblxyXG4gICAgICAgIC8v5Lul5LiL5piv5pyJNOWAi+mEsOm7nueahOaDheazgS4uXHJcbiAgICAgICAgbGV0IG5lYXJlc3RfcG9pbnRfdV9mbG9hdCA9IHUgLyBncmlkX3U7XHJcbiAgICAgICAgbGV0IG5lYXJlc3RfcG9pbnRfdl9mbG9hdCA9IHYgLyBncmlkX3Y7XHJcblxyXG4gICAgICAgIGxldCBuZWFyZXN0X3BvaW50X3UgPSBNYXRoLmZsb29yKG5lYXJlc3RfcG9pbnRfdV9mbG9hdCk7XHJcbiAgICAgICAgbGV0IG5lYXJlc3RfcG9pbnRfdiA9IE1hdGguZmxvb3IobmVhcmVzdF9wb2ludF92X2Zsb2F0KTtcclxuXHJcbiAgICAgICAgLy9hbGVydChuZWFyZXN0X3BvaW50X3UrXCIsXCIrbmVhcmVzdF9wb2ludF92KTtcclxuXHJcbiAgICAgICAgLy/lnKjjgIzmnIDov5Hpu57jgI3moLzoo6HnmoRsb2NhbCB1dlxyXG4gICAgICAgIGxldCBzX3UgPSB1ICUgZ3JpZF91O1xyXG4gICAgICAgIGxldCBzX3YgPSB2ICUgZ3JpZF92O1xyXG5cclxuICAgICAgICAvL+WGjeaJvuWHuuebuOmEsDPpu55cclxuICAgICAgICBpZiAoc191ID49IGhhbGZfZ3JpZF91ICYmIHNfdiA+PSBoYWxmX2dyaWRfdikvL+ebuOmEsDPpu57lnKjlj7PkuItcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIC8v5Ymb5aW95pW06Zmk5pmC6KaB5YGa5L+u5q2jXHJcbiAgICAgICAgICAgIGlmIChuZWFyZXN0X3BvaW50X3VfZmxvYXQgPT0gbmVhcmVzdF9wb2ludF91KVxyXG4gICAgICAgICAgICAgICAgbmVhcmVzdF9wb2ludF91ID0gbmVhcmVzdF9wb2ludF91IC0gMTtcclxuXHJcbiAgICAgICAgICAgIGlmIChuZWFyZXN0X3BvaW50X3ZfZmxvYXQgPT0gbmVhcmVzdF9wb2ludF92KVxyXG4gICAgICAgICAgICAgICAgbmVhcmVzdF9wb2ludF92ID0gbmVhcmVzdF9wb2ludF92IC0gMTtcclxuICAgICAgICAgICAgbGV0IFAgPSBuZXcgVmVjdG9yMkQobmVhcmVzdF9wb2ludF91LCBuZWFyZXN0X3BvaW50X3YpO1xyXG5cclxuICAgICAgICAgICAgLy8g5Y+z5LiLXHJcbiAgICAgICAgICAgIGxldCBORSA9IG5ldyBWZWN0b3IyRChQLnggKyAxLCBQLnkpO1xyXG4gICAgICAgICAgICBsZXQgU1cgPSBuZXcgVmVjdG9yMkQoUC54LCBQLnkgKyAxKTtcclxuICAgICAgICAgICAgbGV0IFNFID0gbmV3IFZlY3RvcjJEKFAueCArIDEsIFAueSArIDEpO1xyXG4gICAgICAgICAgICAvL+WcqDTpu57lhafnmoR1dlxyXG4gICAgICAgICAgICBsZXQgcmVjdFVWID0gbmV3IFZlY3RvcjJEKChzX3UgLSBoYWxmX2dyaWRfdSkgLyBncmlkX3UsIChzX3YgLSBoYWxmX2dyaWRfdikgLyBncmlkX3YpO1xyXG4gICAgICAgICAgICByZXR1cm4geyByZWN0VVYsIE5XOiBQLCBORSwgU1csIFNFLCBjb2xvcjogU2FtcGxlci5CaWxpbmVhcl9TYW1wbGVyKHJlY3RVViwgUCwgTkUsIFNXLCBTRSwgYnVmZmVyKSB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChzX3UgPD0gaGFsZl9ncmlkX3UgJiYgc192ID49IGhhbGZfZ3JpZF92KS8v55u46YSwM+m7nuWcqOW3puS4i1xyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgLy/liZvlpb3mlbTpmaTmmYLopoHlgZrkv67mraNcclxuICAgICAgICAgICAgaWYgKG5lYXJlc3RfcG9pbnRfdl9mbG9hdCA9PSBuZWFyZXN0X3BvaW50X3YpXHJcbiAgICAgICAgICAgICAgICBuZWFyZXN0X3BvaW50X3YgPSBuZWFyZXN0X3BvaW50X3YgLSAxO1xyXG4gICAgICAgICAgICBsZXQgUCA9IG5ldyBWZWN0b3IyRChuZWFyZXN0X3BvaW50X3UsIG5lYXJlc3RfcG9pbnRfdik7XHJcblxyXG4gICAgICAgICAgICAvLyDlt6bkuItcclxuICAgICAgICAgICAgbGV0IE5XID0gbmV3IFZlY3RvcjJEKFAueCAtIDEsIFAueSk7XHJcbiAgICAgICAgICAgIGxldCBTVyA9IG5ldyBWZWN0b3IyRChQLnggLSAxLCBQLnkgKyAxKTtcclxuICAgICAgICAgICAgbGV0IFNFID0gbmV3IFZlY3RvcjJEKFAueCwgUC55ICsgMSk7XHJcbiAgICAgICAgICAgIC8v5ZyoNOm7nuWFp+eahHV2XHJcbiAgICAgICAgICAgIGxldCByZWN0VVYgPSBuZXcgVmVjdG9yMkQoKHNfdSArIGhhbGZfZ3JpZF91KSAvIGdyaWRfdSwgKHNfdiAtIGhhbGZfZ3JpZF92KSAvIGdyaWRfdik7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHJlY3RVViwgTlcsIE5FOiBQLCBTVywgU0UsIGNvbG9yOiBTYW1wbGVyLkJpbGluZWFyX1NhbXBsZXIocmVjdFVWLCBOVywgUCwgU1csIFNFLCBidWZmZXIpIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHNfdSA8PSBoYWxmX2dyaWRfdSAmJiBzX3YgPD0gaGFsZl9ncmlkX3YpLy/nm7jphLAz6bue5Zyo5bem5LiKXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBsZXQgUCA9IG5ldyBWZWN0b3IyRChuZWFyZXN0X3BvaW50X3UsIG5lYXJlc3RfcG9pbnRfdik7XHJcblxyXG4gICAgICAgICAgICAvLyDlt6bkuIpcclxuICAgICAgICAgICAgbGV0IE5XID0gbmV3IFZlY3RvcjJEKFAueCAtIDEsIFAueSAtIDEpO1xyXG4gICAgICAgICAgICBsZXQgTkUgPSBuZXcgVmVjdG9yMkQoUC54LCBQLnkgLSAxKTtcclxuICAgICAgICAgICAgbGV0IFNXID0gbmV3IFZlY3RvcjJEKFAueCAtIDEsIFAueSk7XHJcbiAgICAgICAgICAgIC8v5ZyoNOm7nuWFp+eahHV2XHJcbiAgICAgICAgICAgIGxldCByZWN0VVYgPSBuZXcgVmVjdG9yMkQoKHNfdSArIGhhbGZfZ3JpZF91KSAvIGdyaWRfdSwgKHNfdiArIGhhbGZfZ3JpZF92KSAvIGdyaWRfdik7XHJcbiAgICAgICAgICAgIHJldHVybiB7IHJlY3RVViwgTlcsIE5FLCBTVywgU0U6IFAsIGNvbG9yOiBTYW1wbGVyLkJpbGluZWFyX1NhbXBsZXIocmVjdFVWLCBOVywgTkUsIFNXLCBQLCBidWZmZXIpIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKHNfdSA+PSBoYWxmX2dyaWRfdSAmJiBzX3YgPD0gaGFsZl9ncmlkX3YpLy/nm7jphLAz6bue5Zyo5Y+z5LiKXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAvL+WJm+WlveaVtOmZpOaZguimgeWBmuS/ruato1xyXG4gICAgICAgICAgICBpZiAobmVhcmVzdF9wb2ludF91X2Zsb2F0ID09IG5lYXJlc3RfcG9pbnRfdSlcclxuICAgICAgICAgICAgICAgIG5lYXJlc3RfcG9pbnRfdSA9IG5lYXJlc3RfcG9pbnRfdSAtIDE7XHJcbiAgICAgICAgICAgIGxldCBQID0gbmV3IFZlY3RvcjJEKG5lYXJlc3RfcG9pbnRfdSwgbmVhcmVzdF9wb2ludF92KTtcclxuXHJcbiAgICAgICAgICAgIC8vIOWPs+S4ilxyXG4gICAgICAgICAgICBsZXQgTlcgPSBuZXcgVmVjdG9yMkQoUC54LCBQLnkgLSAxKTtcclxuICAgICAgICAgICAgbGV0IE5FID0gbmV3IFZlY3RvcjJEKFAueCArIDEsIFAueSAtIDEpO1xyXG4gICAgICAgICAgICBsZXQgU0UgPSBuZXcgVmVjdG9yMkQoUC54ICsgMSwgUC55KTtcclxuICAgICAgICAgICAgLy/lnKg06bue5YWn55qEdXZcclxuICAgICAgICAgICAgbGV0IHJlY3RVViA9IG5ldyBWZWN0b3IyRCgoc191IC0gaGFsZl9ncmlkX3UpIC8gZ3JpZF91LCAoc192ICsgaGFsZl9ncmlkX3YpIC8gZ3JpZF92KTtcclxuICAgICAgICAgICAgcmV0dXJuIHsgcmVjdFVWLCBOVywgTkUsIFNXOiBQLCBTRSwgY29sb3I6IFNhbXBsZXIuQmlsaW5lYXJfU2FtcGxlcihyZWN0VVYsIE5XLCBORSwgUCwgU0UsIGJ1ZmZlcikgfTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIEJpbGluZWFyX1NhbXBsZXIocmVjdFVWOiBWZWN0b3IyRCwgTlc6IFZlY3RvcjJELCBORTogVmVjdG9yMkQsIFNXOiBWZWN0b3IyRCwgU0U6IFZlY3RvcjJELCBidWZmZXI6IEJ1ZmZlcjJEPFJHQkE+KSB7XHJcblxyXG4gICAgICAgIC8v5bCNNOWAi+m7numhj+iJsuS9nOWFp+aPklxyXG4gICAgICAgIGxldCBOV2MgPSBidWZmZXIuZ2V0X2NsYW1wX21vZGUoTlcueCwgTlcueSk7XHJcbiAgICAgICAgbGV0IE5FYyA9IGJ1ZmZlci5nZXRfY2xhbXBfbW9kZShORS54LCBORS55KTtcclxuICAgICAgICBsZXQgU1djID0gYnVmZmVyLmdldF9jbGFtcF9tb2RlKFNXLngsIFNXLnkpO1xyXG4gICAgICAgIGxldCBTRWMgPSBidWZmZXIuZ2V0X2NsYW1wX21vZGUoU0UueCwgU0UueSk7XHJcblxyXG4gICAgICAgIGxldCBuUkdCID0gUkdCQS5sZXJwKE5XYywgTkVjLCByZWN0VVYueCk7XHJcbiAgICAgICAgbGV0IHNSR0IgPSBSR0JBLmxlcnAoU1djLCBTRWMsIHJlY3RVVi54KTtcclxuICAgICAgICBsZXQgbWlkZGxlUkdCID0gUkdCQS5sZXJwKG5SR0IsIHNSR0IsIHJlY3RVVi55KTtcclxuICAgICAgICByZXR1cm4gbWlkZGxlUkdCO1xyXG4gICAgfVxyXG59IiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgSEhlbHBlciB7XHJcbiAgICBzdGF0aWMgJChpZDogc3RyaW5nKSB7XHJcbiAgICAgICAgcmV0dXJuIDxIVE1MSW5wdXRFbGVtZW50PmRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGlkKTtcclxuICAgIH1cclxufSIsImltcG9ydCBCdWZmZXIyRCBmcm9tIFwiLi9NYXRoL0J1ZmZlcjJEXCI7XHJcbmltcG9ydCBDYXZuYXNIZWxwZXIgZnJvbSBcIi4vTWF0aC9DYW52YXNIZWxwZXJcIjtcclxuaW1wb3J0IFJHQkEgZnJvbSBcIi4vTWF0aC9SR0JBXCI7XHJcbmltcG9ydCBTYW1wbGVyIGZyb20gXCIuL01hdGgvU2FtcGxlclwiO1xyXG5pbXBvcnQgVmVjdG9yMkQgZnJvbSBcIi4vTWF0aC9WZWN0b3IyRFwiO1xyXG5pbXBvcnQgeyBNYXRoSGVscGVyLCBEcmF3SGVscGVyIH0gZnJvbSBcIi4vTWF0aC9Ub29sXCI7XHJcbmltcG9ydCBISGVscGVyIGZyb20gXCIuL01hdGgvSEhlbHBlclwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGVzdFRleHR1cmVBcHAge1xyXG5cclxuICAgIGNhbnZhc193aWR0aCA9IDYwMDtcclxuICAgIGNhbnZhc19oZWlnaHQgPSA2MDA7XHJcblxyXG4gICAgcm93X2NvdW50ID0gMjA7XHJcbiAgICBjb2x1bWVfY291bnQgPSAyMDtcclxuXHJcbiAgICByZWN0X3c6IG51bWJlcjtcclxuICAgIHJlY3RfaDogbnVtYmVyO1xyXG5cclxuXHJcbiAgICBidWZmZXI6IEJ1ZmZlcjJEPFJHQkE+O1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHdpbmRvdy5vbmxvYWQgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuaW5pdCgpO1xyXG5cclxuICAgICAgICAgICAgSEhlbHBlci4kKCdidG5fcmVzZXQnKS5vbmNsaWNrID0gKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5SZW5kZXIoKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIEhIZWxwZXIuJCgnbW92ZV9yaWdodCcpLm9uY2xpY2sgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1vdmVSaWdodCgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5SZW5kZXIoKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIEhIZWxwZXIuJCgnbW92ZV91cCcpLm9uY2xpY2sgPSAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1vdmVVcCgpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5SZW5kZXIoKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIEhIZWxwZXIuJCgnY2FudmFzJykub25jbGljayA9IChldmVudCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5yZUJ1bGlkKG5ldyBWZWN0b3IyRChldmVudC5vZmZzZXRYLCBldmVudC5vZmZzZXRZKSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICB0ZXh0dXJlMkQodXY6IFZlY3RvcjJEKSB7XHJcbiAgICAgICAgbGV0IHsgcmVjdFVWLCBOVywgTkUsIFNXLCBTRSwgY29sb3IgfSA9IFNhbXBsZXIudGV4dHVyZTJEKHV2LCB0aGlzLmJ1ZmZlcik7XHJcblxyXG4gICAgICAgIC8v55WrNOWAi+mEsOi/kem7nlxyXG4gICAgICAgIHRoaXMuZHJhd1BvaW50QnlHcmlkSW5kZXgoTlcpO1xyXG4gICAgICAgIHRoaXMuZHJhd1BvaW50QnlHcmlkSW5kZXgoTkUpO1xyXG4gICAgICAgIHRoaXMuZHJhd1BvaW50QnlHcmlkSW5kZXgoU1cpO1xyXG4gICAgICAgIHRoaXMuZHJhd1BvaW50QnlHcmlkSW5kZXgoU0UpO1xyXG4gICAgICAgIHRoaXMuZHJhd1JlY3QoTlcpO1xyXG4gICAgICAgIHRoaXMuZHJhd1BvaW50QnlSZWN0VVYoTlcsIHJlY3RVVik7XHJcblxyXG4gICAgICAgIC8vIOmhr+ekuuacgOW+jOeahOe1kOaenFxyXG4gICAgICAgIGxldCBjdHggPSBDYXZuYXNIZWxwZXIuZ2V0X2NvbnRleHQoJ2NhbnZhczInKTtcclxuICAgICAgICBjdHguZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gJ3NvdXJjZS1vdmVyJztcclxuICAgICAgICBjdHguZmlsbFN0eWxlID0gQ2F2bmFzSGVscGVyLmNvbnZlcnQoY29sb3IpO1xyXG4gICAgICAgIGN0eC5maWxsUmVjdCgwLCAwLCAzMCwgMzApO1xyXG4gICAgfVxyXG5cclxuICAgIGRyYXdVVigpIHtcclxuICAgICAgICBsZXQgdSA9IHBhcnNlRmxvYXQoSEhlbHBlci4kKFwidVwiKS52YWx1ZSk7XHJcbiAgICAgICAgbGV0IHYgPSBwYXJzZUZsb2F0KEhIZWxwZXIuJChcInZcIikudmFsdWUpO1xyXG4gICAgICAgIHRoaXMudGV4dHVyZTJEKG5ldyBWZWN0b3IyRCh1LCB2KSk7XHJcbiAgICB9XHJcblxyXG4gICAgbW92ZVJpZ2h0KCkge1xyXG4gICAgICAgIGxldCB1ID0gcGFyc2VGbG9hdChISGVscGVyLiQoXCJ1XCIpLnZhbHVlKTtcclxuXHJcbiAgICAgICAgbGV0IGdyaWRfdSA9IDEgLyB0aGlzLmNvbHVtZV9jb3VudDtcclxuICAgICAgICB1ID0gTWF0aEhlbHBlci5hY2NBZGQodSwgZ3JpZF91KTtcclxuXHJcbiAgICAgICAgSEhlbHBlci4kKFwidVwiKS52YWx1ZSA9IHUudG9TdHJpbmcoKTtcclxuICAgIH1cclxuXHJcbiAgICBtb3ZlVXAoKSB7XHJcbiAgICAgICAgbGV0IHYgPSBwYXJzZUZsb2F0KEhIZWxwZXIuJChcInZcIikudmFsdWUpO1xyXG5cclxuICAgICAgICBsZXQgZ3JpZF92ID0gMSAvIHRoaXMucm93X2NvdW50O1xyXG4gICAgICAgIHYgPSBNYXRoSGVscGVyLmFjY0FkZCh2LCBncmlkX3YpO1xyXG5cclxuICAgICAgICBISGVscGVyLiQoXCJ2XCIpLnZhbHVlID0gdi50b1N0cmluZygpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlQnVsaWQoUDogVmVjdG9yMkQpIHtcclxuICAgICAgICBsZXQgdSA9IFAueCAvIHRoaXMuY2FudmFzX3dpZHRoO1xyXG4gICAgICAgIGxldCB2ID0gUC55IC8gdGhpcy5jYW52YXNfaGVpZ2h0O1xyXG4gICAgICAgIGxldCBidWZmZXJfdXYgPSBuZXcgVmVjdG9yMkQodSwgdik7XHJcbiAgICAgICAgbGV0IHV2ID0gU2FtcGxlci5idWZmZXJfdG9fdXZfc3BhY2UoYnVmZmVyX3V2KTtcclxuXHJcbiAgICAgICAgSEhlbHBlci4kKFwidVwiKS52YWx1ZSA9IHV2LngudG9TdHJpbmcoKTtcclxuICAgICAgICBISGVscGVyLiQoXCJ2XCIpLnZhbHVlID0gdXYueS50b1N0cmluZygpO1xyXG5cclxuICAgICAgICB0aGlzLlJlbmRlcigpO1xyXG4gICAgfVxyXG5cclxuICAgIHJlc2V0KCkge1xyXG4gICAgICAgIHRoaXMucmVjdF93ID0gdGhpcy5jYW52YXNfd2lkdGggLyB0aGlzLmNvbHVtZV9jb3VudDtcclxuICAgICAgICB0aGlzLnJlY3RfaCA9IHRoaXMuY2FudmFzX2hlaWdodCAvIHRoaXMucm93X2NvdW50O1xyXG5cclxuICAgICAgICBpZiAodGhpcy5idWZmZXIgPT0gbnVsbCkge1xyXG4gICAgICAgICAgICB0aGlzLmJ1ZmZlciA9IG5ldyBCdWZmZXIyRCh0aGlzLmNvbHVtZV9jb3VudCwgdGhpcy5yb3dfY291bnQpO1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnaW5pdCBidWZmZXInKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgdGhpcy5jb2x1bWVfY291bnQ7IHgrKylcclxuICAgICAgICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCB0aGlzLnJvd19jb3VudDsgeSsrKVxyXG4gICAgICAgICAgICAgICAgdGhpcy5idWZmZXIuc2V0KHgsIHksIG5ldyBSR0JBKDAsIDAsIDAsIDEpKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgaW5pdCgpIHtcclxuICAgICAgICB0aGlzLnJlc2V0KCk7XHJcbiAgICAgICAgRHJhd0hlbHBlci5kcmF3U3RhcihSR0JBLmdvbGRlbiwgdGhpcy5idWZmZXIpO1xyXG4gICAgICAgIHRoaXMuUmVuZGVyKCk7XHJcbiAgICB9XHJcblxyXG4gICAgUmVuZGVyKCkge1xyXG4gICAgICAgIHRoaXMuZHJhd0J1ZmZlcigpO1xyXG4gICAgICAgIHRoaXMuZHJhd1VWKCk7XHJcbiAgICB9XHJcblxyXG4gICAgZHJhd0J1ZmZlcigpIHtcclxuICAgICAgICBsZXQgY3R4ID0gQ2F2bmFzSGVscGVyLmdldF9jb250ZXh0KCdjYW52YXMnKTtcclxuICAgICAgICBjdHguY2xlYXJSZWN0KDAsIDAsIDYwMCwgNjAwKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCB0aGlzLnJvd19jb3VudDsgeSsrKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgdGhpcy5jb2x1bWVfY291bnQ7IHgrKykge1xyXG4gICAgICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IENhdm5hc0hlbHBlci5jb252ZXJ0KHRoaXMuYnVmZmVyLmdldCh4LCB5KSk7XHJcbiAgICAgICAgICAgICAgICBsZXQgciA9IDE7XHJcbiAgICAgICAgICAgICAgICBjdHguZmlsbFJlY3QoeCAqIHRoaXMucmVjdF93ICsgciwgeSAqIHRoaXMucmVjdF9oICsgciwgdGhpcy5yZWN0X3cgLSByLCB0aGlzLnJlY3RfaCAtIHIpO1xyXG4gICAgICAgICAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcblxyXG5cclxuICAgIGRyYXdQb2ludEJ5R3JpZEluZGV4KFA6IFZlY3RvcjJEKSB7XHJcblxyXG4gICAgICAgIGxldCBjdHggPSBDYXZuYXNIZWxwZXIuZ2V0X2NvbnRleHQoJ2NhbnZhcycpO1xyXG4gICAgICAgIGN0eC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSAnc291cmNlLW92ZXInO1xyXG5cclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9ICdyZ2JhKDI1NSwyNTUsMCwxKSc7XHJcbiAgICAgICAgbGV0IHIgPSA2O1xyXG4gICAgICAgIGN0eC5maWxsUmVjdCgoUC54ICsgMC41KSAqIHRoaXMucmVjdF93IC0gMC41ICogciwgKFAueSArIDAuNSkgKiB0aGlzLnJlY3RfaCAtIDAuNSAqIHIsIHIsIHIpO1xyXG4gICAgICAgIGN0eC5zdHJva2UoKTtcclxuICAgIH1cclxuXHJcbiAgICBkcmF3UmVjdChQOiBWZWN0b3IyRCkge1xyXG4gICAgICAgIGxldCBjdHggPSBDYXZuYXNIZWxwZXIuZ2V0X2NvbnRleHQoJ2NhbnZhcycpO1xyXG4gICAgICAgIGN0eC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSAnc291cmNlLW92ZXInO1xyXG5cclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gJ3JnYmEoMjU1LDI1NSwwLDEpJztcclxuICAgICAgICBjdHgucmVjdCgoUC54ICsgMC41KSAqIHRoaXMucmVjdF93LCAoUC55ICsgMC41KSAqIHRoaXMucmVjdF9oLCB0aGlzLnJlY3RfdywgdGhpcy5yZWN0X2gpO1xyXG4gICAgICAgIGN0eC5zdHJva2UoKTtcclxuICAgIH1cclxuXHJcbiAgICAvL+eVq+WHunV26bueXHJcbiAgICBkcmF3UG9pbnRCeVJlY3RVVihQOiBWZWN0b3IyRCwgcmVjdFVWOiBWZWN0b3IyRCkge1xyXG4gICAgICAgIGxldCBjdHggPSBDYXZuYXNIZWxwZXIuZ2V0X2NvbnRleHQoJ2NhbnZhcycpO1xyXG4gICAgICAgIGN0eC5nbG9iYWxDb21wb3NpdGVPcGVyYXRpb24gPSAnc291cmNlLW92ZXInO1xyXG5cclxuICAgICAgICBjdHguYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9ICdyZ2JhKDAsMjU1LDAsMSknO1xyXG5cclxuICAgICAgICBsZXQgdGFyZ2V0UCA9IG5ldyBWZWN0b3IyRCgoUC54ICsgMC41KSAqIHRoaXMucmVjdF93ICsgdGhpcy5yZWN0X3cgKiByZWN0VVYueCwgKFAueSArIDAuNSkgKiB0aGlzLnJlY3RfaCArIHRoaXMucmVjdF9oICogcmVjdFVWLnkpO1xyXG4gICAgICAgIGxldCByID0gNjtcclxuICAgICAgICBjdHguZmlsbFJlY3QodGFyZ2V0UC54IC0gMC41ICogciwgdGFyZ2V0UC55IC0gMC41ICogciwgciwgcik7XHJcbiAgICAgICAgY3R4LnN0cm9rZSgpO1xyXG4gICAgfVxyXG59XHJcblxyXG5uZXcgVGVzdFRleHR1cmVBcHAoKTsiXSwibmFtZXMiOlsiZnJvbSIsImRpciIsInRoaXMiLCJweCIsInB5IiwicHoiLCJ4IiwieSIsInoiLCJtaW5fbWF4IiwidjAiLCJ2MSIsInYyIiwibWluIiwiVmVjdG9yIiwiTWF0aCIsIm1heCIsImNhbGN1bGF0ZV9ub3JtYWwiLCJ2MDEiLCJtaW51cyIsInYwMiIsImNyb3NzIiwibm9ybWFsaXplIiwiY2FsY3VsYXRlX2NlbnRlciIsImFkZCIsIm11bHRpcGx5IiwidXYiLCJ1IiwidiIsInJlZmxlY3QiLCJJIiwiTiIsIkwiLCJkb3QiLCJBIiwiQiIsInMiLCJtdWx0aXBseTMiLCJlcXVhbCIsIm51bWJlcl9lcXVhbCIsImxlcnAiLCJ0IiwiY2xhbXBfeCIsImNsYW1wIiwiY2xhbXBfeSIsImxlbmd0aCIsInNxcnQiLCJ0ZW1wIiwibmVnYXRpdmUiLCJWZWN0b3IyRCIsImNsb25lIiwidXAiLCJ6ZXJvIiwicCIsInciLCJ0byIsInRfd2hlbl94X2VxdWFsX3ciLCJ0X3doZW5feV9lcXVhbF93IiwidF93aGVuX3pfZXF1YWxfdyIsInRfd2hlbl94X2VxdWFsX21pbnVzX3ciLCJ0X3doZW5feV9lcXVhbF9taW51c193IiwidF93aGVuX3pfZXF1YWxfemVyb193IiwicG9pbnQiLCJub3JtYWwiLCJDIiwiaXNfcG9zaXRpdmUiLCJ0ZXN0X3AiLCJkaWZmIiwiaGl0IiwicmF5IiwicmVzdWx0IiwiUGxhbmUiLCJpc19oaXQiLCJwbGFuZSIsImhpdF9wb3MiLCJpIiwieEF4aXMiLCJ5QXhpcyIsInpBeGlzIiwicG9zaXRpb24iLCJ0cmFuc2Zvcm1Qb2ludCIsInRyYW5zZm9ybSIsInZlY3RvclgiLCJ2ZWN0b3JZIiwidmVjdG9yWiIsInRyYW5zZm9ybVZlY3RvciIsInZlcnRleCIsInRyYW5zZm9ybVRyYW5zZm9ybSIsImlucHV0VHJhbnNmb3JtIiwiVHJhbnNmb3JtIiwicm90YXRlQnlaIiwiZGVncmVlIiwicmFkaWFuIiwiZGVncmVlX3RvX1JhZCIsImMiLCJjb3MiLCJzaW4iLCJyb3RhdGVCeVkiLCJyb3RhdGVCeVgiLCJvZmZzZXQiLCJ0b1N0cmluZyIsInBsdXMiLCJjbGVhciIsImNvbG9yIiwiUmFzdGVyaXplciIsImNvbG9yX2J1ZmZlciIsInpfYnVmZmVyIiwic2hvdyIsInJlbmRlcl90YXJnZXQiLCJzZXRfcGl4ZWwiLCJnZXQiLCJzaG93X2J1ZmZlciIsImNsaXBfaGVscGVyIiwiaW5fbGlzdCIsInYwX291dCIsInYxX291dCIsInYyX291dCIsIm91dF9saXN0IiwiY2xpcCIsInB1c2giLCJjbGlwX2luX1Byb2plY3Rpb25fU3BhY2UiLCJwY2FtZXJhIiwiVCIsIkNsaXBQbGFuZSIsIkZhciIsIk5lYXIiLCJSaWdodCIsIkxlZnQiLCJUb3AiLCJCb3R0b20iLCJNVlBfYmFja2ZhY2VfY3VsbGluZ19jbGlwcGluZyIsInRyaWFuZ2xlIiwid29ybGRUcmFuc2Zvcm0iLCJ2MF93IiwidjFfdyIsInYyX3ciLCJ2MF9jIiwidG9DYW1lcmFTcGFjZSIsInYxX2MiLCJ2Ml9jIiwidjBfcCIsInRvUHJvamVjdGlvblNwYWNlIiwidjFfcCIsInYyX3AiLCJjZW50ZXJfdG9fZXllIiwidXBkYXRlX3AiLCJ1cGRhdGVfdyIsInByb2Nlc3MiLCJ0ZXh0dXJlIiwidXNlX3NvbGlkX2NvbG9yIiwibmRjX2NsYW1wX2VmZmVjdCIsImxpc3QiLCJuMCIsInRvTkRDIiwibjEiLCJuMiIsInMwIiwidG9TY3JlZW5TcGFjZSIsInMxIiwiczIiLCJtaW5feCIsImZsb29yIiwibWF4X3giLCJtaW5feSIsIm1heF95IiwiaCIsIlAiLCJzdWNjZXNzIiwic2V0IiwicHYwIiwicHYxIiwicHYyIiwiZGlyMDEiLCJkaXIwMiIsIm4iLCJwX29uX2RpcjAxIiwiaXNOYU4iLCJjb25zb2xlIiwibG9nIiwiaXNfaW5fdHJpYW5nbGUiLCJpbnRlcnBvbGF0aW9uIiwicmFzdGVyaXplIiwidl9zIiwiZHJhdyIsImN0eCIsInRDb3VudCIsImluZGV4IiwibW92ZVRvIiwibGluZVRvIiwiYnVpbGRfdmVydGV4IiwiVmVydGV4IiwiZ2V0X1ZlY3RvcjREIiwiZCIsIlBJIiwiYSIsImIiLCJhYnMiLCJ2X2NsaXAiLCJnZXRDcm9zc1BvaW50IiwiY2xpcF9maXJzdF9pbiIsImNsaXBfZmlyc3Rfb3V0IiwiY3Jvc3MxIiwiY3Jvc3MyIiwiYWNjRGl2IiwiYXJnMSIsImFyZzIiLCJ0MSIsInQyIiwic3BsaXQiLCJlIiwiTnVtYmVyIiwicmVwbGFjZSIsInBvdyIsImFjY0FkZCIsInIxIiwicjIiLCJtIiwiY20iLCJkcmF3TGluZSIsIm9uZSIsInR3byIsInZhbHVlIiwiYnVmZmVyIiwibm93Iiwic3RlcCIsInJhdGlvIiwiYWJzX3IiLCJpbnRYIiwiaXNfbGVnYWxfaW5kZXgiLCJpc19vdmVyX3Bvc2l0aXZlIiwiaW50WSIsImlzX292ZXJfbmVnYXRpdmUiLCJkcmF3Q2lyY2xlIiwiZGVsdGEiLCJjZW50ZXIiLCJzdGFydFRoZWRhIiwibm93WCIsIm5vd1kiLCJuZXh0WCIsIm5leHRZIiwiRHJhd0hlbHBlciIsImRyYXdMaW5lV3JhcHBlciIsImRyYXdTdGFyIiwiayIsInQwIiwiciIsImciLCJSR0JBIiwiZGVidWciLCJnb2xkZW4iLCJ5ZWxsb3ciLCJwaW5rIiwiYmxhY2siLCJyZWQiLCJBcnJheSIsImdldF9jbGFtcF9tb2RlIiwibngiLCJueSIsImVuZFgiLCJlbmRZIiwic2V0X2NhbnZhcyIsImlkIiwiY2FudmFzIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsIkNhdm5hc0hlbHBlciIsInNldF9jYW52YXNfZWxlbWVudCIsInN0eWxlIiwid2lkdGgiLCJoZWlnaHQiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsImdldF9jb250ZXh0IiwiZ2V0Q29udGV4dCIsImdldF9jb250ZXh0X2J5X2NhbnZhcyIsImNvbnZlcnQiLCJ1dl90b19idWZmZXJfc3BhY2UiLCJidWZmZXJfdG9fdXZfc3BhY2UiLCJ0ZXh0dXJlMkQiLCJyZWN0VVYiLCJidWZmZXJfdXYiLCJTYW1wbGVyIiwiZ3JpZF91IiwiZ3JpZF92IiwiaGFsZl9ncmlkX3UiLCJoYWxmX2dyaWRfdiIsIm5lYXJlc3RfcG9pbnRfdV9mbG9hdCIsIm5lYXJlc3RfcG9pbnRfdl9mbG9hdCIsIm5lYXJlc3RfcG9pbnRfdSIsIm5lYXJlc3RfcG9pbnRfdiIsInNfdSIsInNfdiIsIk5FIiwiU1ciLCJTRSIsIk5XIiwiQmlsaW5lYXJfU2FtcGxlciIsIk5XYyIsIk5FYyIsIlNXYyIsIlNFYyIsIm5SR0IiLCJzUkdCIiwiJCIsImNhbnZhc193aWR0aCIsImNhbnZhc19oZWlnaHQiLCJyb3dfY291bnQiLCJjb2x1bWVfY291bnQiLCJ3aW5kb3ciLCJvbmxvYWQiLCJpbml0Iiwib25jbGljayIsIlJlbmRlciIsIm1vdmVSaWdodCIsIm1vdmVVcCIsImV2ZW50IiwicmVCdWxpZCIsIm9mZnNldFgiLCJvZmZzZXRZIiwiZHJhd1BvaW50QnlHcmlkSW5kZXgiLCJkcmF3UmVjdCIsImRyYXdQb2ludEJ5UmVjdFVWIiwiZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uIiwiZmlsbFN0eWxlIiwiZmlsbFJlY3QiLCJkcmF3VVYiLCJwYXJzZUZsb2F0IiwiTWF0aEhlbHBlciIsInJlc2V0IiwicmVjdF93IiwicmVjdF9oIiwiZHJhd0J1ZmZlciIsImNsZWFyUmVjdCIsImJlZ2luUGF0aCIsInN0cm9rZSIsInN0cm9rZVN0eWxlIiwicmVjdCIsInRhcmdldFAiXSwic291cmNlUm9vdCI6IiJ9