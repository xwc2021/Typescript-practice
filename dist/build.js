(()=>{"use strict";const t=function(t,e){this.from=t,this.dir=e},e=function(){function t(t,e,n){this.x=0,this.y=0,this.z=0,this.x=t,this.y=e,this.z=n}return t.calculate_normal=function(e,n,i){var r=t.minus(n,e),s=t.minus(i,e);return t.cross(r,s).normalize()},t.calculate_center=function(t,e,n){return t.add(e).add(n).multiply(1/3)},t.uv=function(e,n){return new t(e,n,0)},t.reflect=function(e,n){var i=-2*t.dot(e,n);return n.multiply(i).add(e)},t.add=function(e,n){return new t(n.x+e.x,n.y+e.y,n.z+e.z)},t.minus=function(e,n){return new t(e.x-n.x,e.y-n.y,e.z-n.z)},t.multiply=function(e,n){return new t(e.x*n,e.y*n,e.z*n)},t.multiply3=function(e,n){return new t(e.x*n.x,e.y*n.y,e.z*n.z)},t.cross=function(e,n){return new t(e.y*n.z-e.z*n.y,-e.x*n.z+e.z*n.x,e.x*n.y-e.y*n.x)},t.dot=function(t,e){return t.x*e.x+t.y*e.y+t.z*e.z},t.equal=function(t,e){return o(t.x,e.x)&&o(t.y,e.y)&&o(t.z,e.z)},t.lerp=function(e,n,i){return new t(h(e.x,n.x,i),h(e.y,n.y,i),h(e.z,n.z,i))},t.prototype.length=function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},t.prototype.normalize=function(){var t=this.length();return this.x=this.x/t,this.y=this.y/t,this.z=this.z/t,this},t.prototype.add=function(e){return t.add(this,e)},t.prototype.minus=function(e){return t.minus(this,e)},t.prototype.multiply=function(e){return t.multiply(this,e)},t.prototype.negative=function(){return t.multiply(this,-1)},t.prototype.clone=function(){return new t(this.x,this.y,this.z)},t.up=new t(0,1,0),t.zero=new t(0,0,0),t}(),n=function(){function t(t,e,n,i){this.xAxis=t,this.yAxis=e,this.zAxis=n,this.position=i}return t.transformPoint=function(t,e){var n=t.xAxis.multiply(e.x),i=t.yAxis.multiply(e.y),r=t.zAxis.multiply(e.z);return t.position.add(n).add(i).add(r)},t.transformVector=function(t,e){var n=t.xAxis.multiply(e.x),i=t.yAxis.multiply(e.y),r=t.zAxis.multiply(e.z);return n.add(i).add(r)},t.transformTransform=function(e,n){return new t(t.transformVector(e,n.xAxis),t.transformVector(e,n.yAxis),t.transformVector(e,n.zAxis),t.transformPoint(e,n.position))},t.rotateByZ=function(n){var i=s(n),r=Math.cos(i),o=Math.sin(i);return new t(new e(r,o,0),new e(-o,r,0),new e(0,0,1),e.zero)},t.rotateByY=function(n){var i=s(n),r=Math.cos(i),o=Math.sin(i),a=new e(o,0,r);return new t(new e(r,0,-o),new e(0,1,0),a,e.zero)},t.rotateByX=function(n){var i=s(n),r=Math.cos(i),o=Math.sin(i);return new t(new e(1,0,0),new e(0,r,o),new e(0,-o,r),new e(0,0,0))},t.offset=function(n,i,r){return new t(new e(1,0,0),new e(0,1,0),new e(0,0,1),new e(n,i,r))},t}(),i=function(){function t(t,e){this.C=t,this.N=e}return t.prototype.is_positive=function(t){var n=e.minus(t,this.C);return e.dot(n,this.N)>0},t.prototype.hit=function(e,n){var i=t.hit(e,this);return i.is_hit&&(i.s=n),i},t.hit=function(t,n){var i=t.from,r=t.dir,s=e.dot(r,n.N),a=e.dot(e.minus(n.C,i),n.N);if(o(s,0))return{is_hit:!1,hit_pos:null,t:-1};var h=a/s;return{is_hit:h>0,hit_pos:i.add(r.multiply(h)),i:r,t:h,normal:n.N}},t}(),r=function(){function s(t,e,n){this.v0=t,this.v1=e,this.v2=n}return s.MVP_backface_culling_clipping=function(t,i,r){var o=n.transformPoint(r,t.v0.p),a=n.transformPoint(r,t.v1.p),h=n.transformPoint(r,t.v2.p),c=i.toCameraSpace(o),u=i.toCameraSpace(a),p=i.toCameraSpace(h),l=i.toProjectionSpace(c),f=i.toProjectionSpace(u),y=i.toProjectionSpace(p),d=e.calculate_normal(l,f,y),w=e.minus(e.zero,e.calculate_center(l,f,y)).normalize();if(e.dot(d,w)<=0)return[];var v=t.v0.clone().update_p(l).update_w(c.z),m=t.v1.clone().update_p(f).update_w(u.z),x=t.v2.clone().update_p(y).update_w(p.z);return s.clip_in_Projection_Space(v,m,x,i)},s.clip_in_Projection_Space=function(n,o,a,h){var u,p,l,f,y,d,w,v,m=(u=new s(n,o,a),p=function(t){return t.v1.p.x<0},l=function(t){return t.v2.p.x<0},f=new i(new e(0,0,0),new e(1,0,0)),y=[],d=function(n,r){var s=e.minus(r.p,n.p),o=new t(n.p,s),a=i.hit(o,f),h=e.minus(a.hit_pos,n.p).length()/s.length();return c.lerp(n,r,h)},w=function(t,e,n){y[0]=new r(t,d(t,e),d(t,n))},v=function(t,e,n){var i=d(n,t),s=d(t,e);y[0]=new r(n,i,s),y[1]=new r(n,s,e)},u.v0.p.x<0?p(u)?l(u)||w(u.v2,u.v0,u.v1):l(u)?w(u.v1,u.v2,u.v0):v(u.v0,u.v1,u.v2):p(u)?l(u)?w(u.v0,u.v1,u.v2):v(u.v1,u.v2,u.v0):l(u)?v(u.v2,u.v0,u.v1):y[0]=u,y);return m},s.process=function(t,e,n){for(var i=[],r=0,o=s.MVP_backface_culling_clipping(t,e,n);r<o.length;r++){var a=o[r],h=e.toNDC(a.v0.p),c=e.toNDC(a.v1.p),u=e.toNDC(a.v2.p),p=e.toScreenSpace(h),l=e.toScreenSpace(c),f=e.toScreenSpace(u);i.push(p),i.push(l),i.push(f)}return i},s.prototype.process=function(t,e){this.v_s=s.process(this,t,e)},s.prototype.draw=function(t){if(null!=this.v_s)for(var e=this.v_s.length/3,n=1;n<=e;++n){var i=3*n-1;t.moveTo(this.v_s[i].x,this.v_s[i].y),t.lineTo(this.v_s[i-2].x,this.v_s[i-2].y),t.lineTo(this.v_s[i-1].x,this.v_s[i-1].y),t.lineTo(this.v_s[i].x,this.v_s[i].y)}},s}();function s(t){return Math.PI*t/180}function o(t,e){return Math.abs(t-e)<.001}function a(t,e){return t.map((function(t){return t.h.hit(e,t.s)})).filter((function(t){return t.is_hit})).sort((function(t,e){return t.t-e.t}))}function h(t,e,n){return t+n*(e-t)}const c=function(){function t(t,e,n,i,r){this.p=t,this.n=e,this.w=n,this.u=i,this.v=r}return t.build_vertex=function(e,n,i,r,s){return new t(e,n,i,r,s)},t.lerp=function(n,i,r){return new t(e.lerp(n.p,i.p,r),e.lerp(n.n,i.n,r),h(n.w,i.w,r),h(n.u,i.u,r),h(n.v,i.v,r))},t.prototype.clone=function(){return new t(this.p.clone(),this.n.clone(),this.w,this.u,this.v)},t.prototype.update_p=function(t){return this.p=t,this},t.prototype.update_w=function(t){return this.w=t,this},t}(),u=function(){function t(){this.triangles=[];var t=new e(0,0,-1);this.triangles.push(new r(new c(new e(-10,-10,-10),t,1,0,0),new c(new e(10,10,-10),t,1,1,1),new c(new e(10,-10,-10),t,1,1,0))),this.triangles.push(new r(new c(new e(-10,-10,-10),t,1,0,0),new c(new e(-10,10,-10),t,1,0,1),new c(new e(10,10,-10),t,1,1,1)));for(var i=[n.rotateByY(90),n.rotateByY(180),n.rotateByY(270),n.rotateByX(90),n.rotateByX(-90)],s=0;s<i.length;++s){var o=i[s],a=n.transformPoint(o,t);this.triangles.push(new r(c.build_vertex(n.transformPoint(o,new e(-10,-10,-10)),a,1,0,0),c.build_vertex(n.transformPoint(o,new e(10,10,-10)),a,1,1,1),c.build_vertex(n.transformPoint(o,new e(10,-10,-10)),a,1,1,0))),this.triangles.push(new r(c.build_vertex(n.transformPoint(o,new e(-10,-10,-10)),a,1,0,0),c.build_vertex(n.transformPoint(o,new e(-10,10,-10)),a,1,0,1),c.build_vertex(n.transformPoint(o,new e(10,10,-10)),a,1,1,1)))}}return t.prototype.update=function(t,e){this.triangles_after_clip=this.triangles;for(var n=0;n<this.triangles_after_clip.length;++n)this.triangles_after_clip[n].process(t,e)},t.prototype.draw=function(t){t.globalCompositeOperation="destination-over",t.strokeStyle="rgba(255,0,0,1)",t.beginPath();for(var e=0;e<this.triangles_after_clip.length;++e)this.triangles_after_clip[e].draw(t);t.stroke()},t}(),p=function(){function n(t){this.color=t}return n.prototype.shading=function(n,i,r,s){var o,h=n.normal,c=(0,(o=-e.dot(i,h))>1?1:o<0?0:o),u=function(e,n,i){var r=n.negative(),s=e.hit_pos.add(r.multiply(.001));return 0!=a(i,new t(s,r)).length?.45:1}(n,i,r);return this.color.multiply(c).multiply(u)},n.yellow=new n(new e(1,1,0)),n.red=new n(new e(1,0,0)),n.green=new n(new e(0,1,0)),n.blue=new n(new e(0,0,1)),n.gray=new n(new e(.5,.5,.5)),n.white=new n(new e(1,1,1)),n}(),l=function(){function n(t,n,i,r,s,o,a){this.moveEye=function(t,n){this.eye=e.add(this.eye,n.multiply(t))},this.ratio=r/s,this.screenW=r,this.screenH=s,this.screenCenterX=.5*this.screenW,this.screenCenterY=.5*this.screenH,this.halfW=.5*this.screenW,this.halfH=.5*this.screenH,this.z_axis=e.minus(n,t).normalize();var h=e.up;this.x_axis=e.cross(h,this.z_axis).normalize(),this.y_axis=e.cross(this.z_axis,this.x_axis),this.eye=t,this.fov_degree=i,this.N=o,this.F=a,this.a=a/(a-o),this.b=-o*a/(a-o),this.Nc=o*this.a+this.b,this.Fc=a*this.a+this.b}return n.prototype.addPitch=function(t){},n.prototype.addYaw=function(t){},n.prototype.create_ray_dir=function(t,e,n){var i=s(.5*this.fov_degree),r=Math.tan(i),o=r*n;return this.z_axis.add(this.x_axis.multiply(t*o)).add(this.y_axis.multiply(e*r))},n.prototype.toCameraSpace=function(t){var n=t.minus(this.eye);return new e(e.dot(n,this.x_axis),e.dot(n,this.y_axis),e.dot(n,this.z_axis))},n.prototype.toProjectionSpace=function(t){var n=.5*s(this.fov_degree),i=1/Math.tan(n),r=1/(this.ratio*Math.tan(n));return new e(t.x*r,t.y*i,t.z*this.a+this.b)},n.prototype.toNDC=function(t){var e=1/t.z;return t.multiply(e)},n.prototype.toScreenSpace=function(t){var n=this.halfW*t.x+this.screenCenterX,i=-this.halfH*t.y+this.screenCenterY;return new e(n,i,t.z)},n.prototype.render=function(n,i){var r=this,s=new e(1,-1,0).normalize(),o=.5/n.h,h=[{x:0,y:0},{x:o,y:o},{x:-o,y:o},{x:-o,y:-o},{x:o,y:-o}];n.render_pixel((function(n,o,c){var u=r.create_ray_dir(n,o,c),l=h.map((function(e){var n=u.add(r.x_axis.multiply(e.x)).add(r.y_axis.multiply(e.y));return new t(r.eye,n.normalize())})).map((function(t){var e=a(i,t);if(0!=e.length){var n=e[0];return n.s.shading(n,s,i,1)}return p.gray.color})),f=h.length;return l.reduce((function(t,e){return t.add(e)}),e.zero).multiply(1/f)}))},n}();new(function(){function t(){var t=this;this.cameraIndex_view=1,this.cameraIndex_control=0,this.camera=null,this.screenWidth=800,this.screenHeight=600,this.box=null,window.onload=function(){t.init()},document.onkeydown=this.keyProc.bind(this)}return t.prototype.init=function(){var t=document.getElementById("canvas");t.style.width=this.screenWidth+"px",t.style.height=this.screenHeight+"px",t.width=t.clientWidth,t.height=t.clientHeight,this.ctx=t.getContext("2d"),this.box=new u,this.camera=new l(new e(0,50,-200),new e(0,0,0),60,this.screenWidth,this.screenHeight,1,500),this.start()},t.prototype.start=function(){var t=this;this.stop(),this.sum_t=0;var e=new Date;this.last_t=e.getTime(),this.thandle=window.setInterval((function(){t.drawScene()}),16)},t.prototype.resume=function(){var t=this,e=new Date;this.last_t=e.getTime(),this.thandle=window.setInterval((function(){t.drawScene()}),16)},t.prototype.stop=function(){window.clearInterval(this.thandle),this.thandle=null},t.prototype.drawScene=function(){var t=(new Date).getTime(),e=t-this.last_t;this.last_t=t,this.sum_t=this.sum_t+e,this.ctx.clearRect(0,0,this.screenWidth,this.screenHeight),this.ctx.beginPath(),this.ctx.fillStyle="rgba(180,30,15,0.1)",this.ctx.fillRect(0,0,this.screenWidth,this.screenHeight);var i=n.offset(0,0,0),r=this.sum_t/1e3*15%360,s=n.rotateByY(r),o=n.transformTransform(i,s);this.box.update(this.camera,o),this.box.draw(this.ctx),i=n.offset(150,0,0),s=n.rotateByY(r),o=n.transformTransform(s,i),this.box.update(this.camera,o),this.box.draw(this.ctx)},t.prototype.keyProc=function(t){switch(t.keyCode){case 87:this.camera.moveEye(1,this.camera.z_axis);break;case 82:this.camera.moveEye(-1,this.camera.z_axis);break;case 69:this.camera.moveEye(1,this.camera.y_axis);break;case 68:this.camera.moveEye(-1,this.camera.y_axis);break;case 83:this.camera.moveEye(-1,this.camera.x_axis);break;case 70:this.camera.moveEye(1,this.camera.x_axis);break;case 38:this.camera.addPitch(.1);break;case 40:this.camera.addPitch(-.1);break;case 37:this.camera.addYaw(-.1);break;case 39:this.camera.addYaw(.1)}},t}())})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,