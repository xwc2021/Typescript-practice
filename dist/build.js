(()=>{"use strict";const t=function(t,e){this.from=t,this.dir=e},e=function(){function t(t,e,n){this.x=0,this.y=0,this.z=0,this.x=t,this.y=e,this.z=n}return t.min_max=function(e,n,i){return{min:new t(Math.min(Math.min(e.x,n.x),i.x),Math.min(Math.min(e.y,n.y),i.y),Math.min(Math.min(e.z,n.z),i.z)),max:new t(Math.max(Math.max(e.x,n.x),i.x),Math.max(Math.max(e.y,n.y),i.y),Math.max(Math.max(e.z,n.z),i.z))}},t.calculate_normal=function(e,n,i){var r=t.minus(n,e),o=t.minus(i,e);return t.cross(r,o).normalize()},t.calculate_center=function(t,e,n){return t.add(e).add(n).multiply(1/3)},t.uv=function(e,n){return new t(e,n,0)},t.reflect=function(e,n){var i=-2*t.dot(e,n);return n.multiply(i).add(e)},t.add=function(e,n){return new t(n.x+e.x,n.y+e.y,n.z+e.z)},t.minus=function(e,n){return new t(e.x-n.x,e.y-n.y,e.z-n.z)},t.multiply=function(e,n){return new t(e.x*n,e.y*n,e.z*n)},t.multiply3=function(e,n){return new t(e.x*n.x,e.y*n.y,e.z*n.z)},t.cross=function(e,n){return new t(e.y*n.z-e.z*n.y,-e.x*n.z+e.z*n.x,e.x*n.y-e.y*n.x)},t.dot=function(t,e){return t.x*e.x+t.y*e.y+t.z*e.z},t.equal=function(t,e){return u(t.x,e.x)&&u(t.y,e.y)&&u(t.z,e.z)},t.lerp=function(e,n,i){return new t(p(e.x,n.x,i),p(e.y,n.y,i),p(e.z,n.z,i))},t.prototype.length=function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},t.prototype.normalize=function(){var t=this.length();return this.x=this.x/t,this.y=this.y/t,this.z=this.z/t,this},t.prototype.add=function(e){return t.add(this,e)},t.prototype.minus=function(e){return t.minus(this,e)},t.prototype.multiply=function(e){return t.multiply(this,e)},t.prototype.negative=function(){return t.multiply(this,-1)},t.prototype.Vector2D=function(){return this.z=0,this},t.prototype.clone=function(){return new t(this.x,this.y,this.z)},t.up=new t(0,1,0),t.zero=new t(0,0,0),t}(),n=function(t,e){this.p=t,this.w=e},i=function(){function t(t,i){this.from=t,this.dir=new n(e.minus(i.p,t.p),i.w-t.w)}return t.prototype.t_when_x_equal_w=function(){return(this.from.w-this.from.p.x)/(this.dir.p.x-this.dir.w)},t.prototype.t_when_y_equal_w=function(){return(this.from.w-this.from.p.y)/(this.dir.p.y-this.dir.w)},t.prototype.t_when_z_equal_w=function(){return(this.from.w-this.from.p.z)/(this.dir.p.z-this.dir.w)},t.prototype.t_when_x_equal_minus_w=function(){return-(this.from.w+this.from.p.x)/(this.dir.w+this.dir.p.x)},t.prototype.t_when_y_equal_minus_w=function(){return-(this.from.w+this.from.p.y)/(this.dir.w+this.dir.p.y)},t.prototype.t_when_z_equal_zero_w=function(){return-this.from.p.z/this.dir.p.z},t}(),r=function(){function t(t,e,n,i){this.xAxis=t,this.yAxis=e,this.zAxis=n,this.position=i}return t.transformPoint=function(t,e){var n=t.xAxis.multiply(e.x),i=t.yAxis.multiply(e.y),r=t.zAxis.multiply(e.z);return t.position.add(n).add(i).add(r)},t.transformVector=function(t,e){var n=t.xAxis.multiply(e.x),i=t.yAxis.multiply(e.y),r=t.zAxis.multiply(e.z);return n.add(i).add(r)},t.transformTransform=function(e,n){return new t(t.transformVector(e,n.xAxis),t.transformVector(e,n.yAxis),t.transformVector(e,n.zAxis),t.transformPoint(e,n.position))},t.rotateByZ=function(n){var i=a(n),r=Math.cos(i),o=Math.sin(i);return new t(new e(r,o,0),new e(-o,r,0),new e(0,0,1),e.zero)},t.rotateByY=function(n){var i=a(n),r=Math.cos(i),o=Math.sin(i),s=new e(o,0,r);return new t(new e(r,0,-o),new e(0,1,0),s,e.zero)},t.rotateByX=function(n){var i=a(n),r=Math.cos(i),o=Math.sin(i);return new t(new e(1,0,0),new e(0,r,o),new e(0,-o,r),new e(0,0,0))},t.offset=function(n,i,r){return new t(new e(1,0,0),new e(0,1,0),new e(0,0,1),new e(n,i,r))},t}(),o=function(){function t(t,e){this.C=t,this.N=e}return t.prototype.is_positive=function(t){var n=e.minus(t,this.C);return e.dot(n,this.N)>0},t.prototype.hit=function(e,n){var i=t.hit(e,this);return i.is_hit&&(i.s=n),i},t.hit=function(t,n){var i=t.from,r=t.dir,o=e.dot(r,n.N),s=e.dot(e.minus(n.C,i),n.N);if(u(o,0))return{is_hit:!1,hit_pos:null,t:-1};var a=s/o;return{is_hit:a>0,hit_pos:i.add(r.multiply(a)),i:r,t:a,normal:n.N}},t}(),s=function(){function n(t,e,n){this.v0=t,this.v1=e,this.v2=n}return n.MVP_backface_culling_clipping=function(t,i,o){var s=r.transformPoint(o,t.v0.p),a=r.transformPoint(o,t.v1.p),h=r.transformPoint(o,t.v2.p),u=i.toCameraSpace(s),c=i.toCameraSpace(a),p=i.toCameraSpace(h),f=i.toProjectionSpace(u),l=i.toProjectionSpace(c),w=i.toProjectionSpace(p),y=e.calculate_normal(u,c,p),_=e.minus(e.zero,e.calculate_center(u,c,p)).normalize();if(e.dot(y,_)<=0)return[];var v=t.v0.clone().update_p(f).update_w(u.z),m=t.v1.clone().update_p(l).update_w(c.z),d=t.v2.clone().update_p(w).update_w(p.z);return n.clip_in_Projection_Space(v,m,d,i)},n.clip_helper=function(t,e,n,i,r){for(var o=[],s=0,a=t;s<a.length;s++)for(var h=0,u=f(a[s],e,n,i,r);h<u.length;h++){var c=u[h];o.push(c)}return o},n.clip_in_Projection_Space=function(t,e,i,r){var o=[new n(t,e,i)],s=n.clip_helper(o,(function(t){return t.v0.w<t.v0.p.z}),(function(t){return t.v1.w<t.v1.p.z}),(function(t){return t.v2.w<t.v2.p.z}),h.Far);return s=n.clip_helper(s,(function(t){return 0>t.v0.p.z}),(function(t){return 0>t.v1.p.z}),(function(t){return 0>t.v2.p.z}),h.Near),s=n.clip_helper(s,(function(t){return t.v0.w<t.v0.p.x}),(function(t){return t.v1.w<t.v1.p.x}),(function(t){return t.v2.w<t.v2.p.x}),h.Right),s=n.clip_helper(s,(function(t){return-t.v0.w>t.v0.p.x}),(function(t){return-t.v1.w>t.v1.p.x}),(function(t){return-t.v2.w>t.v2.p.x}),h.Right),s=n.clip_helper(s,(function(t){return t.v0.w<t.v0.p.y}),(function(t){return t.v1.w<t.v1.p.y}),(function(t){return t.v2.w<t.v2.p.y}),h.Top),n.clip_helper(s,(function(t){return-t.v0.w>t.v0.p.y}),(function(t){return-t.v1.w>t.v1.p.y}),(function(t){return-t.v2.w>t.v2.p.y}),h.Bottom)},n.calculate_α_β_γ=function(n,i,r,s){var a=e.minus(s,n),h=e.minus(i,n),u=e.minus(r,n),c=new e(-h.y,h.x,0),p=new t(s,u.multiply(-1)),f=o.hit(p,new o(n,c)).hit_pos,l=e.minus(f,n),w=e.minus(a,l),y=l.x/h.x,_=w.x/u.x;return{α:y,β:_,γ:1-y-_}},n.is_in_triangle=function(t,e,n){return t>=0&&e>=0&&n>=0},n.process=function(t,i,r){for(var o=[],s=0,a=n.MVP_backface_culling_clipping(t,i,r);s<a.length;s++){var h=a[s],u=i.toNDC(h.v0.p,h.v0.w),c=i.toNDC(h.v1.p,h.v1.w),p=i.toNDC(h.v2.p,h.v2.w),f=i.toScreenSpace(u),l=i.toScreenSpace(c),w=i.toScreenSpace(p);o.push(f),o.push(l),o.push(w);for(var y=e.min_max(f,l,w),_=y.min,v=y.max,m=Math.floor(_.x),d=Math.floor(v.x),x=Math.floor(_.y),g=Math.floor(v.y),z=m;z<=d;++z)for(var b=x;b<=g;++b){var M=new e(z+.5,b+.5,0),k=n.calculate_α_β_γ(f.Vector2D(),l.Vector2D(),w.Vector2D(),M),S=k.α,C=k.β,P=k.γ;n.is_in_triangle(S,C,P)}}return o},n.prototype.process=function(t,e){this.v_s=n.process(this,t,e)},n.prototype.draw=function(t){if(null!=this.v_s)for(var e=this.v_s.length/3,n=1;n<=e;++n){var i=3*n-1;t.moveTo(this.v_s[i].x,this.v_s[i].y),t.lineTo(this.v_s[i-2].x,this.v_s[i-2].y),t.lineTo(this.v_s[i-1].x,this.v_s[i-1].y),t.lineTo(this.v_s[i].x,this.v_s[i].y)}},n}();function a(t){return Math.PI*t/180}var h;function u(t,e){return Math.abs(t-e)<.001}function c(t,e){return t.map((function(t){return t.h.hit(e,t.s)})).filter((function(t){return t.is_hit})).sort((function(t,e){return t.t-e.t}))}function p(t,e,n){return t+n*(e-t)}function f(t,e,n,r,o){var a=[],u=function(t,e){var n=new i(t.get_Vector4D(),e.get_Vector4D()),r=0;switch(o){case h.Far:r=n.t_when_z_equal_w();break;case h.Near:r=n.t_when_z_equal_zero_w();break;case h.Right:r=n.t_when_x_equal_w();break;case h.Left:r=n.t_when_x_equal_minus_w();break;case h.Top:r=n.t_when_y_equal_w();break;case h.Bottom:r=n.t_when_y_equal_minus_w()}return l.lerp(t,e,r)},c=function(t,e,n){a[0]=new s(t,u(t,e),u(t,n))},p=function(t,e,n){var i=u(n,t),r=u(t,e);a[0]=new s(n,i,r),a[1]=new s(n,r,e)};return e(t)?n(t)?r(t)||c(t.v2,t.v0,t.v1):r(t)?c(t.v1,t.v2,t.v0):p(t.v0,t.v1,t.v2):n(t)?r(t)?c(t.v0,t.v1,t.v2):p(t.v1,t.v2,t.v0):r(t)?p(t.v2,t.v0,t.v1):a[0]=t,a}!function(t){t[t.Near=0]="Near",t[t.Far=1]="Far",t[t.Right=2]="Right",t[t.Left=3]="Left",t[t.Top=4]="Top",t[t.Bottom=5]="Bottom"}(h||(h={}));const l=function(){function t(t,e,n,i,r){this.p=t,this.n=e,this.w=n,this.u=i,this.v=r}return t.build_vertex=function(e,n,i,r,o){return new t(e,n,i,r,o)},t.lerp=function(n,i,r){return new t(e.lerp(n.p,i.p,r),e.lerp(n.n,i.n,r),p(n.w,i.w,r),p(n.u,i.u,r),p(n.v,i.v,r))},t.prototype.clone=function(){return new t(this.p.clone(),this.n.clone(),this.w,this.u,this.v)},t.prototype.update_p=function(t){return this.p=t,this},t.prototype.update_w=function(t){return this.w=t,this},t.prototype.get_Vector4D=function(){return new n(this.p,this.w)},t}(),w=function(){function t(){this.triangles=[];var t=new e(0,0,-1);this.triangles.push(new s(new l(new e(-10,-10,-10),t,1,0,0),new l(new e(10,10,-10),t,1,1,1),new l(new e(10,-10,-10),t,1,1,0)));for(var n=[r.rotateByY(90),r.rotateByY(180),r.rotateByY(270),r.rotateByX(90),r.rotateByX(-90)],i=0;i<n.length;++i){var o=n[i];r.transformPoint(o,t)}}return t.prototype.update=function(t,e){this.triangles_after_clip=this.triangles;for(var n=0;n<this.triangles_after_clip.length;++n)this.triangles_after_clip[n].process(t,e)},t.prototype.draw=function(t){t.globalCompositeOperation="destination-over",t.strokeStyle="rgba(255,0,0,1)",t.beginPath();for(var e=0;e<this.triangles_after_clip.length;++e)this.triangles_after_clip[e].draw(t);t.stroke()},t}(),y=function(){function n(t){this.color=t}return n.prototype.shading=function(n,i,r,o){var s,a=n.normal,h=(0,(s=-e.dot(i,a))>1?1:s<0?0:s),u=function(e,n,i){var r=n.negative(),o=e.hit_pos.add(r.multiply(.001));return 0!=c(i,new t(o,r)).length?.45:1}(n,i,r);return this.color.multiply(h).multiply(u)},n.yellow=new n(new e(1,1,0)),n.red=new n(new e(1,0,0)),n.green=new n(new e(0,1,0)),n.blue=new n(new e(0,0,1)),n.gray=new n(new e(.5,.5,.5)),n.white=new n(new e(1,1,1)),n}(),_=function(){function n(t,n,i,r,o,s,a){this.moveEye=function(t,n){this.eye=e.add(this.eye,n.multiply(t))},this.ratio=r/o,this.screenW=r,this.screenH=o,this.screenCenterX=.5*this.screenW,this.screenCenterY=.5*this.screenH,this.halfW=.5*this.screenW,this.halfH=.5*this.screenH,this.z_axis=e.minus(n,t).normalize();var h=e.up;this.x_axis=e.cross(h,this.z_axis).normalize(),this.y_axis=e.cross(this.z_axis,this.x_axis),this.eye=t,this.fov_degree=i,this.N=s,this.F=a,this.a=a/(a-s),this.b=-s*a/(a-s),console.log(this.a,this.b)}return n.prototype.addPitch=function(t){},n.prototype.addYaw=function(t){},n.prototype.create_ray_dir=function(t,e,n){var i=a(.5*this.fov_degree),r=Math.tan(i),o=r*n;return this.z_axis.add(this.x_axis.multiply(t*o)).add(this.y_axis.multiply(e*r))},n.prototype.toCameraSpace=function(t){var n=t.minus(this.eye);return new e(e.dot(n,this.x_axis),e.dot(n,this.y_axis),e.dot(n,this.z_axis))},n.prototype.toProjectionSpace=function(t){var n=.5*a(this.fov_degree),i=1/Math.tan(n),r=1/(this.ratio*Math.tan(n));return new e(t.x*r,t.y*i,t.z*this.a+this.b)},n.prototype.toNDC=function(t,e){var n=1/e;return t.multiply(n)},n.prototype.toScreenSpace=function(t){var n=this.halfW*t.x+this.screenCenterX,i=-this.halfH*t.y+this.screenCenterY;return new e(n,i,t.z)},n.prototype.render=function(n,i){var r=this,o=new e(1,-1,0).normalize(),s=.5/n.h,a=[{x:0,y:0},{x:s,y:s},{x:-s,y:s},{x:-s,y:-s},{x:s,y:-s}];n.render_pixel((function(n,s,h){var u=r.create_ray_dir(n,s,h),p=a.map((function(e){var n=u.add(r.x_axis.multiply(e.x)).add(r.y_axis.multiply(e.y));return new t(r.eye,n.normalize())})).map((function(t){var e=c(i,t);if(0!=e.length){var n=e[0];return n.s.shading(n,o,i,1)}return y.gray.color})),f=a.length;return p.reduce((function(t,e){return t.add(e)}),e.zero).multiply(1/f)}))},n}(),v=function(){function t(t,e){void 0===t&&(t=320),void 0===e&&(e=240),this.w=320,this.h=240,this.backbuffer=null,this.w=t,this.h=e,this.backbuffer=new OffscreenCanvas(this.w,this.h)}return t.prototype.render_pixel=function(t){for(var e=this.backbuffer.getContext("2d"),n=e.getImageData(0,0,this.w,this.h),i=n.data,r=this.w/this.h,o=0;o<this.h;++o)for(var s=0;s<this.w;++s){var a=4*(s+o*this.w),h=(s+.5)/this.w,u=(o+.5)/this.h,c=t(2*h-1,2*(u=1-u)-1,r),p=c.x,f=c.y,l=c.z,w=1/2.1;p=Math.pow(p,w),f=Math.pow(f,w),l=Math.pow(l,w),i[a++]=Math.round(255*p),i[a++]=Math.round(255*f),i[a++]=Math.round(255*l),i[a]=255}e.putImageData(n,0,0)},t.prototype.set_pixel=function(t){for(var e=this.backbuffer.getContext("2d"),n=e.getImageData(0,0,this.w,this.h),i=n.data,r=(this.w,this.h,0);r<this.h;++r)for(var o=0;o<this.w;++o){var s=4*(o+r*this.w),a=t(o,r),h=a.x,u=a.y,c=a.z,p=1/2.1;h=Math.pow(h,p),u=Math.pow(u,p),c=Math.pow(c,p),i[s++]=Math.round(255*h),i[s++]=Math.round(255*u),i[s++]=Math.round(255*c),i[s]=255}e.putImageData(n,0,0)},t.prototype.show_buffer=function(t){var e=document.getElementById(t);e.style.width=this.w+"px",e.style.height=this.h+"px",e.width=e.clientWidth,e.height=e.clientHeight,e.getContext("bitmaprenderer").transferFromImageBitmap(this.backbuffer.transferToImageBitmap())},t}(),m=function(){function t(t,e){this.w=t,this.h=e,this.buffer=new Array(this.h);for(var n=0,i=this.buffer;n<i.length;n++)i[n],new Array(this.w)}return t.prototype.set=function(t,e,n){this.buffer[e][t]=n},t.prototype.get=function(t,e){return this.buffer[e][t]},t}();new(function(){function t(){var t=this;this.cameraIndex_view=1,this.cameraIndex_control=0,this.camera=null,this.screenWidth=800,this.screenHeight=600,this.box=null,window.onload=function(){t.init()},document.onkeydown=this.keyProc.bind(this)}return t.prototype.init=function(){this.color_buffer=new m(this.screenWidth,this.screenHeight),this.render_target=new v(this.screenWidth,this.screenHeight);var t=document.getElementById("canvas");t.style.width=this.screenWidth+"px",t.style.height=this.screenHeight+"px",t.width=t.clientWidth,t.height=t.clientHeight,this.ctx=t.getContext("2d"),this.box=new w,this.camera=new _(new e(0,50,-200),new e(0,0,0),60,this.screenWidth,this.screenHeight,100,500),this.start()},t.prototype.start=function(){var t=this;this.stop(),this.sum_t=0;var e=new Date;this.last_t=e.getTime(),this.thandle=window.setInterval((function(){t.drawScene()}),16)},t.prototype.resume=function(){var t=this,e=new Date;this.last_t=e.getTime(),this.thandle=window.setInterval((function(){t.drawScene()}),16)},t.prototype.stop=function(){window.clearInterval(this.thandle),this.thandle=null},t.prototype.drawScene=function(){var t=(new Date).getTime(),e=t-this.last_t;this.last_t=t,this.sum_t=this.sum_t+e,this.ctx.clearRect(0,0,this.screenWidth,this.screenHeight),this.ctx.beginPath(),this.ctx.fillStyle="rgba(180,30,15,0.1)",this.ctx.fillRect(0,0,this.screenWidth,this.screenHeight);var n=r.offset(0,0,0),i=(this.sum_t,r.rotateByY(45)),o=r.transformTransform(n,i);this.box.update(this.camera,o),this.box.draw(this.ctx)},t.prototype.keyProc=function(t){switch(t.keyCode){case 87:this.camera.moveEye(1,this.camera.z_axis);break;case 82:this.camera.moveEye(-1,this.camera.z_axis);break;case 69:this.camera.moveEye(1,this.camera.y_axis);break;case 68:this.camera.moveEye(-1,this.camera.y_axis);break;case 83:this.camera.moveEye(-1,this.camera.x_axis);break;case 70:this.camera.moveEye(1,this.camera.x_axis);break;case 38:this.camera.addPitch(.1);break;case 40:this.camera.addPitch(-.1);break;case 37:this.camera.addYaw(-.1);break;case 39:this.camera.addYaw(.1)}},t}())})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,