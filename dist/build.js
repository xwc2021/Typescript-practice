(()=>{"use strict";const t=function(t,n){this.from=t,this.dir=n},n=function(){function t(t,n,e){this.x=0,this.y=0,this.z=0,this.x=t,this.y=n,this.z=e}return t.min_max=function(n,e,r){return{min:new t(Math.min(Math.min(n.x,e.x),r.x),Math.min(Math.min(n.y,e.y),r.y),Math.min(Math.min(n.z,e.z),r.z)),max:new t(Math.max(Math.max(n.x,e.x),r.x),Math.max(Math.max(n.y,e.y),r.y),Math.max(Math.max(n.z,e.z),r.z))}},t.calculate_normal=function(n,e,r){var i=t.minus(e,n),o=t.minus(r,n);return t.cross(i,o).normalize()},t.calculate_center=function(t,n,e){return t.add(n).add(e).multiply(1/3)},t.uv=function(n,e){return new t(n,e,0)},t.reflect=function(n,e){var r=-2*t.dot(n,e);return e.multiply(r).add(n)},t.add=function(n,e){return new t(e.x+n.x,e.y+n.y,e.z+n.z)},t.minus=function(n,e){return new t(n.x-e.x,n.y-e.y,n.z-e.z)},t.multiply=function(n,e){return new t(n.x*e,n.y*e,n.z*e)},t.multiply3=function(n,e){return new t(n.x*e.x,n.y*e.y,n.z*e.z)},t.cross=function(n,e){return new t(n.y*e.z-n.z*e.y,-n.x*e.z+n.z*e.x,n.x*e.y-n.y*e.x)},t.dot=function(t,n){return t.x*n.x+t.y*n.y+t.z*n.z},t.equal=function(t,n){return l(t.x,n.x)&&l(t.y,n.y)&&l(t.z,n.z)},t.lerp=function(n,e,r){return new t(w(n.x,e.x,r),w(n.y,e.y,r),w(n.z,e.z,r))},t.prototype.length=function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},t.prototype.normalize=function(){var t=this.length();return this.x=this.x/t,this.y=this.y/t,this.z=this.z/t,this},t.prototype.add=function(n){return t.add(this,n)},t.prototype.minus=function(n){return t.minus(this,n)},t.prototype.multiply=function(n){return t.multiply(this,n)},t.prototype.negative=function(){return t.multiply(this,-1)},t.prototype.Vector2D=function(){return this.z=0,this},t.prototype.clone=function(){return new t(this.x,this.y,this.z)},t.up=new t(0,1,0),t.zero=new t(0,0,0),t}(),e=function(t,n){this.p=t,this.w=n},r=function(){function t(t,r){this.from=t,this.dir=new e(n.minus(r.p,t.p),r.w-t.w)}return t.prototype.t_when_x_equal_w=function(){return(this.from.w-this.from.p.x)/(this.dir.p.x-this.dir.w)},t.prototype.t_when_y_equal_w=function(){return(this.from.w-this.from.p.y)/(this.dir.p.y-this.dir.w)},t.prototype.t_when_z_equal_w=function(){return(this.from.w-this.from.p.z)/(this.dir.p.z-this.dir.w)},t.prototype.t_when_x_equal_minus_w=function(){return-(this.from.w+this.from.p.x)/(this.dir.w+this.dir.p.x)},t.prototype.t_when_y_equal_minus_w=function(){return-(this.from.w+this.from.p.y)/(this.dir.w+this.dir.p.y)},t.prototype.t_when_z_equal_zero_w=function(){return-this.from.p.z/this.dir.p.z},t}(),i=function(){function t(t,n){this.C=t,this.N=n}return t.prototype.is_positive=function(t){var e=n.minus(t,this.C);return n.dot(e,this.N)>0},t.prototype.hit=function(n,e){var r=t.hit(n,this);return r.is_hit&&(r.s=e),r},t.hit=function(t,e){var r=t.from,i=t.dir,o=n.dot(i,e.N),u=n.dot(n.minus(e.C,r),e.N);if(l(o,0))return{is_hit:!1,hit_pos:null,t:-1};var a=u/o;return{is_hit:a>0,hit_pos:r.add(i.multiply(a)),i,t:a,normal:e.N}},t}(),o=function(){function t(t,n,e,r){this.xAxis=t,this.yAxis=n,this.zAxis=e,this.position=r}return t.transformPoint=function(t,n){var e=t.xAxis.multiply(n.x),r=t.yAxis.multiply(n.y),i=t.zAxis.multiply(n.z);return t.position.add(e).add(r).add(i)},t.transformVector=function(t,n){var e=t.xAxis.multiply(n.x),r=t.yAxis.multiply(n.y),i=t.zAxis.multiply(n.z);return e.add(r).add(i)},t.transformTransform=function(n,e){return new t(t.transformVector(n,e.xAxis),t.transformVector(n,e.yAxis),t.transformVector(n,e.zAxis),t.transformPoint(n,e.position))},t.rotateByZ=function(e){var r=f(e),i=Math.cos(r),o=Math.sin(r);return new t(new n(i,o,0),new n(-o,i,0),new n(0,0,1),n.zero)},t.rotateByY=function(e){var r=f(e),i=Math.cos(r),o=Math.sin(r),u=new n(o,0,i);return new t(new n(i,0,-o),new n(0,1,0),u,n.zero)},t.rotateByX=function(e){var r=f(e),i=Math.cos(r),o=Math.sin(r);return new t(new n(1,0,0),new n(0,i,o),new n(0,-o,i),new n(0,0,0))},t.offset=function(e,r,i){return new t(new n(1,0,0),new n(0,1,0),new n(0,0,1),new n(e,r,i))},t}(),u=function(){function t(n,e,r,i){this.add=function(n){return new t(this.r+n.r,this.g+n.g,this.b+n.b,1)},this.r=n,this.g=e,this.b=r,this.a=i}return t.lerp=function(n,e,r){return new t(w(n.r,e.r,r),w(n.g,e.g,r),w(n.b,e.b,r),1)},t.prototype.multiply=function(n){return new t(this.r*n,this.g*n,this.b*n,1)},t.prototype.toString=function(){return"( "+this.r+" , "+this.g+" , "+this.b+" )"},t.golden=new t(1,215/255,0,1),t.yellow=new t(1,1,0,1),t.pink=new t(1,192/255,203/255,1),t.black=new t(0,0,0,1),t.red=new t(1,0,0,1),t}(),a=function(){function t(){}return t.clear=function(n,e){t.color_buffer.clear(n),t.z_buffer.clear(e)},t.show=function(n){n.set_pixel((function(n,e){return t.color_buffer.get(n,e)})),n.show_buffer("canvas")},t.clip_helper=function(t,n,e,r,i){for(var o=[],u=0,a=t;u<a.length;u++)for(var s=0,c=_(a[u],n,e,r,i);s<c.length;s++){var h=c[s];o.push(h)}return o},t.clip_in_Projection_Space=function(n,e,r,i){var o=[new s(n,e,r)],u=t.clip_helper(o,(function(t){return t.v0.w<t.v0.p.z}),(function(t){return t.v1.w<t.v1.p.z}),(function(t){return t.v2.w<t.v2.p.z}),p.Far);return u=t.clip_helper(u,(function(t){return 0>t.v0.p.z}),(function(t){return 0>t.v1.p.z}),(function(t){return 0>t.v2.p.z}),p.Near),u=t.clip_helper(u,(function(t){return t.v0.w<t.v0.p.x}),(function(t){return t.v1.w<t.v1.p.x}),(function(t){return t.v2.w<t.v2.p.x}),p.Right),u=t.clip_helper(u,(function(t){return-t.v0.w>t.v0.p.x}),(function(t){return-t.v1.w>t.v1.p.x}),(function(t){return-t.v2.w>t.v2.p.x}),p.Right),u=t.clip_helper(u,(function(t){return t.v0.w<t.v0.p.y}),(function(t){return t.v1.w<t.v1.p.y}),(function(t){return t.v2.w<t.v2.p.y}),p.Top),t.clip_helper(u,(function(t){return-t.v0.w>t.v0.p.y}),(function(t){return-t.v1.w>t.v1.p.y}),(function(t){return-t.v2.w>t.v2.p.y}),p.Bottom)},t.MVP_backface_culling_clipping=function(e,r,i){var u=o.transformPoint(i,e.v0.p),a=o.transformPoint(i,e.v1.p),s=o.transformPoint(i,e.v2.p),c=r.toCameraSpace(u),h=r.toCameraSpace(a),f=r.toCameraSpace(s),p=r.toProjectionSpace(c),l=r.toProjectionSpace(h),v=r.toProjectionSpace(f),w=n.calculate_normal(c,h,f),_=n.minus(n.zero,n.calculate_center(c,h,f)).normalize();if(n.dot(w,_)<=0)return[];var y=e.v0.clone().update_p(p).update_w(c.z),x=e.v1.clone().update_p(l).update_w(h.z),m=e.v2.clone().update_p(v).update_w(f.z);return t.clip_in_Projection_Space(y,x,m,r)},t.process=function(e,r,i){for(var o=[],a=0,c=t.MVP_backface_culling_clipping(e,r,i);a<c.length;a++){var h=c[a],f=r.toNDC(h.v0.p,h.v0.w),p=r.toNDC(h.v1.p,h.v1.w),l=r.toNDC(h.v2.p,h.v2.w),v=r.toScreenSpace(f),w=r.toScreenSpace(p),_=r.toScreenSpace(l);o.push(v),o.push(w),o.push(_);for(var y=n.min_max(v,w,_),x=y.min,m=y.max,d=Math.floor(x.x),g=Math.floor(m.x),z=Math.floor(x.y),b=Math.floor(m.y),S=d;S<=g;++S)for(var M=z;M<=b;++M){var B=new n(S+.5,M+.5,0),N=s["calculate_α_β_γ"](v,w,_,B),P=N.α,k=N.β,R=N.γ;if(s.is_in_triangle(P,k,R)){t.color_buffer.set(S,M,u.yellow);var V=s.interpolation(R,P,k,f.z,p.z,l.z);if(!(V>t.z_buffer.get(S,M))){t.z_buffer.set(S,M,V);s.interpolation(R,P,k,1/h.v0.w,1/h.v1.w,1/h.v2.w);s.interpolation(R,P,k,h.v0.u/h.v0.w,h.v1.u/h.v1.w,h.v2.u/h.v2.w),s.interpolation(R,P,k,h.v0.v/h.v0.w,h.v1.v/h.v1.w,h.v2.v/h.v2.w)}}}}return o},t}(),s=function(){function e(t,n,e){this.v0=t,this.v1=n,this.v2=e}return e.calculate_α_β_γ=function(e,r,o,u){var a=n.minus(u,e),s=n.minus(r,e),c=n.minus(o,e),h=new n(-s.y,s.x,0),f=new t(u,c.multiply(-1)),p=i.hit(f,new i(e,h)).hit_pos,l=n.minus(p,e),v=n.minus(a,l),w=l.x/s.x,_=v.x/c.x;return{α:w,β:_,γ:1-w-_}},e.is_in_triangle=function(t,n,e){return t>=0&&n>=0&&e>=0},e.interpolation=function(t,n,e,r,i,o){return r*t+i*n+o*e},e.prototype.process=function(t,n){this.v_s=a.process(this,t,n)},e.prototype.draw=function(t){if(null!=this.v_s)for(var n=this.v_s.length/3,e=1;e<=n;++e){var r=3*e-1;t.moveTo(this.v_s[r].x,this.v_s[r].y),t.lineTo(this.v_s[r-2].x,this.v_s[r-2].y),t.lineTo(this.v_s[r-1].x,this.v_s[r-1].y),t.lineTo(this.v_s[r].x,this.v_s[r].y)}},e}(),c=function(){function t(t,n,e,r,i){this.p=t,this.n=n,this.w=e,this.u=r,this.v=i}return t.build_vertex=function(n,e,r,i,o){return new t(n,e,r,i,o)},t.lerp=function(e,r,i){return new t(n.lerp(e.p,r.p,i),n.lerp(e.n,r.n,i),w(e.w,r.w,i),w(e.u,r.u,i),w(e.v,r.v,i))},t.prototype.clone=function(){return new t(this.p.clone(),this.n.clone(),this.w,this.u,this.v)},t.prototype.update_p=function(t){return this.p=t,this},t.prototype.update_w=function(t){return this.w=t,this},t.prototype.get_Vector4D=function(){return new e(this.p,this.w)},t}(),h=function(){function t(n,e){this.multiply=function(n){return new t(this.x*n,this.y*n)},this.toString=function(){return"( "+this.x+" , "+this.y+" )"},this.x=n,this.y=e}return t.uv_to_buffer_space=function(n){return new t(n.x,1-n.y)},t.buffer_to_uv_space=function(n){return new t(n.x,1-n.y)},t.add=function(n,e){return new t(e.x+n.x,e.y+n.y)},t.minus=function(n,e){return new t(n.x-e.x,n.y-e.y)},t.prototype.plus=function(n){return new t(this.x+n.x,this.y+n.y)},t}();function f(t){return Math.PI*t/180}var p;function l(t,n){return Math.abs(t-n)<.001}function v(t,n,e){return t>e?e:t<n?n:t}function w(t,n,e){return t+e*(n-t)}function _(t,n,e,i,o){var u=[],a=function(t,n){var e=new r(t.get_Vector4D(),n.get_Vector4D()),i=0;switch(o){case p.Far:i=e.t_when_z_equal_w();break;case p.Near:i=e.t_when_z_equal_zero_w();break;case p.Right:i=e.t_when_x_equal_w();break;case p.Left:i=e.t_when_x_equal_minus_w();break;case p.Top:i=e.t_when_y_equal_w();break;case p.Bottom:i=e.t_when_y_equal_minus_w()}return c.lerp(t,n,i)},h=function(t,n,e){u[0]=new s(t,a(t,n),a(t,e))},f=function(t,n,e){var r=a(e,t),i=a(t,n);u[0]=new s(e,r,i),u[1]=new s(e,i,n)};return n(t)?e(t)?i(t)||h(t.v2,t.v0,t.v1):i(t)?h(t.v1,t.v2,t.v0):f(t.v0,t.v1,t.v2):e(t)?i(t)?h(t.v0,t.v1,t.v2):f(t.v1,t.v2,t.v0):i(t)?f(t.v2,t.v0,t.v1):u[0]=t,u}!function(t){t[t.Near=0]="Near",t[t.Far=1]="Far",t[t.Right=2]="Right",t[t.Left=3]="Left",t[t.Top=4]="Top",t[t.Bottom=5]="Bottom"}(p||(p={}));var y=function(){function t(){}return t.accDiv=function(t,n){var e=0,r=0;try{e=t.toString().split(".")[1].length}catch(t){}try{r=n.toString().split(".")[1].length}catch(t){}return Number(t.toString().replace(".",""))/Number(n.toString().replace(".",""))*Math.pow(10,r-e)},t.accAdd=function(t,n){var e,r,i,o;try{e=t.toString().split(".")[1].length}catch(t){e=0}try{r=n.toString().split(".")[1].length}catch(t){r=0}if(o=Math.abs(e-r),i=Math.pow(10,Math.max(e,r)),o>0){var u=Math.pow(10,o);e>r?(t=Number(t.toString().replace(".","")),n=Number(n.toString().replace(".",""))*u):(t=Number(t.toString().replace(".",""))*u,n=Number(n.toString().replace(".","")))}else t=Number(t.toString().replace(".","")),n=Number(n.toString().replace(".",""));return(t+n)/i},t}(),x=function(){function t(){}return t.drawLine=function(t,n,e,r){var i=t,o=n,u=h.minus(o,i),a=100;if(0!=u.y)if(0!=u.x){var s=u.x/u.y,c=Math.abs(s);if(s>0){if(c<=1)for(l=1;l<a;l++){i.y=i.y+1,i.x=i.x+c;var f=Math.floor(i.x);if(!r.is_legal_index(f,i.y))break;if(r.is_over_positive(i.x,i.y,o.x,o.y))break;r.set(f,i.y,e)}else if(c>1)for(l=1;l<a;l++){i.y=i.y+1/c,i.x=i.x+1;var p=Math.floor(i.y);if(!r.is_legal_index(i.x,p))break;if(r.is_over_positive(i.x,i.y,o.x,o.y))break;r.set(i.x,p,e)}}else if(s<0)if(c<=1)for(l=1;l<a&&(i.y=i.y+1,i.x=i.x-c,f=Math.floor(i.x),r.is_legal_index(f,i.y))&&!r.is_over_negative(i.x,i.y,o.x,o.y);l++)r.set(f,i.y,e);else if(c>1)for(l=1;l<a&&(i.y=i.y+1/c,i.x=i.x-1,p=Math.floor(i.y),r.is_legal_index(i.x,p))&&!r.is_over_negative(i.x,i.y,o.x,o.y);l++)r.set(i.x,p,e)}else for(var l=1;l<a&&(i.y=i.y+1,r.is_legal_index(i.x,i.y))&&!(i.y>o.y);l++)r.set(i.x,i.y,e);else for(l=1;l<a&&(i.x=i.x+1,r.is_legal_index(i.x,i.y))&&!(i.x>o.x);l++)r.set(i.x,i.y,e)},t.drawStar=function(n,e){for(var r=2*Math.PI/5,i=new h(10,10),o=-Math.PI/3,u=0,a=0;a<5;a++){var s=Math.floor(i.x+9*Math.cos(o+r*u)),c=Math.floor(i.y+9*Math.sin(o+r*u)),f=Math.floor(i.x+9*Math.cos(o+r*(u+2))),p=Math.floor(i.y+9*Math.sin(o+r*(u+2)));t.drawLineWrapper(new h(s,c),new h(f,p),n,e),u+=2}},t.drawLineWrapper=function(n,e,r,i){n.y<e.y?t.drawLine(n,e,r,i):e.y<n.y?t.drawLine(e,n,r,i):n.x<e.x?t.drawLine(n,e,r,i):e.x<n.x&&t.drawLine(e,n,r,i)},t}();const m=function(){function t(t,n){this.w=t,this.h=n,this.buffer=new Array(this.h);for(var e=0;e<this.h;++e)this.buffer[e]=new Array(this.w)}return t.prototype.set=function(t,n,e){this.buffer[n][t]=e},t.prototype.get=function(t,n){return this.buffer[n][t]},t.prototype.clear=function(t){for(var n=0;n<this.h;++n)for(var e=0;e<this.w;++e)this.buffer[n][e]=t},t.prototype.get_clamp_mode=function(t,n){var e=v(t,0,this.w-1),r=v(n,0,this.h-1);return this.buffer[r][e]},t.prototype.is_legal_index=function(t,n){return t>=0&&t<this.w&&n>=0&&n<this.h},t.prototype.is_over_negative=function(t,n,e,r){return n>r||t<e},t.prototype.is_over_positive=function(t,n,e,r){return n>r||t>e},t}(),d=function(){function t(){}return t.set_canvas=function(t,n,e){var r=document.getElementById(t);return r.style.width=n+"px",r.style.height=e+"px",r.width=r.clientWidth,r.height=r.clientHeight,r},t.get_context=function(t){return document.getElementById(t).getContext("2d")},t.convert=function(t){return"rgba("+Math.floor(255*t.r)+","+Math.floor(255*t.g)+","+Math.floor(255*t.b)+",1)"},t}(),g=function(){function t(){}return t.texture2D=function(n,e,r,i){var o,u=h.uv_to_buffer_space(n),a=u.x,s=u.y,c=1/e,f=1/r,p=.5*c,l=.5*f,v=a/c,w=s/f,_=Math.floor(v),y=Math.floor(w),x=a%c,m=s%f;if(x>=p&&m>=l){v==_&&(_-=1),w==y&&(y-=1);var d=new h(_,y),g=new h(d.x+1,d.y),z=new h(d.x,d.y+1),b=new h(d.x+1,d.y+1);return{rectUV:o=new h((x-p)/c,(m-l)/f),NW:d,NE:g,SW:z,SE:b,color:t.Bilinear_Sampler(o,d,g,z,b,i)}}if(x<=p&&m>=l){w==y&&(y-=1),d=new h(_,y);var S=new h(d.x-1,d.y);return z=new h(d.x-1,d.y+1),b=new h(d.x,d.y+1),{rectUV:o=new h((x+p)/c,(m-l)/f),NW:S,NE:d,SW:z,SE:b,color:t.Bilinear_Sampler(o,S,d,z,b,i)}}return x<=p&&m<=l?(d=new h(_,y),S=new h(d.x-1,d.y-1),g=new h(d.x,d.y-1),z=new h(d.x-1,d.y),{rectUV:o=new h((x+p)/c,(m+l)/f),NW:S,NE:g,SW:z,SE:d,color:t.Bilinear_Sampler(o,S,g,z,d,i)}):x>=p&&m<=l?(v==_&&(_-=1),d=new h(_,y),S=new h(d.x,d.y-1),g=new h(d.x+1,d.y-1),b=new h(d.x+1,d.y),{rectUV:o=new h((x-p)/c,(m+l)/f),NW:S,NE:g,SW:d,SE:b,color:t.Bilinear_Sampler(o,S,g,d,b,i)}):void 0},t.Bilinear_Sampler=function(t,n,e,r,i,o){var a=o.get_clamp_mode(n.x,n.y),s=o.get_clamp_mode(e.x,e.y),c=o.get_clamp_mode(r.x,r.y),h=o.get_clamp_mode(i.x,i.y),f=u.lerp(a,s,t.x),p=u.lerp(c,h,t.x);return u.lerp(f,p,t.y)},t}();new(function(){function t(){var t=this;this.canvas_width=600,this.canvas_height=600,this.row_count=20,this.colume_count=20,window.onload=function(){t.init(),t.$("btn_reset").onclick=function(){t.reBulid2()},t.$("move_right").onclick=function(){t.moveRight(),t.reBulid2()},t.$("move_down").onclick=function(){t.moveDown(),t.reBulid2()},t.$("canvas").onclick=function(n){t.reBulid(new h(n.offsetX,n.offsetY))}}}return t.prototype.texture2D=function(t){var n=g.texture2D(t,this.colume_count,this.row_count,this.buffer),e=n.rectUV,r=n.NW,i=n.NE,o=n.SW,u=n.SE,a=n.color;this.drawPointByGridIndex(r),this.drawPointByGridIndex(i),this.drawPointByGridIndex(o),this.drawPointByGridIndex(u),this.drawRect(r),this.drawPointByRectUV(r,e);var s=d.get_context("canvas2");s.globalCompositeOperation="source-over",s.fillStyle=d.convert(a),s.fillRect(0,0,30,30)},t.prototype.drawUV=function(){var t=parseFloat(this.$("u").value),n=parseFloat(this.$("v").value);this.texture2D(new h(t,n))},t.prototype.reBulid2=function(){this.Render()},t.prototype.moveRight=function(){var t=parseFloat(this.$("u").value),n=1/this.colume_count;t=y.accAdd(t,n),this.$("u").value=t.toString()},t.prototype.moveDown=function(){var t=parseFloat(this.$("v").value),n=1/this.row_count;t=y.accAdd(t,n),this.$("v").value=t.toString()},t.prototype.reBulid=function(t){var n=t.x/this.canvas_width,e=t.y/this.canvas_height,r=new h(n,e),i=h.buffer_to_uv_space(r);this.$("u").value=i.x.toString(),this.$("v").value=i.y.toString(),this.Render()},t.prototype.reset=function(){this.rect_w=this.canvas_width/this.colume_count,this.rect_h=this.canvas_height/this.row_count,this.buffer=new m(this.colume_count,this.row_count);for(var t=0;t<this.colume_count;t++)for(var n=0;n<this.row_count;n++)this.buffer.set(t,n,new u(0,0,0,1))},t.prototype.init=function(){this.reset(),x.drawStar(u.golden,this.buffer),this.Render()},t.prototype.Render=function(){this.drawBuffer(),this.drawUV()},t.prototype.drawBuffer=function(){var t=d.get_context("canvas");t.clearRect(0,0,600,600);for(var n=0;n<this.row_count;n++)for(var e=0;e<this.colume_count;e++)t.beginPath(),t.fillStyle=d.convert(this.buffer.get(e,n)),t.fillRect(e*this.rect_w+1,n*this.rect_h+1,this.rect_w-1,this.rect_h-1),t.stroke()},t.prototype.$=function(t){return document.getElementById(t)},t.prototype.drawPointByGridIndex=function(t){var n=d.get_context("canvas");n.globalCompositeOperation="source-over",n.beginPath(),n.fillStyle="rgba(255,255,0,1)",n.fillRect((t.x+.5)*this.rect_w-3,(t.y+.5)*this.rect_h-3,6,6),n.stroke()},t.prototype.drawRect=function(t){var n=d.get_context("canvas");n.globalCompositeOperation="source-over",n.beginPath(),n.strokeStyle="rgba(255,255,0,1)",n.rect((t.x+.5)*this.rect_w,(t.y+.5)*this.rect_h,this.rect_w,this.rect_h),n.stroke()},t.prototype.drawPointByRectUV=function(t,n){var e=d.get_context("canvas");e.globalCompositeOperation="source-over",e.beginPath(),e.fillStyle="rgba(0,255,0,1)";var r=new h((t.x+.5)*this.rect_w+this.rect_w*n.x,(t.y+.5)*this.rect_h+this.rect_h*n.y);e.fillRect(r.x-3,r.y-3,6,6),e.stroke()},t}())})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,