(()=>{"use strict";const t=function(t,n){this.from=t,this.dir=n};var n=.001;function i(t,i){return Math.abs(t-i)<n}function e(t,n){return t.map((function(t){return t.h.hit(n,t.s)})).filter((function(t){return t.is_hit})).sort((function(t,n){return t.t-n.t}))}const r=function(){function t(t,n,i){this.x=0,this.y=0,this.z=0,this.x=t,this.y=n,this.z=i}return t.reflect=function(n,i){var e=-2*t.dot(n,i);return i.multiply(e).add(n)},t.add=function(n,i){return new t(i.x+n.x,i.y+n.y,i.z+n.z)},t.minus=function(n,i){return new t(n.x-i.x,n.y-i.y,n.z-i.z)},t.multiply=function(n,i){return new t(n.x*i,n.y*i,n.z*i)},t.multiply3=function(n,i){return new t(n.x*i.x,n.y*i.y,n.z*i.z)},t.cross=function(n,i){return new t(n.y*i.z-n.z*i.y,-n.x*i.z+n.z*i.x,n.x*i.y-n.y*i.x)},t.dot=function(t,n){return t.x*n.x+t.y*n.y+t.z*n.z},t.equal=function(t,n){return i(t.x,n.x)&&i(t.y,n.y)&&i(t.z,n.z)},t.prototype.length=function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},t.prototype.normalize=function(){var t=this.length();return this.x=this.x/t,this.y=this.y/t,this.z=this.z/t,this},t.prototype.add=function(n){return t.add(this,n)},t.prototype.minus=function(n){return t.minus(this,n)},t.prototype.multiply=function(n){return t.multiply(this,n)},t.prototype.negative=function(){return t.multiply(this,-1)},t.prototype.clone=function(){return new t(this.x,this.y,this.z)},t.up=new t(0,1,0),t.zero=new t(0,0,0),t}(),s=function(){function i(t){this.color=t}return i.prototype.shading=function(i,s,o,h){var u,a=i.normal,l=(0,(u=-r.dot(s,a))>1?1:u<0?0:u),p=function(i,r,s){var o=r.negative(),h=i.hit_pos.add(o.multiply(n));return 0!=e(s,new t(h,o)).length?.45:1}(i,s,o);return this.color.multiply(l).multiply(p)},i.yellow=new i(new r(1,1,0)),i.red=new i(new r(1,0,0)),i.green=new i(new r(0,1,0)),i.blue=new i(new r(0,0,1)),i.gray=new i(new r(.5,.5,.5)),i.white=new i(new r(1,1,1)),i}(),o=function(){function n(t,n,i){this.z_axis=r.minus(n,t).normalize();var e=r.up;this.x_axis=r.cross(e,this.z_axis).normalize(),this.y_axis=r.cross(this.z_axis,this.x_axis),this.eye=t,this.fov_degree=i}return n.prototype.create_ray_dir=function(t,n,i){var e,r=(e=.5*this.fov_degree,Math.PI*e/180),s=Math.tan(r),o=s*i;return this.z_axis.add(this.x_axis.multiply(t*o)).add(this.y_axis.multiply(n*s))},n.prototype.render=function(n,i){var o=this,h=new r(1,-1,0).normalize(),u=.5/n.h,a=[{x:0,y:0},{x:u,y:u},{x:-u,y:u},{x:-u,y:-u},{x:u,y:-u}];n.render_pixel((function(n,u,l){var p=o.create_ray_dir(n,u,l),f=a.map((function(n){var i=p.add(o.x_axis.multiply(n.x)).add(o.y_axis.multiply(n.y));return new t(o.eye,i.normalize())})).map((function(t){var n=e(i,t);if(0!=n.length){var r=n[0];return r.s.shading(r,h,i,1)}return s.gray.color})),c=a.length;return f.reduce((function(t,n){return t.add(n)}),r.zero).multiply(1/c)}))},n}(),h=function(){function t(t,n,i){this.plane=t,this.w=n,this.h=i}return t.prototype.hit=function(t,n){var i=this.plane.hit(t,n);if(i.is_hit){var e=i.hit_pos,s=e.minus(this.plane.C),o=r.equal(this.plane.N,r.up)?new r(1,0,0):r.up,h=r.cross(o,this.plane.N).normalize(),u=r.cross(h,this.plane.N),a=r.dot(s,h),l=r.dot(s,u);return{is_hit:Math.abs(a)<this.w&&Math.abs(l)<this.h,hit_pos:e,i:t.dir,t:i.t,normal:this.plane.N,s:n}}return{is_hit:!1}},t}(),u=function(){function t(t,n){this.C=t,this.N=n}return t.prototype.is_positive=function(t){var n=r.minus(t,this.C);return r.dot(n,this.N)>0},t.prototype.hit=function(t,n){var e=t.from,s=t.dir,o=r.dot(s,this.N),h=r.dot(r.minus(this.C,e),this.N);if(i(o,0))return{is_hit:!1,hit_pos:null,t:-1};var u=h/o;return{is_hit:u>0,hit_pos:e.add(s.multiply(u)),i:s,t:u,normal:this.N,s:n}},t}(),a=function(){function t(t,n){this.C=t,this.R=n}return t.prototype.hit=function(t,n){var e=t.dir,s=t.from,o=r.dot(e,e),h=2*(r.dot(e,s)-r.dot(e,this.C)),u=h*h-4*o*(r.dot(s,s)-2*r.dot(s,this.C)+r.dot(this.C,this.C)-this.R*this.R);if(i(u,0)){if((c=-h/(2*o))<0)return{is_hit:!1};var a=(f=s.add(e.multiply(c))).minus(this.C).normalize();return{is_hit:!0,hit_pos:f,i:e,t:c,normal:a,s:n}}if(u>0){var l=Math.sqrt(u),p=[(-h-l)/(2*o),(-h+l)/(2*o)].filter((function(t){return t>0}));if(0==p.length)return{is_hit:!1};var f,c=p[0];return a=(f=s.add(e.multiply(c))).minus(this.C).normalize(),{is_hit:!0,hit_pos:f,i:e,t:c,normal:a,s:n}}return{is_hit:!1}},t}(),l=function(){function t(t,n){void 0===t&&(t=320),void 0===n&&(n=240),this.w=320,this.h=240,this.backbuffer=null,this.w=t,this.h=n,this.backbuffer=new OffscreenCanvas(this.w,this.h)}return t.prototype.render_pixel=function(t){for(var n=this.backbuffer.getContext("2d"),i=n.getImageData(0,0,this.w,this.h),e=i.data,r=this.w/this.h,s=0;s<this.h;++s)for(var o=0;o<this.w;++o){var h=4*(o+s*this.w),u=(o+.5)/this.w,a=(s+.5)/this.h,l=t(2*u-1,2*(a=1-a)-1,r),p=l.x,f=l.y,c=l.z,y=1/2.1;p=Math.pow(p,y),f=Math.pow(f,y),c=Math.pow(c,y),e[h++]=Math.round(255*p),e[h++]=Math.round(255*f),e[h++]=Math.round(255*c),e[h]=255}n.putImageData(i,0,0)},t.prototype.show_buffer=function(t){var n=document.getElementById(t);n.style.width=this.w+"px",n.style.height=this.h+"px",n.width=n.clientWidth,n.height=n.clientHeight,n.getContext("bitmaprenderer").transferFromImageBitmap(this.backbuffer.transferToImageBitmap())},t}(),p=function(t,n){this.s=t,this.h=n},f=function(){function i(){}return i.prototype.shading=function(i,o,h,u){if(u>20)return console.log("超過上限"),s.green.color;var a=i.normal,l=i.i,p=r.reflect(l,a),f=i.hit_pos.add(p.multiply(n)),c=e(h,new t(f,p)),y=new r(1,1,1);if(0!=c.length){var w=c[0],d=w.s.shading(w,o,h,++u);return r.multiply3(y,d.multiply(.9))}return r.multiply3(y,s.gray.color.multiply(.9))},i}();new function(){var t=[new p(s.white,new h(new u(r.zero,r.up),16,16))];t.push(new p(s.yellow,new a(new r(6,2,-8),2))),t.push(new p(s.green,new a(new r(-6,2,-8),2))),t.push(new p(s.blue,new a(new r(0,2,-12),2))),t.push(new p(s.yellow,new a(new r(-10,6,0),6))),t.push(new p(new f,new a(new r(0,2,-2),2))),t.push(new p(new f,new a(new r(12,4,-6),4))),t.push(new p(new f,new a(new r(8,4,2),4)));var n=new o(new r(0,20,-20),r.zero,60),i=new l(800,600);n.render(i,t),i.show_buffer("canvas")}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,