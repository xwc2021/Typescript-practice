(()=>{"use strict";const t=function(t,e){this.from=t,this.dir=e};function e(t){return Math.PI*t/180}function n(t,e){return Math.abs(t-e)<.001}function i(t,e){return t.map((function(t){return t.h.hit(e,t.s)})).filter((function(t){return t.is_hit})).sort((function(t,e){return t.t-e.t}))}function r(t,e,n){return t+n*(e-t)}const s=function(){function t(t,e,n){this.x=0,this.y=0,this.z=0,this.x=t,this.y=e,this.z=n}return t.uv=function(e,n){return new t(e,n,0)},t.reflect=function(e,n){var i=-2*t.dot(e,n);return n.multiply(i).add(e)},t.add=function(e,n){return new t(n.x+e.x,n.y+e.y,n.z+e.z)},t.minus=function(e,n){return new t(e.x-n.x,e.y-n.y,e.z-n.z)},t.multiply=function(e,n){return new t(e.x*n,e.y*n,e.z*n)},t.multiply3=function(e,n){return new t(e.x*n.x,e.y*n.y,e.z*n.z)},t.cross=function(e,n){return new t(e.y*n.z-e.z*n.y,-e.x*n.z+e.z*n.x,e.x*n.y-e.y*n.x)},t.dot=function(t,e){return t.x*e.x+t.y*e.y+t.z*e.z},t.equal=function(t,e){return n(t.x,e.x)&&n(t.y,e.y)&&n(t.z,e.z)},t.prototype.length=function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},t.prototype.normalize=function(){var t=this.length();return this.x=this.x/t,this.y=this.y/t,this.z=this.z/t,this},t.prototype.add=function(e){return t.add(this,e)},t.prototype.minus=function(e){return t.minus(this,e)},t.prototype.multiply=function(e){return t.multiply(this,e)},t.prototype.negative=function(){return t.multiply(this,-1)},t.prototype.clone=function(){return new t(this.x,this.y,this.z)},t.up=new t(0,1,0),t.zero=new t(0,0,0),t}(),o=function(){function t(t,e,n,i,r){this.p=new s(t,e,n),this.uv=new s(i,r,0)}return t.build_vertex=function(e,n){return new t(e.x,e.y,e.z,n.x,n.y)},t.prototype.copy=function(){return t.build_vertex(this.p,this.uv)},t}(),a=function(){function t(t,e,n,i){this.xAxis=t,this.yAxis=e,this.zAxis=n,this.position=i}return t.transformPoint=function(t,e){var n=t.xAxis.multiply(e.x),i=t.yAxis.multiply(e.y),r=t.zAxis.multiply(e.z);return t.position.add(n).add(i).add(r)},t.transformVector=function(t,e){var n=t.xAxis.multiply(e.x),i=t.yAxis.multiply(e.y),r=t.zAxis.multiply(e.z);return n.add(i).add(r)},t.transformTransform=function(e,n){return new t(t.transformVector(e,n.xAxis),t.transformVector(e,n.yAxis),t.transformVector(e,n.zAxis),t.transformPoint(e,n.position))},t.rotateByZ=function(n){var i=e(n),r=Math.cos(i),o=Math.sin(i);return new t(new s(r,o,0),new s(-o,r,0),new s(0,0,1),s.zero)},t.rotateByY=function(n){var i=e(n),r=Math.cos(i),o=Math.sin(i),a=new s(o,0,r);return new t(new s(r,0,-o),new s(0,1,0),a,s.zero)},t.rotateByX=function(n){var i=e(n),r=Math.cos(i),o=Math.sin(i);return new t(new s(1,0,0),new s(0,r,o),new s(0,-o,r),new s(0,0,0))},t.offset=function(e,n,i){return new t(new s(1,0,0),new s(0,1,0),new s(0,0,1),new s(e,n,i))},t}(),h=function(){function t(t,e,n){this.v0=t,this.v1=e,this.v2=n}return t.process=function(e,n,i){var h=a.transformPoint(i,e.v0.p),u=a.transformPoint(i,e.v1.p),c=a.transformPoint(i,e.v2.p),l=n.toCameraSpace(h),v=n.toCameraSpace(u),y=n.toCameraSpace(c),f=s.minus(v,l),p=s.minus(y,l),d=s.cross(f,p);d.normalize();var x=l.add(v).add(y).multiply(1/3),m=s.minus(s.zero,x);if(m.normalize(),s.dot(d,m)<=0)return null;for(var w=function(t,e){var n=[],i=function(t,e,n){var i=t.p,s=e.p,a=(n-i.z)/(s.z-i.z),h=r(i.x,s.x,a),u=r(i.y,s.y,a),c=t.uv,l=e.uv,v=r(c.x,l.x,a),y=r(c.y,l.y,a);return console.log("clip"),new o(h,u,n,v,y)},s=function(t,e,r){n[0]=t,n[1]=i(t,e,1),n[2]=i(t,r,1)},a=function(t,e,r){var s=i(r,t,1),o=i(t,e,1);n[0]=r,n[1]=s,n[2]=o,n[3]=r.copy(),n[4]=o,n[5]=e};return t.v0.p.z<1?t.v1.p.z<1?t.v2.p.z<1||s(t.v2,t.v0,t.v1):t.v2.p.z<1?s(t.v1,t.v2,t.v0):a(t.v0,t.v1,t.v2):t.v1.p.z<1?t.v2.p.z<1?s(t.v0,t.v1,t.v2):a(t.v1,t.v2,t.v0):t.v2.p.z<1?a(t.v2,t.v0,t.v1):(n[0]=t.v0,n[1]=t.v1,n[2]=t.v2),n}(new t(o.build_vertex(l,e.v0.uv),o.build_vertex(v,e.v1.uv),o.build_vertex(y,e.v2.uv))),_=[],z=0;z<w.length;++z)_[z]=n.toScreenSpace(w[z].p);return _},t.prototype.process=function(e,n){this.v_s=t.process(this,e,n)},t.prototype.draw=function(t){if(null!=this.v_s)for(var e=this.v_s.length/3,n=1;n<=e;++n){var i=3*n-1;t.moveTo(this.v_s[i].x,this.v_s[i].y),t.lineTo(this.v_s[i-2].x,this.v_s[i-2].y),t.lineTo(this.v_s[i-1].x,this.v_s[i-1].y),t.lineTo(this.v_s[i].x,this.v_s[i].y)}},t}(),u=function(){function t(){this.triangles=[],this.triangles.push(new h(o.build_vertex(new s(-10,-10,-10),s.uv(0,0)),o.build_vertex(new s(10,10,-10),s.uv(1,1)),o.build_vertex(new s(10,-10,-10),s.uv(1,0)))),this.triangles.push(new h(o.build_vertex(new s(-10,-10,-10),s.uv(0,0)),o.build_vertex(new s(-10,10,-10),s.uv(0,1)),o.build_vertex(new s(10,10,-10),s.uv(1,1))));for(var t=[a.rotateByY(90),a.rotateByY(180),a.rotateByY(270),a.rotateByX(90),a.rotateByX(-90)],e=0;e<t.length;++e){var n=t[e];this.triangles.push(new h(o.build_vertex(a.transformPoint(n,new s(-10,-10,-10)),s.uv(0,0)),o.build_vertex(a.transformPoint(n,new s(10,10,-10)),s.uv(1,1)),o.build_vertex(a.transformPoint(n,new s(10,-10,-10)),s.uv(1,0)))),this.triangles.push(new h(o.build_vertex(a.transformPoint(n,new s(-10,-10,-10)),s.uv(0,0)),o.build_vertex(a.transformPoint(n,new s(-10,10,-10)),s.uv(0,1)),o.build_vertex(a.transformPoint(n,new s(10,10,-10)),s.uv(1,1))))}}return t.prototype.update=function(t,e){this.triangles_after_clip=this.triangles;for(var n=0;n<this.triangles_after_clip.length;++n)this.triangles_after_clip[n].process(t,e)},t.prototype.draw=function(t){t.globalCompositeOperation="destination-over",t.strokeStyle="rgba(255,0,0,1)",t.beginPath();for(var e=0;e<this.triangles_after_clip.length;++e)this.triangles_after_clip[e].draw(t);t.stroke()},t}(),c=function(){function e(t){this.color=t}return e.prototype.shading=function(e,n,r,o){var a,h=e.normal,u=(0,(a=-s.dot(n,h))>1?1:a<0?0:a),c=function(e,n,r){var s=n.negative(),o=e.hit_pos.add(s.multiply(.001));return 0!=i(r,new t(o,s)).length?.45:1}(e,n,r);return this.color.multiply(u).multiply(c)},e.yellow=new e(new s(1,1,0)),e.red=new e(new s(1,0,0)),e.green=new e(new s(0,1,0)),e.blue=new e(new s(0,0,1)),e.gray=new e(new s(.5,.5,.5)),e.white=new e(new s(1,1,1)),e}(),l=function(){function n(t,n,i,r,o){this.moveEye=function(t,e){this.eye=s.add(this.eye,e.multiply(t))},this.toScreenSpace=function(t){var n=t.z,i=.5*e(this.fov_degree),r=1/Math.tan(i),o=1/(this.ratio*Math.tan(i)),a=t.x*o/n,h=t.y*r/n,u=this.halfW*a+this.screenCenterX,c=-this.halfH*h+this.screenCenterY;return new s(u,c,n)},this.ratio=r/o,this.screenW=r,this.screenH=o,this.screenCenterX=.5*this.screenW,this.screenCenterY=.5*this.screenH,this.halfW=.5*this.screenW,this.halfH=.5*this.screenH,this.z_axis=s.minus(n,t).normalize();var a=s.up;this.x_axis=s.cross(a,this.z_axis).normalize(),this.y_axis=s.cross(this.z_axis,this.x_axis),this.eye=t,this.fov_degree=i}return n.prototype.addPitch=function(t){},n.prototype.addYaw=function(t){},n.prototype.create_ray_dir=function(t,n,i){var r=e(.5*this.fov_degree),s=Math.tan(r),o=s*i;return this.z_axis.add(this.x_axis.multiply(t*o)).add(this.y_axis.multiply(n*s))},n.prototype.toCameraSpace=function(t){var e=t.minus(this.eye);return new s(s.dot(e,this.x_axis),s.dot(e,this.y_axis),s.dot(e,this.z_axis))},n.prototype.render=function(e,n){var r=this,o=new s(1,-1,0).normalize(),a=.5/e.h,h=[{x:0,y:0},{x:a,y:a},{x:-a,y:a},{x:-a,y:-a},{x:a,y:-a}];e.render_pixel((function(e,a,u){var l=r.create_ray_dir(e,a,u),v=h.map((function(e){var n=l.add(r.x_axis.multiply(e.x)).add(r.y_axis.multiply(e.y));return new t(r.eye,n.normalize())})).map((function(t){var e=i(n,t);if(0!=e.length){var r=e[0];return r.s.shading(r,o,n,1)}return c.gray.color})),y=h.length;return v.reduce((function(t,e){return t.add(e)}),s.zero).multiply(1/y)}))},n}();new(function(){function t(){var t=this;this.cameraIndex_view=1,this.cameraIndex_control=0,this.camera=null,this.screenWidth=800,this.screenHeight=600,this.box=null,window.onload=function(){t.init()},document.onkeydown=this.keyProc.bind(this)}return t.prototype.init=function(){var t=document.getElementById("canvas");t.style.width=this.screenWidth+"px",t.style.height=this.screenHeight+"px",t.width=t.clientWidth,t.height=t.clientHeight,this.ctx=t.getContext("2d"),this.box=new u,this.camera=new l(new s(0,50,-200),new s(0,0,0),60,this.screenWidth,this.screenHeight),this.start()},t.prototype.start=function(){var t=this;this.stop(),this.sum_t=0;var e=new Date;this.last_t=e.getTime(),this.thandle=window.setInterval((function(){t.drawScene()}),16)},t.prototype.resume=function(){var t=this,e=new Date;this.last_t=e.getTime(),this.thandle=window.setInterval((function(){t.drawScene()}),16)},t.prototype.stop=function(){window.clearInterval(this.thandle),this.thandle=null},t.prototype.drawScene=function(){var t=(new Date).getTime(),e=t-this.last_t;this.last_t=t,this.sum_t=this.sum_t+e,this.ctx.clearRect(0,0,this.screenWidth,this.screenHeight),this.ctx.beginPath(),this.ctx.fillStyle="rgba(180,30,15,0.1)",this.ctx.fillRect(0,0,this.screenWidth,this.screenHeight);var n=a.offset(0,0,0),i=this.sum_t/1e3*15%360,r=a.rotateByY(i),s=a.transformTransform(n,r);this.box.update(this.camera,s),this.box.draw(this.ctx),n=a.offset(150,0,0),r=a.rotateByY(i),s=a.transformTransform(r,n),this.box.update(this.camera,s),this.box.draw(this.ctx)},t.prototype.keyProc=function(t){switch(t.keyCode){case 87:this.camera.moveEye(1,this.camera.z_axis);break;case 82:this.camera.moveEye(-1,this.camera.z_axis);break;case 69:this.camera.moveEye(1,this.camera.y_axis);break;case 68:this.camera.moveEye(-1,this.camera.y_axis);break;case 83:this.camera.moveEye(-1,this.camera.x_axis);break;case 70:this.camera.moveEye(1,this.camera.x_axis);break;case 38:this.camera.addPitch(.1);break;case 40:this.camera.addPitch(-.1);break;case 37:this.camera.addYaw(-.1);break;case 39:this.camera.addYaw(.1)}},t}())})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,