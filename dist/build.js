(()=>{"use strict";const t=function(t,n){this.from=t,this.dir=n},n=function(){function t(t,n,e){this.x=0,this.y=0,this.z=0,this.x=t,this.y=n,this.z=e}return t.calculate_normal=function(n,e,i){var r=t.minus(e,n),s=t.minus(i,n);return t.cross(r,s).normalize()},t.calculate_center=function(t,n,e){return t.add(n).add(e).multiply(1/3)},t.uv=function(n,e){return new t(n,e,0)},t.reflect=function(n,e){var i=-2*t.dot(n,e);return e.multiply(i).add(n)},t.add=function(n,e){return new t(e.x+n.x,e.y+n.y,e.z+n.z)},t.minus=function(n,e){return new t(n.x-e.x,n.y-e.y,n.z-e.z)},t.multiply=function(n,e){return new t(n.x*e,n.y*e,n.z*e)},t.multiply3=function(n,e){return new t(n.x*e.x,n.y*e.y,n.z*e.z)},t.cross=function(n,e){return new t(n.y*e.z-n.z*e.y,-n.x*e.z+n.z*e.x,n.x*e.y-n.y*e.x)},t.dot=function(t,n){return t.x*n.x+t.y*n.y+t.z*n.z},t.equal=function(t,n){return o(t.x,n.x)&&o(t.y,n.y)&&o(t.z,n.z)},t.lerp=function(n,e,i){return new t(c(n.x,e.x,i),c(n.y,e.y,i),c(n.z,e.z,i))},t.prototype.length=function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},t.prototype.normalize=function(){var t=this.length();return this.x=this.x/t,this.y=this.y/t,this.z=this.z/t,this},t.prototype.add=function(n){return t.add(this,n)},t.prototype.minus=function(n){return t.minus(this,n)},t.prototype.multiply=function(n){return t.multiply(this,n)},t.prototype.negative=function(){return t.multiply(this,-1)},t.prototype.clone=function(){return new t(this.x,this.y,this.z)},t.up=new t(0,1,0),t.zero=new t(0,0,0),t}(),e=function(){function t(t,n,e,i){this.xAxis=t,this.yAxis=n,this.zAxis=e,this.position=i}return t.transformPoint=function(t,n){var e=t.xAxis.multiply(n.x),i=t.yAxis.multiply(n.y),r=t.zAxis.multiply(n.z);return t.position.add(e).add(i).add(r)},t.transformVector=function(t,n){var e=t.xAxis.multiply(n.x),i=t.yAxis.multiply(n.y),r=t.zAxis.multiply(n.z);return e.add(i).add(r)},t.transformTransform=function(n,e){return new t(t.transformVector(n,e.xAxis),t.transformVector(n,e.yAxis),t.transformVector(n,e.zAxis),t.transformPoint(n,e.position))},t.rotateByZ=function(e){var i=s(e),r=Math.cos(i),o=Math.sin(i);return new t(new n(r,o,0),new n(-o,r,0),new n(0,0,1),n.zero)},t.rotateByY=function(e){var i=s(e),r=Math.cos(i),o=Math.sin(i),a=new n(o,0,r);return new t(new n(r,0,-o),new n(0,1,0),a,n.zero)},t.rotateByX=function(e){var i=s(e),r=Math.cos(i),o=Math.sin(i);return new t(new n(1,0,0),new n(0,r,o),new n(0,-o,r),new n(0,0,0))},t.offset=function(e,i,r){return new t(new n(1,0,0),new n(0,1,0),new n(0,0,1),new n(e,i,r))},t}(),i=function(){function t(t,n){this.C=t,this.N=n}return t.prototype.is_positive=function(t){var e=n.minus(t,this.C);return n.dot(e,this.N)>0},t.prototype.hit=function(n,e){var i=t.hit(n,this);return i.is_hit&&(i.s=e),i},t.hit=function(t,e){var i=t.from,r=t.dir,s=n.dot(r,e.N),a=n.dot(n.minus(e.C,i),e.N);if(o(s,0))return{is_hit:!1,hit_pos:null,t:-1};var c=a/s;return{is_hit:c>0,hit_pos:i.add(r.multiply(c)),i:r,t:c,normal:e.N}},t}(),r=function(){function t(t,n,e){this.v0=t,this.v1=n,this.v2=e}return t.MVP_backface_culling_clipping=function(i,r,s){var o=e.transformPoint(s,i.v0.p),a=e.transformPoint(s,i.v1.p),c=e.transformPoint(s,i.v2.p),h=r.toCameraSpace(o),u=r.toCameraSpace(a),l=r.toCameraSpace(c),p=r.toProjectionSpace(h),f=r.toProjectionSpace(u),y=r.toProjectionSpace(l),v=n.calculate_normal(h,u,l),w=n.minus(n.zero,n.calculate_center(h,u,l)).normalize();if(n.dot(v,w)<=0)return console.log("culling"),[];var d=i.v0.clone().update_p(p).update_w(h.z),m=i.v1.clone().update_p(f).update_w(u.z),x=i.v2.clone().update_p(y).update_w(l.z);return t.clip_in_Projection_Space(d,m,x,r)},t.clip=function(t,n,e,i,r){for(var s=[],o=0,a=t;o<a.length;o++)for(var c=0,u=h(a[o],n,e,i,r);c<u.length;c++){var l=u[c];s.push(l)}return s},t.clip_in_Projection_Space=function(e,r,s,o){var a=[new t(e,r,s)],c=t.clip(a,(function(t){return t.v0.p.z<o.Nc}),(function(t){return t.v1.p.z<o.Nc}),(function(t){return t.v2.p.z<o.Nc}),new i(new n(0,0,o.Nc),new n(0,0,-1)));return t.clip(c,(function(t){return t.v0.p.z>o.Fc}),(function(t){return t.v1.p.z>o.Fc}),(function(t){return t.v2.p.z>o.Fc}),new i(new n(0,0,o.Fc),new n(0,0,-1)))},t.process=function(n,e,i){for(var r=[],s=0,o=t.MVP_backface_culling_clipping(n,e,i);s<o.length;s++){var a=o[s],c=e.toNDC(a.v0.p,a.v0.w),h=e.toNDC(a.v1.p,a.v1.w),u=e.toNDC(a.v2.p,a.v2.w),l=e.toScreenSpace(c),p=e.toScreenSpace(h),f=e.toScreenSpace(u);r.push(l),r.push(p),r.push(f)}return r},t.prototype.process=function(n,e){this.v_s=t.process(this,n,e)},t.prototype.draw=function(t){if(null!=this.v_s)for(var n=this.v_s.length/3,e=1;e<=n;++e){var i=3*e-1;t.moveTo(this.v_s[i].x,this.v_s[i].y),t.lineTo(this.v_s[i-2].x,this.v_s[i-2].y),t.lineTo(this.v_s[i-1].x,this.v_s[i-1].y),t.lineTo(this.v_s[i].x,this.v_s[i].y)}},t}();function s(t){return Math.PI*t/180}function o(t,n){return Math.abs(t-n)<.001}function a(t,n){return t.map((function(t){return t.h.hit(n,t.s)})).filter((function(t){return t.is_hit})).sort((function(t,n){return t.t-n.t}))}function c(t,n,e){return t+e*(n-t)}function h(e,s,o,a,c){var h=[],l=function(e,r){var s=n.minus(r.p,e.p),o=new t(e.p,s),a=(i.hit(o,c).hit_pos.z-e.p.z)/s.z;return u.lerp(e,r,a)},p=function(t,n,e){h[0]=new r(t,l(t,n),l(t,e))},f=function(t,n,e){var i=l(e,t),s=l(t,n);h[0]=new r(e,i,s),h[1]=new r(e,s,n)};return s(e)?o(e)?a(e)||p(e.v2,e.v0,e.v1):a(e)?p(e.v1,e.v2,e.v0):f(e.v0,e.v1,e.v2):o(e)?a(e)?p(e.v0,e.v1,e.v2):f(e.v1,e.v2,e.v0):a(e)?f(e.v2,e.v0,e.v1):h[0]=e,h}const u=function(){function t(t,n,e,i,r){this.p=t,this.n=n,this.w=e,this.u=i,this.v=r}return t.build_vertex=function(n,e,i,r,s){return new t(n,e,i,r,s)},t.lerp=function(e,i,r){return new t(n.lerp(e.p,i.p,r),n.lerp(e.n,i.n,r),c(e.w,i.w,r),c(e.u,i.u,r),c(e.v,i.v,r))},t.prototype.clone=function(){return new t(this.p.clone(),this.n.clone(),this.w,this.u,this.v)},t.prototype.update_p=function(t){return this.p=t,this},t.prototype.update_w=function(t){return this.w=t,this},t}(),l=function(){function t(){this.triangles=[];var t=new n(0,0,-1);this.triangles.push(new r(new u(new n(-10,-10,-10),t,1,0,0),new u(new n(10,10,-10),t,1,1,1),new u(new n(10,-10,-10),t,1,1,0))),this.triangles.push(new r(new u(new n(-10,-10,-10),t,1,0,0),new u(new n(-10,10,-10),t,1,0,1),new u(new n(10,10,-10),t,1,1,1)));for(var i=[e.rotateByY(90),e.rotateByY(180),e.rotateByY(270),e.rotateByX(90),e.rotateByX(-90)],s=0;s<i.length;++s){var o=i[s],a=e.transformPoint(o,t);this.triangles.push(new r(u.build_vertex(e.transformPoint(o,new n(-10,-10,-10)),a,1,0,0),u.build_vertex(e.transformPoint(o,new n(10,10,-10)),a,1,1,1),u.build_vertex(e.transformPoint(o,new n(10,-10,-10)),a,1,1,0))),this.triangles.push(new r(u.build_vertex(e.transformPoint(o,new n(-10,-10,-10)),a,1,0,0),u.build_vertex(e.transformPoint(o,new n(-10,10,-10)),a,1,0,1),u.build_vertex(e.transformPoint(o,new n(10,10,-10)),a,1,1,1)))}}return t.prototype.update=function(t,n){this.triangles_after_clip=this.triangles;for(var e=0;e<this.triangles_after_clip.length;++e)this.triangles_after_clip[e].process(t,n)},t.prototype.draw=function(t){t.globalCompositeOperation="destination-over",t.strokeStyle="rgba(255,0,0,1)",t.beginPath();for(var n=0;n<this.triangles_after_clip.length;++n)this.triangles_after_clip[n].draw(t);t.stroke()},t}(),p=function(){function e(t){this.color=t}return e.prototype.shading=function(e,i,r,s){var o,c=e.normal,h=(0,(o=-n.dot(i,c))>1?1:o<0?0:o),u=function(n,e,i){var r=e.negative(),s=n.hit_pos.add(r.multiply(.001));return 0!=a(i,new t(s,r)).length?.45:1}(e,i,r);return this.color.multiply(h).multiply(u)},e.yellow=new e(new n(1,1,0)),e.red=new e(new n(1,0,0)),e.green=new e(new n(0,1,0)),e.blue=new e(new n(0,0,1)),e.gray=new e(new n(.5,.5,.5)),e.white=new e(new n(1,1,1)),e}(),f=function(){function e(t,e,i,r,s,o,a){this.moveEye=function(t,e){this.eye=n.add(this.eye,e.multiply(t))},this.ratio=r/s,this.screenW=r,this.screenH=s,this.screenCenterX=.5*this.screenW,this.screenCenterY=.5*this.screenH,this.halfW=.5*this.screenW,this.halfH=.5*this.screenH,this.z_axis=n.minus(e,t).normalize();var c=n.up;this.x_axis=n.cross(c,this.z_axis).normalize(),this.y_axis=n.cross(this.z_axis,this.x_axis),this.eye=t,this.fov_degree=i,this.N=o,this.F=a,this.a=a/(a-o),this.b=-o*a/(a-o),this.Nc=o*this.a+this.b,this.Fc=a*this.a+this.b,console.log(this.a,this.b),console.log(this.Nc,this.Fc)}return e.prototype.addPitch=function(t){},e.prototype.addYaw=function(t){},e.prototype.create_ray_dir=function(t,n,e){var i=s(.5*this.fov_degree),r=Math.tan(i),o=r*e;return this.z_axis.add(this.x_axis.multiply(t*o)).add(this.y_axis.multiply(n*r))},e.prototype.toCameraSpace=function(t){var e=t.minus(this.eye);return new n(n.dot(e,this.x_axis),n.dot(e,this.y_axis),n.dot(e,this.z_axis))},e.prototype.toProjectionSpace=function(t){var e=.5*s(this.fov_degree),i=1/Math.tan(e),r=1/(this.ratio*Math.tan(e));return new n(t.x*r,t.y*i,t.z*this.a+this.b)},e.prototype.toNDC=function(t,n){var e=1/n;return t.multiply(e)},e.prototype.toScreenSpace=function(t){var e=this.halfW*t.x+this.screenCenterX,i=-this.halfH*t.y+this.screenCenterY;return new n(e,i,t.z)},e.prototype.render=function(e,i){var r=this,s=new n(1,-1,0).normalize(),o=.5/e.h,c=[{x:0,y:0},{x:o,y:o},{x:-o,y:o},{x:-o,y:-o},{x:o,y:-o}];e.render_pixel((function(e,o,h){var u=r.create_ray_dir(e,o,h),l=c.map((function(n){var e=u.add(r.x_axis.multiply(n.x)).add(r.y_axis.multiply(n.y));return new t(r.eye,e.normalize())})).map((function(t){var n=a(i,t);if(0!=n.length){var e=n[0];return e.s.shading(e,s,i,1)}return p.gray.color})),f=c.length;return l.reduce((function(t,n){return t.add(n)}),n.zero).multiply(1/f)}))},e}();new(function(){function t(){var t=this;this.cameraIndex_view=1,this.cameraIndex_control=0,this.camera=null,this.screenWidth=800,this.screenHeight=600,this.box=null,window.onload=function(){t.init()},document.onkeydown=this.keyProc.bind(this)}return t.prototype.init=function(){var t=document.getElementById("canvas");t.style.width=this.screenWidth+"px",t.style.height=this.screenHeight+"px",t.width=t.clientWidth,t.height=t.clientHeight,this.ctx=t.getContext("2d"),this.box=new l,this.camera=new f(new n(0,50,-200),new n(0,0,0),60,this.screenWidth,this.screenHeight,100,500),this.start()},t.prototype.start=function(){var t=this;this.stop(),this.sum_t=0;var n=new Date;this.last_t=n.getTime(),this.thandle=window.setInterval((function(){t.drawScene()}),16)},t.prototype.resume=function(){var t=this,n=new Date;this.last_t=n.getTime(),this.thandle=window.setInterval((function(){t.drawScene()}),16)},t.prototype.stop=function(){window.clearInterval(this.thandle),this.thandle=null},t.prototype.drawScene=function(){var t=(new Date).getTime(),n=t-this.last_t;this.last_t=t,this.sum_t=this.sum_t+n,this.ctx.clearRect(0,0,this.screenWidth,this.screenHeight),this.ctx.beginPath(),this.ctx.fillStyle="rgba(180,30,15,0.1)",this.ctx.fillRect(0,0,this.screenWidth,this.screenHeight);var i=e.offset(0,0,0),r=this.sum_t/1e3*15%360,s=e.rotateByY(r),o=e.transformTransform(i,s);this.box.update(this.camera,o),this.box.draw(this.ctx)},t.prototype.keyProc=function(t){switch(t.keyCode){case 87:this.camera.moveEye(1,this.camera.z_axis);break;case 82:this.camera.moveEye(-1,this.camera.z_axis);break;case 69:this.camera.moveEye(1,this.camera.y_axis);break;case 68:this.camera.moveEye(-1,this.camera.y_axis);break;case 83:this.camera.moveEye(-1,this.camera.x_axis);break;case 70:this.camera.moveEye(1,this.camera.x_axis);break;case 38:this.camera.addPitch(.1);break;case 40:this.camera.addPitch(-.1);break;case 37:this.camera.addYaw(-.1);break;case 39:this.camera.addYaw(.1)}},t}())})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,