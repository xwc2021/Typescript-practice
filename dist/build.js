(()=>{"use strict";const t=function(t,e){this.from=t,this.dir=e},e=function(){function t(t,e,n){this.x=0,this.y=0,this.z=0,this.x=t,this.y=e,this.z=n}return t.min_max=function(e,n,i){return{min:new t(Math.min(Math.min(e.x,n.x),i.x),Math.min(Math.min(e.y,n.y),i.y),Math.min(Math.min(e.z,n.z),i.z)),max:new t(Math.max(Math.max(e.x,n.x),i.x),Math.max(Math.max(e.y,n.y),i.y),Math.max(Math.max(e.z,n.z),i.z))}},t.calculate_normal=function(e,n,i){var r=t.minus(n,e),o=t.minus(i,e);return t.cross(r,o).normalize()},t.calculate_center=function(t,e,n){return t.add(e).add(n).multiply(1/3)},t.uv=function(e,n){return new t(e,n,0)},t.reflect=function(e,n){var i=-2*t.dot(e,n);return n.multiply(i).add(e)},t.add=function(e,n){return new t(n.x+e.x,n.y+e.y,n.z+e.z)},t.minus=function(e,n){return new t(e.x-n.x,e.y-n.y,e.z-n.z)},t.multiply=function(e,n){return new t(e.x*n,e.y*n,e.z*n)},t.multiply3=function(e,n){return new t(e.x*n.x,e.y*n.y,e.z*n.z)},t.cross=function(e,n){return new t(e.y*n.z-e.z*n.y,-e.x*n.z+e.z*n.x,e.x*n.y-e.y*n.x)},t.dot=function(t,e){return t.x*e.x+t.y*e.y+t.z*e.z},t.equal=function(t,e){return p(t.x,e.x)&&p(t.y,e.y)&&p(t.z,e.z)},t.lerp=function(e,n,i){return new t(y(e.x,n.x,i),y(e.y,n.y,i),y(e.z,n.z,i))},t.prototype.length=function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},t.prototype.normalize=function(){var t=this.length();return this.x=this.x/t,this.y=this.y/t,this.z=this.z/t,this},t.prototype.add=function(e){return t.add(this,e)},t.prototype.minus=function(e){return t.minus(this,e)},t.prototype.multiply=function(e){return t.multiply(this,e)},t.prototype.negative=function(){return t.multiply(this,-1)},t.prototype.Vector2D=function(){return this.z=0,this},t.prototype.clone=function(){return new t(this.x,this.y,this.z)},t.up=new t(0,1,0),t.zero=new t(0,0,0),t}(),n=function(t,e){this.p=t,this.w=e},i=function(){function t(t,i){this.from=t,this.dir=new n(e.minus(i.p,t.p),i.w-t.w)}return t.prototype.t_when_x_equal_w=function(){return(this.from.w-this.from.p.x)/(this.dir.p.x-this.dir.w)},t.prototype.t_when_y_equal_w=function(){return(this.from.w-this.from.p.y)/(this.dir.p.y-this.dir.w)},t.prototype.t_when_z_equal_w=function(){return(this.from.w-this.from.p.z)/(this.dir.p.z-this.dir.w)},t.prototype.t_when_x_equal_minus_w=function(){return-(this.from.w+this.from.p.x)/(this.dir.w+this.dir.p.x)},t.prototype.t_when_y_equal_minus_w=function(){return-(this.from.w+this.from.p.y)/(this.dir.w+this.dir.p.y)},t.prototype.t_when_z_equal_zero_w=function(){return-this.from.p.z/this.dir.p.z},t}(),r=function(){function t(t,e){this.C=t,this.N=e}return t.prototype.is_positive=function(t){var n=e.minus(t,this.C);return e.dot(n,this.N)>0},t.prototype.hit=function(e,n){var i=t.hit(e,this);return i.is_hit&&(i.s=n),i},t.hit=function(t,n){var i=t.from,r=t.dir,o=e.dot(r,n.N),s=e.dot(e.minus(n.C,i),n.N);if(p(o,0))return{is_hit:!1,hit_pos:null,t:-1};var a=s/o;return{is_hit:a>0,hit_pos:i.add(r.multiply(a)),i:r,t:a,normal:n.N}},t}(),o=function(){function t(t,e,n,i){this.xAxis=t,this.yAxis=e,this.zAxis=n,this.position=i}return t.transformPoint=function(t,e){var n=t.xAxis.multiply(e.x),i=t.yAxis.multiply(e.y),r=t.zAxis.multiply(e.z);return t.position.add(n).add(i).add(r)},t.transformVector=function(t,e){var n=t.xAxis.multiply(e.x),i=t.yAxis.multiply(e.y),r=t.zAxis.multiply(e.z);return n.add(i).add(r)},t.transformTransform=function(e,n){return new t(t.transformVector(e,n.xAxis),t.transformVector(e,n.yAxis),t.transformVector(e,n.zAxis),t.transformPoint(e,n.position))},t.rotateByZ=function(n){var i=c(n),r=Math.cos(i),o=Math.sin(i);return new t(new e(r,o,0),new e(-o,r,0),new e(0,0,1),e.zero)},t.rotateByY=function(n){var i=c(n),r=Math.cos(i),o=Math.sin(i),s=new e(o,0,r);return new t(new e(r,0,-o),new e(0,1,0),s,e.zero)},t.rotateByX=function(n){var i=c(n),r=Math.cos(i),o=Math.sin(i);return new t(new e(1,0,0),new e(0,r,o),new e(0,-o,r),new e(0,0,0))},t.offset=function(n,i,r){return new t(new e(1,0,0),new e(0,1,0),new e(0,0,1),new e(n,i,r))},t}(),s=function(){function t(e,n,i,r){this.add=function(e){return new t(this.r+e.r,this.g+e.g,this.b+e.b,1)},this.r=e,this.g=n,this.b=i,this.a=r}return t.lerp=function(e,n,i){return new t(y(e.r,n.r,i),y(e.g,n.g,i),y(e.b,n.b,i),1)},t.prototype.multiply=function(e){return new t(this.r*e,this.g*e,this.b*e,1)},t.prototype.toString=function(){return"( "+this.r+" , "+this.g+" , "+this.b+" )"},t.yellow=new t(1,1,0,1),t.black=new t(0,0,0,1),t}(),a=function(){function t(){}return t.clear=function(e,n){t.color_buffer.clear(e),t.z_buffer.clear(n)},t.show=function(e){e.set_pixel((function(e,n){return t.color_buffer.get(e,n)})),e.show_buffer("canvas")},t.clip_helper=function(t,e,n,i,r){for(var o=[],s=0,a=t;s<a.length;s++)for(var h=0,u=v(a[s],e,n,i,r);h<u.length;h++){var c=u[h];o.push(c)}return o},t.clip_in_Projection_Space=function(e,n,i,r){var o=[new h(e,n,i)],s=t.clip_helper(o,(function(t){return t.v0.w<t.v0.p.z}),(function(t){return t.v1.w<t.v1.p.z}),(function(t){return t.v2.w<t.v2.p.z}),f.Far);return s=t.clip_helper(s,(function(t){return 0>t.v0.p.z}),(function(t){return 0>t.v1.p.z}),(function(t){return 0>t.v2.p.z}),f.Near),s=t.clip_helper(s,(function(t){return t.v0.w<t.v0.p.x}),(function(t){return t.v1.w<t.v1.p.x}),(function(t){return t.v2.w<t.v2.p.x}),f.Right),s=t.clip_helper(s,(function(t){return-t.v0.w>t.v0.p.x}),(function(t){return-t.v1.w>t.v1.p.x}),(function(t){return-t.v2.w>t.v2.p.x}),f.Right),s=t.clip_helper(s,(function(t){return t.v0.w<t.v0.p.y}),(function(t){return t.v1.w<t.v1.p.y}),(function(t){return t.v2.w<t.v2.p.y}),f.Top),t.clip_helper(s,(function(t){return-t.v0.w>t.v0.p.y}),(function(t){return-t.v1.w>t.v1.p.y}),(function(t){return-t.v2.w>t.v2.p.y}),f.Bottom)},t.MVP_backface_culling_clipping=function(n,i,r){var s=o.transformPoint(r,n.v0.p),a=o.transformPoint(r,n.v1.p),h=o.transformPoint(r,n.v2.p),u=i.toCameraSpace(s),c=i.toCameraSpace(a),f=i.toCameraSpace(h),p=i.toProjectionSpace(u),l=i.toProjectionSpace(c),w=i.toProjectionSpace(f),y=e.calculate_normal(u,c,f),v=e.minus(e.zero,e.calculate_center(u,c,f)).normalize();if(e.dot(y,v)<=0)return[];var x=n.v0.clone().update_p(p).update_w(u.z),m=n.v1.clone().update_p(l).update_w(c.z),_=n.v2.clone().update_p(w).update_w(f.z);return t.clip_in_Projection_Space(x,m,_,i)},t.process=function(n,i,r){for(var o=[],a=0,u=t.MVP_backface_culling_clipping(n,i,r);a<u.length;a++){var c=u[a],f=i.toNDC(c.v0.p,c.v0.w),p=i.toNDC(c.v1.p,c.v1.w),l=i.toNDC(c.v2.p,c.v2.w),w=i.toScreenSpace(f),y=i.toScreenSpace(p),v=i.toScreenSpace(l);o.push(w),o.push(y),o.push(v);for(var x=e.min_max(w,y,v),m=x.min,_=x.max,d=Math.floor(m.x),g=Math.floor(_.x),b=Math.floor(m.y),z=Math.floor(_.y),M=d;M<=g;++M)for(var S=b;S<=z;++S){var k=new e(M+.5,S+.5,0),P=h["calculate_α_β_γ"](w,y,v,k),N=P.α,C=P.β,I=P.γ;if(h.is_in_triangle(N,C,I)){t.color_buffer.set(M,S,s.yellow);var A=h.interpolation(I,N,C,f.z,p.z,l.z);if(!(A>t.z_buffer.get(M,S))){t.z_buffer.set(M,S,A);h.interpolation(I,N,C,1/c.v0.w,1/c.v1.w,1/c.v2.w);h.interpolation(I,N,C,c.v0.u/c.v0.w,c.v1.u/c.v1.w,c.v2.u/c.v2.w),h.interpolation(I,N,C,c.v0.v/c.v0.w,c.v1.v/c.v1.w,c.v2.v/c.v2.w)}}}}return o},t}(),h=function(){function n(t,e,n){this.v0=t,this.v1=e,this.v2=n}return n.calculate_α_β_γ=function(n,i,o,s){var a=e.minus(s,n),h=e.minus(i,n),u=e.minus(o,n),c=new e(-h.y,h.x,0),f=new t(s,u.multiply(-1)),p=r.hit(f,new r(n,c)).hit_pos,l=e.minus(p,n),w=e.minus(a,l),y=l.x/h.x,v=w.x/u.x;return{α:y,β:v,γ:1-y-v}},n.is_in_triangle=function(t,e,n){return t>=0&&e>=0&&n>=0},n.interpolation=function(t,e,n,i,r,o){return i*t+r*e+o*n},n.prototype.process=function(t,e){this.v_s=a.process(this,t,e)},n.prototype.draw=function(t){if(null!=this.v_s)for(var e=this.v_s.length/3,n=1;n<=e;++n){var i=3*n-1;t.moveTo(this.v_s[i].x,this.v_s[i].y),t.lineTo(this.v_s[i-2].x,this.v_s[i-2].y),t.lineTo(this.v_s[i-1].x,this.v_s[i-1].y),t.lineTo(this.v_s[i].x,this.v_s[i].y)}},n}(),u=function(){function t(e,n){this.multiply=function(e){return new t(this.x*e,this.y*e)},this.toString=function(){return"( "+this.x+" , "+this.y+" )"},this.x=e,this.y=n}return t.prototype.plus=function(e){return new t(this.x+e.x,this.y+e.y)},t}();function c(t){return Math.PI*t/180}var f;function p(t,e){return Math.abs(t-e)<.001}function l(t,e,n){return t>n?n:t<e?e:t}function w(t,e){return t.map((function(t){return t.h.hit(e,t.s)})).filter((function(t){return t.is_hit})).sort((function(t,e){return t.t-e.t}))}function y(t,e,n){return t+n*(e-t)}function v(t,e,n,r,o){var s=[],a=function(t,e){var n=new i(t.get_Vector4D(),e.get_Vector4D()),r=0;switch(o){case f.Far:r=n.t_when_z_equal_w();break;case f.Near:r=n.t_when_z_equal_zero_w();break;case f.Right:r=n.t_when_x_equal_w();break;case f.Left:r=n.t_when_x_equal_minus_w();break;case f.Top:r=n.t_when_y_equal_w();break;case f.Bottom:r=n.t_when_y_equal_minus_w()}return x.lerp(t,e,r)},u=function(t,e,n){s[0]=new h(t,a(t,e),a(t,n))},c=function(t,e,n){var i=a(n,t),r=a(t,e);s[0]=new h(n,i,r),s[1]=new h(n,r,e)};return e(t)?n(t)?r(t)||u(t.v2,t.v0,t.v1):r(t)?u(t.v1,t.v2,t.v0):c(t.v0,t.v1,t.v2):n(t)?r(t)?u(t.v0,t.v1,t.v2):c(t.v1,t.v2,t.v0):r(t)?c(t.v2,t.v0,t.v1):s[0]=t,s}!function(t){t[t.Near=0]="Near",t[t.Far=1]="Far",t[t.Right=2]="Right",t[t.Left=3]="Left",t[t.Top=4]="Top",t[t.Bottom=5]="Bottom"}(f||(f={})),function(){function t(){}t.accDiv=function(t,e){var n=0,i=0;try{n=t.toString().split(".")[1].length}catch(t){}try{i=e.toString().split(".")[1].length}catch(t){}return Number(t.toString().replace(".",""))/Number(e.toString().replace(".",""))*Math.pow(10,i-n)},t.accAdd=function(t,e){var n,i,r,o;try{n=t.toString().split(".")[1].length}catch(t){n=0}try{i=e.toString().split(".")[1].length}catch(t){i=0}if(o=Math.abs(n-i),r=Math.pow(10,Math.max(n,i)),o>0){var s=Math.pow(10,o);n>i?(t=Number(t.toString().replace(".","")),e=Number(e.toString().replace(".",""))*s):(t=Number(t.toString().replace(".",""))*s,e=Number(e.toString().replace(".","")))}else t=Number(t.toString().replace(".","")),e=Number(e.toString().replace(".",""));return(t+e)/r}}(),function(){function t(){}t.drawLine=function(t,e,n,i){var r=t.x,o=t.y,s=new u(r,o),a=e.x,h=e.y,c=h-o,f=a-r,p=100;if(0!=c)if(0!=f){var l=f/c,w=Math.abs(l);if(i.checkIndex(y,s.y)&&i.set(s.x,s.y,n),l>0){if(w<=1)for(x=1;x<p;x++){s.y=s.y+1,s.x=s.x+w;var y=Math.floor(s.x);if(!i.checkIndex(y,s.y))break;if(i.isOverPositive(s.x,s.y,a,h))break;i.set(y,s.y,n)}else if(w>1)for(x=1;x<p;x++){s.y=s.y+1/w,s.x=s.x+1;var v=Math.floor(s.y);if(!i.checkIndex(s.x,v))break;if(i.isOverPositive(s.x,s.y,a,h))break;i.set(s.x,v,n)}}else if(l<0)if(w<=1)for(x=1;x<p&&(s.y=s.y+1,s.x=s.x-w,y=Math.floor(s.x),i.checkIndex(y,s.y))&&!i.isOverNegative(s.x,s.y,a,h);x++)i.set(y,s.y,n);else if(w>1)for(x=1;x<p&&(s.y=s.y+1/w,s.x=s.x-1,v=Math.floor(s.y),i.checkIndex(s.x,v))&&!i.isOverNegative(s.x,s.y,a,h);x++)i.set(s.x,v,n)}else for(var x=1;x<p&&(s.y=s.y+1,i.checkIndex(s.x,s.y))&&!(s.y>h);x++)i.set(s.x,s.y,n);else for(x=1;x<p&&(s.x=s.x+1,i.checkIndex(s.x,s.y))&&!(s.x>a);x++)i.set(s.x,s.y,n)},t.drawStar=function(e,n){for(var i=2*Math.PI/5,r=new u(10,10),o=-Math.PI/3,s=0,a=0;a<5;a++){var h=Math.floor(r.x+9*Math.cos(o+i*s)),c=Math.floor(r.y+9*Math.sin(o+i*s)),f=Math.floor(r.x+9*Math.cos(o+i*(s+2))),p=Math.floor(r.y+9*Math.sin(o+i*(s+2)));t.drawLineWrapper(new u(h,c),new u(f,p),e,n),s+=2}},t.drawLineWrapper=function(e,n,i,r){e.y<n.y?t.drawLine(e,n,i,r):n.y<e.y?t.drawLine(n,e,i,r):e.x<n.x?t.drawLine(e,n,i,r):n.x<e.x&&t.drawLine(n,e,i,r)}}();const x=function(){function t(t,e,n,i,r){this.p=t,this.n=e,this.w=n,this.u=i,this.v=r}return t.build_vertex=function(e,n,i,r,o){return new t(e,n,i,r,o)},t.lerp=function(n,i,r){return new t(e.lerp(n.p,i.p,r),e.lerp(n.n,i.n,r),y(n.w,i.w,r),y(n.u,i.u,r),y(n.v,i.v,r))},t.prototype.clone=function(){return new t(this.p.clone(),this.n.clone(),this.w,this.u,this.v)},t.prototype.update_p=function(t){return this.p=t,this},t.prototype.update_w=function(t){return this.w=t,this},t.prototype.get_Vector4D=function(){return new n(this.p,this.w)},t}(),m=function(){function t(){this.triangles=[];var t=new e(0,0,-1);this.triangles.push(new h(new x(new e(-10,-10,-10),t,1,0,0),new x(new e(10,10,-10),t,1,1,1),new x(new e(10,-10,-10),t,1,1,0))),this.triangles.push(new h(new x(new e(-10,-10,-10),t,1,0,0),new x(new e(-10,10,-10),t,1,0,1),new x(new e(10,10,-10),t,1,1,1)));for(var n=[o.rotateByY(90),o.rotateByY(180),o.rotateByY(270),o.rotateByX(90),o.rotateByX(-90)],i=0;i<n.length;++i){var r=n[i],s=o.transformPoint(r,t);this.triangles.push(new h(x.build_vertex(o.transformPoint(r,new e(-10,-10,-10)),s,1,0,0),x.build_vertex(o.transformPoint(r,new e(10,10,-10)),s,1,1,1),x.build_vertex(o.transformPoint(r,new e(10,-10,-10)),s,1,1,0))),this.triangles.push(new h(x.build_vertex(o.transformPoint(r,new e(-10,-10,-10)),s,1,0,0),x.build_vertex(o.transformPoint(r,new e(-10,10,-10)),s,1,0,1),x.build_vertex(o.transformPoint(r,new e(10,10,-10)),s,1,1,1)))}}return t.prototype.update=function(t,e){this.triangles_after_clip=this.triangles;for(var n=0;n<this.triangles_after_clip.length;++n)this.triangles_after_clip[n].process(t,e)},t.prototype.draw=function(t){t.globalCompositeOperation="destination-over",t.strokeStyle="rgba(255,0,0,1)",t.beginPath();for(var e=0;e<this.triangles_after_clip.length;++e)this.triangles_after_clip[e].draw(t);t.stroke()},t}(),_=function(){function n(t){this.color=t}return n.prototype.shading=function(n,i,r,o){var s=n.normal,a=l(-e.dot(i,s),0,1),h=function(e,n,i){var r=n.negative(),o=e.hit_pos.add(r.multiply(.001));return 0!=w(i,new t(o,r)).length?.45:1}(n,i,r);return this.color.multiply(a).multiply(h)},n.yellow=new n(new e(1,1,0)),n.red=new n(new e(1,0,0)),n.green=new n(new e(0,1,0)),n.blue=new n(new e(0,0,1)),n.gray=new n(new e(.5,.5,.5)),n.white=new n(new e(1,1,1)),n}(),d=function(){function n(t,n,i,r,o,s,a){this.moveEye=function(t,n){this.eye=e.add(this.eye,n.multiply(t))},this.ratio=r/o,this.screenW=r,this.screenH=o,this.screenCenterX=.5*this.screenW,this.screenCenterY=.5*this.screenH,this.halfW=.5*this.screenW,this.halfH=.5*this.screenH,this.z_axis=e.minus(n,t).normalize();var h=e.up;this.x_axis=e.cross(h,this.z_axis).normalize(),this.y_axis=e.cross(this.z_axis,this.x_axis),this.eye=t,this.fov_degree=i,this.N=s,this.F=a,this.a=a/(a-s),this.b=-s*a/(a-s),console.log(this.a,this.b)}return n.prototype.addPitch=function(t){},n.prototype.addYaw=function(t){},n.prototype.create_ray_dir=function(t,e,n){var i=c(.5*this.fov_degree),r=Math.tan(i),o=r*n;return this.z_axis.add(this.x_axis.multiply(t*o)).add(this.y_axis.multiply(e*r))},n.prototype.toCameraSpace=function(t){var n=t.minus(this.eye);return new e(e.dot(n,this.x_axis),e.dot(n,this.y_axis),e.dot(n,this.z_axis))},n.prototype.toProjectionSpace=function(t){var n=.5*c(this.fov_degree),i=1/Math.tan(n),r=1/(this.ratio*Math.tan(n));return new e(t.x*r,t.y*i,t.z*this.a+this.b)},n.prototype.toNDC=function(t,e){var n=1/e;return t.multiply(n)},n.prototype.toScreenSpace=function(t){var n=this.halfW*t.x+this.screenCenterX,i=-this.halfH*t.y+this.screenCenterY;return new e(n,i,0)},n.prototype.render=function(n,i){var r=this,o=new e(1,-1,0).normalize(),s=.5/n.h,a=[{x:0,y:0},{x:s,y:s},{x:-s,y:s},{x:-s,y:-s},{x:s,y:-s}];n.render_pixel((function(n,s,h){var u=r.create_ray_dir(n,s,h),c=a.map((function(e){var n=u.add(r.x_axis.multiply(e.x)).add(r.y_axis.multiply(e.y));return new t(r.eye,n.normalize())})).map((function(t){var e=w(i,t);if(0!=e.length){var n=e[0];return n.s.shading(n,o,i,1)}return _.gray.color})),f=a.length;return c.reduce((function(t,e){return t.add(e)}),e.zero).multiply(1/f)}))},n}(),g=function(){function t(t,e){void 0===t&&(t=320),void 0===e&&(e=240),this.w=320,this.h=240,this.backbuffer=null,this.w=t,this.h=e,this.backbuffer=new OffscreenCanvas(this.w,this.h)}return t.prototype.render_pixel=function(t){for(var e=this.backbuffer.getContext("2d"),n=e.getImageData(0,0,this.w,this.h),i=n.data,r=this.w/this.h,o=0;o<this.h;++o)for(var s=0;s<this.w;++s){var a=4*(s+o*this.w),h=(s+.5)/this.w,u=(o+.5)/this.h,c=t(2*h-1,2*(u=1-u)-1,r),f=c.x,p=c.y,l=c.z,w=1/2.1;f=Math.pow(f,w),p=Math.pow(p,w),l=Math.pow(l,w),i[a++]=Math.round(255*f),i[a++]=Math.round(255*p),i[a++]=Math.round(255*l),i[a]=255}e.putImageData(n,0,0)},t.prototype.set_pixel=function(t){for(var e=this.backbuffer.getContext("2d"),n=e.getImageData(0,0,this.w,this.h),i=n.data,r=(this.w,this.h,0);r<this.h;++r)for(var o=0;o<this.w;++o){var s=4*(o+r*this.w),a=t(o,r),h=a.r,u=a.g,c=a.b,f=1/2.1;h=Math.pow(h,f),u=Math.pow(u,f),c=Math.pow(c,f),i[s++]=Math.round(255*h),i[s++]=Math.round(255*u),i[s++]=Math.round(255*c),i[s]=255}e.putImageData(n,0,0)},t.prototype.show_buffer=function(t){var e=document.getElementById(t);e.style.width=this.w+"px",e.style.height=this.h+"px",e.width=e.clientWidth,e.height=e.clientHeight,e.getContext("bitmaprenderer").transferFromImageBitmap(this.backbuffer.transferToImageBitmap())},t}(),b=function(){function t(t,e){this.w=t,this.h=e,this.buffer=new Array(this.h);for(var n=0;n<this.h;++n)this.buffer[n]=new Array(this.w)}return t.prototype.set=function(t,e,n){this.buffer[e][t]=n},t.prototype.get=function(t,e){return this.buffer[e][t]},t.prototype.clear=function(t){for(var e=0;e<this.h;++e)for(var n=0;n<this.w;++n)this.buffer[e][n]=t},t.prototype.get_Buffer=function(t,e){var n=l(t,0,this.w-1),i=l(e,0,this.h-1);return this.buffer[i][n]},t.prototype.checkIndex=function(t,e){return t>=0&&t<this.w&&e>=0&&e<this.h},t.prototype.isOverNegative=function(t,e,n,i){return e>i||t<n},t.prototype.isOverPositive=function(t,e,n,i){return e>i||t>n},t}(),z=function(){function t(){}return t.set_canvas=function(t,e,n){var i=document.getElementById(t);return i.style.width=e+"px",i.style.height=n+"px",i.width=i.clientWidth,i.height=i.clientHeight,i},t.get_context=function(t){return document.getElementById(t).getContext("2d")},t.convert=function(t){return"rgba("+Math.floor(255*t.r)+","+Math.floor(255*t.g)+","+Math.floor(255*t.b)+",1)"},t}();new(function(){function t(){var t=this;this.cameraIndex_view=1,this.cameraIndex_control=0,this.camera=null,this.screenWidth=800,this.screenHeight=600,this.box=null,window.onload=function(){t.init()},document.onkeydown=this.keyProc.bind(this),this.drawScene=this.drawScene.bind(this)}return t.prototype.init=function(){a.color_buffer=new b(this.screenWidth,this.screenHeight),a.z_buffer=new b(this.screenWidth,this.screenHeight),this.render_target=new g(this.screenWidth,this.screenHeight),this.ctx=z.set_canvas("canvas_line",this.screenWidth,this.screenHeight).getContext("2d"),z.set_canvas("canvas",this.screenWidth,this.screenHeight),this.box=new m,this.camera=new d(new e(0,50,-200),new e(0,0,0),60,this.screenWidth,this.screenHeight,100,500),this.start()},t.prototype.start=function(){this.stop(),this.sum_t=0;var t=new Date;this.last_t=t.getTime(),this.thandle=window.requestAnimationFrame(this.drawScene)},t.prototype.resume=function(){var t=new Date;this.last_t=t.getTime(),this.thandle=window.requestAnimationFrame(this.drawScene)},t.prototype.stop=function(){window.cancelAnimationFrame(this.thandle),this.thandle=null},t.prototype.drawScene=function(t){var e=(new Date).getTime(),n=e-this.last_t;this.last_t=e,this.sum_t=this.sum_t+n,document.title=n.toString(),this.ctx.clearRect(0,0,this.screenWidth,this.screenHeight),this.ctx.beginPath(),this.ctx.fillStyle="rgba(180,30,15,0.1)",this.ctx.fillRect(0,0,this.screenWidth,this.screenHeight),a.clear(s.black,1);var i=o.offset(0,0,0),r=this.sum_t/1e3*15%360,h=o.rotateByY(r),u=o.transformTransform(i,h);this.box.update(this.camera,u),this.box.draw(this.ctx),a.show(this.render_target),this.thandle=window.requestAnimationFrame(this.drawScene)},t.prototype.keyProc=function(t){switch(t.keyCode){case 87:this.camera.moveEye(1,this.camera.z_axis);break;case 82:this.camera.moveEye(-1,this.camera.z_axis);break;case 69:this.camera.moveEye(1,this.camera.y_axis);break;case 68:this.camera.moveEye(-1,this.camera.y_axis);break;case 83:this.camera.moveEye(-1,this.camera.x_axis);break;case 70:this.camera.moveEye(1,this.camera.x_axis);break;case 38:this.camera.addPitch(.1);break;case 40:this.camera.addPitch(-.1);break;case 37:this.camera.addYaw(-.1);break;case 39:this.camera.addYaw(.1)}},t}())})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,