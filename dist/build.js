(()=>{"use strict";const t=function(t,e){this.from=t,this.dir=e},e=function(){function t(t,e,n){this.x=0,this.y=0,this.z=0,this.x=t,this.y=e,this.z=n}return t.calculate_normal=function(e,n,i){var r=t.minus(n,e),s=t.minus(i,e);return t.cross(r,s).normalize()},t.calculate_center=function(t,e,n){return t.add(e).add(n).multiply(1/3)},t.uv=function(e,n){return new t(e,n,0)},t.reflect=function(e,n){var i=-2*t.dot(e,n);return n.multiply(i).add(e)},t.add=function(e,n){return new t(n.x+e.x,n.y+e.y,n.z+e.z)},t.minus=function(e,n){return new t(e.x-n.x,e.y-n.y,e.z-n.z)},t.multiply=function(e,n){return new t(e.x*n,e.y*n,e.z*n)},t.multiply3=function(e,n){return new t(e.x*n.x,e.y*n.y,e.z*n.z)},t.cross=function(e,n){return new t(e.y*n.z-e.z*n.y,-e.x*n.z+e.z*n.x,e.x*n.y-e.y*n.x)},t.dot=function(t,e){return t.x*e.x+t.y*e.y+t.z*e.z},t.equal=function(t,e){return o(t.x,e.x)&&o(t.y,e.y)&&o(t.z,e.z)},t.lerp=function(e,n,i){return new t(h(e.x,n.x,i),h(e.y,n.y,i),h(e.z,n.z,i))},t.prototype.length=function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},t.prototype.normalize=function(){var t=this.length();return this.x=this.x/t,this.y=this.y/t,this.z=this.z/t,this},t.prototype.add=function(e){return t.add(this,e)},t.prototype.minus=function(e){return t.minus(this,e)},t.prototype.multiply=function(e){return t.multiply(this,e)},t.prototype.negative=function(){return t.multiply(this,-1)},t.prototype.clone=function(){return new t(this.x,this.y,this.z)},t.up=new t(0,1,0),t.zero=new t(0,0,0),t}(),n=function(){function t(t,e,n,i){this.xAxis=t,this.yAxis=e,this.zAxis=n,this.position=i}return t.transformPoint=function(t,e){var n=t.xAxis.multiply(e.x),i=t.yAxis.multiply(e.y),r=t.zAxis.multiply(e.z);return t.position.add(n).add(i).add(r)},t.transformVector=function(t,e){var n=t.xAxis.multiply(e.x),i=t.yAxis.multiply(e.y),r=t.zAxis.multiply(e.z);return n.add(i).add(r)},t.transformTransform=function(e,n){return new t(t.transformVector(e,n.xAxis),t.transformVector(e,n.yAxis),t.transformVector(e,n.zAxis),t.transformPoint(e,n.position))},t.rotateByZ=function(n){var i=s(n),r=Math.cos(i),o=Math.sin(i);return new t(new e(r,o,0),new e(-o,r,0),new e(0,0,1),e.zero)},t.rotateByY=function(n){var i=s(n),r=Math.cos(i),o=Math.sin(i),a=new e(o,0,r);return new t(new e(r,0,-o),new e(0,1,0),a,e.zero)},t.rotateByX=function(n){var i=s(n),r=Math.cos(i),o=Math.sin(i);return new t(new e(1,0,0),new e(0,r,o),new e(0,-o,r),new e(0,0,0))},t.offset=function(n,i,r){return new t(new e(1,0,0),new e(0,1,0),new e(0,0,1),new e(n,i,r))},t}(),i=function(){function t(t,e){this.C=t,this.N=e}return t.prototype.is_positive=function(t){var n=e.minus(t,this.C);return e.dot(n,this.N)>0},t.prototype.hit=function(e,n){var i=t.hit(e,this);return i.is_hit&&(i.s=n),i},t.hit=function(t,n){var i=t.from,r=t.dir,s=e.dot(r,n.N),a=e.dot(e.minus(n.C,i),n.N);if(o(s,0))return{is_hit:!1,hit_pos:null,t:-1};var h=a/s;return{is_hit:h>0,hit_pos:i.add(r.multiply(h)),i:r,t:h,normal:n.N}},t}(),r=function(){function s(t,e,n){this.v0=t,this.v1=e,this.v2=n}return s.MVP_backface_culling_clipping=function(t,i,r){var o=n.transformPoint(r,t.v0.p),a=n.transformPoint(r,t.v1.p),h=n.transformPoint(r,t.v2.p),c=i.toCameraSpace(o),u=i.toCameraSpace(a),p=i.toCameraSpace(h),l=i.toProjectionSpace(c),f=i.toProjectionSpace(u),y=i.toProjectionSpace(p),d=e.calculate_normal(l,f,y),w=e.minus(e.zero,e.calculate_center(l,f,y)).normalize();if(e.dot(d,w)<=0)return[];var v=t.v0.clone().update_p(l).update_w(c.z),m=t.v1.clone().update_p(f).update_w(u.z),x=t.v2.clone().update_p(y).update_w(p.z);return s.clip_in_Projection_Space(v,m,x,i)},s.clip_in_Projection_Space=function(n,o,a,h){var u,p,l,f,y,d,w,v,m=(u=new s(n,o,a),p=function(t){return t.v1.p.x<0},l=function(t){return t.v2.p.x<0},f=new i(new e(0,0,0),new e(1,0,0)),y=[],d=function(n,r){var s=e.minus(r.p,n.p),o=new t(n.p,s),a=(i.hit(o,f).hit_pos.z-n.p.z)/s.z;return c.lerp(n,r,a)},w=function(t,e,n){y[0]=new r(t,d(t,e),d(t,n))},v=function(t,e,n){var i=d(n,t),s=d(t,e);y[0]=new r(n,i,s),y[1]=new r(n,s,e)},u.v0.p.x<0?p(u)?l(u)||w(u.v2,u.v0,u.v1):l(u)?w(u.v1,u.v2,u.v0):v(u.v0,u.v1,u.v2):p(u)?l(u)?w(u.v0,u.v1,u.v2):v(u.v1,u.v2,u.v0):l(u)?v(u.v2,u.v0,u.v1):y[0]=u,y);return m},s.process=function(t,e,n){for(var i=[],r=0,o=s.MVP_backface_culling_clipping(t,e,n);r<o.length;r++){var a=o[r],h=e.toNDC(a.v0.p),c=e.toNDC(a.v1.p),u=e.toNDC(a.v2.p),p=e.toScreenSpace(h),l=e.toScreenSpace(c),f=e.toScreenSpace(u);i.push(p),i.push(l),i.push(f)}return i},s.prototype.process=function(t,e){this.v_s=s.process(this,t,e)},s.prototype.draw=function(t){if(null!=this.v_s)for(var e=this.v_s.length/3,n=1;n<=e;++n){var i=3*n-1;t.moveTo(this.v_s[i].x,this.v_s[i].y),t.lineTo(this.v_s[i-2].x,this.v_s[i-2].y),t.lineTo(this.v_s[i-1].x,this.v_s[i-1].y),t.lineTo(this.v_s[i].x,this.v_s[i].y)}},s}();function s(t){return Math.PI*t/180}function o(t,e){return Math.abs(t-e)<.001}function a(t,e){return t.map((function(t){return t.h.hit(e,t.s)})).filter((function(t){return t.is_hit})).sort((function(t,e){return t.t-e.t}))}function h(t,e,n){return t+n*(e-t)}const c=function(){function t(t,e,n,i,r){this.p=t,this.n=e,this.w=n,this.u=i,this.v=r}return t.build_vertex=function(e,n,i,r,s){return new t(e,n,i,r,s)},t.lerp=function(n,i,r){return new t(e.lerp(n.p,i.p,r),e.lerp(n.n,i.n,r),h(n.w,i.w,r),h(n.u,i.u,r),h(n.v,i.v,r))},t.prototype.clone=function(){return new t(this.p.clone(),this.n.clone(),this.w,this.u,this.v)},t.prototype.update_p=function(t){return this.p=t,this},t.prototype.update_w=function(t){return this.w=t,this},t}(),u=function(){function t(){this.triangles=[];var t=new e(0,0,-1);this.triangles.push(new r(new c(new e(-10,-10,-10),t,1,0,0),new c(new e(10,10,-10),t,1,1,1),new c(new e(10,-10,-10),t,1,1,0))),this.triangles.push(new r(new c(new e(-10,-10,-10),t,1,0,0),new c(new e(-10,10,-10),t,1,0,1),new c(new e(10,10,-10),t,1,1,1)));for(var i=[n.rotateByY(90),n.rotateByY(180),n.rotateByY(270),n.rotateByX(90),n.rotateByX(-90)],s=0;s<i.length;++s){var o=i[s],a=n.transformPoint(o,t);this.triangles.push(new r(c.build_vertex(n.transformPoint(o,new e(-10,-10,-10)),a,1,0,0),c.build_vertex(n.transformPoint(o,new e(10,10,-10)),a,1,1,1),c.build_vertex(n.transformPoint(o,new e(10,-10,-10)),a,1,1,0))),this.triangles.push(new r(c.build_vertex(n.transformPoint(o,new e(-10,-10,-10)),a,1,0,0),c.build_vertex(n.transformPoint(o,new e(-10,10,-10)),a,1,0,1),c.build_vertex(n.transformPoint(o,new e(10,10,-10)),a,1,1,1)))}}return t.prototype.update=function(t,e){this.triangles_after_clip=this.triangles;for(var n=0;n<this.triangles_after_clip.length;++n)this.triangles_after_clip[n].process(t,e)},t.prototype.draw=function(t){t.globalCompositeOperation="destination-over",t.strokeStyle="rgba(255,0,0,1)",t.beginPath();for(var e=0;e<this.triangles_after_clip.length;++e)this.triangles_after_clip[e].draw(t);t.stroke()},t}(),p=function(){function n(t){this.color=t}return n.prototype.shading=function(n,i,r,s){var o,h=n.normal,c=(0,(o=-e.dot(i,h))>1?1:o<0?0:o),u=function(e,n,i){var r=n.negative(),s=e.hit_pos.add(r.multiply(.001));return 0!=a(i,new t(s,r)).length?.45:1}(n,i,r);return this.color.multiply(c).multiply(u)},n.yellow=new n(new e(1,1,0)),n.red=new n(new e(1,0,0)),n.green=new n(new e(0,1,0)),n.blue=new n(new e(0,0,1)),n.gray=new n(new e(.5,.5,.5)),n.white=new n(new e(1,1,1)),n}(),l=function(){function n(t,n,i,r,s,o,a){this.moveEye=function(t,n){this.eye=e.add(this.eye,n.multiply(t))},this.ratio=r/s,this.screenW=r,this.screenH=s,this.screenCenterX=.5*this.screenW,this.screenCenterY=.5*this.screenH,this.halfW=.5*this.screenW,this.halfH=.5*this.screenH,this.z_axis=e.minus(n,t).normalize();var h=e.up;this.x_axis=e.cross(h,this.z_axis).normalize(),this.y_axis=e.cross(this.z_axis,this.x_axis),this.eye=t,this.fov_degree=i,this.N=o,this.F=a,this.a=a/(a-o),this.b=-o*a/(a-o),this.Nc=o*this.a+this.b,this.Fc=a*this.a+this.b}return n.prototype.addPitch=function(t){},n.prototype.addYaw=function(t){},n.prototype.create_ray_dir=function(t,e,n){var i=s(.5*this.fov_degree),r=Math.tan(i),o=r*n;return this.z_axis.add(this.x_axis.multiply(t*o)).add(this.y_axis.multiply(e*r))},n.prototype.toCameraSpace=function(t){var n=t.minus(this.eye);return new e(e.dot(n,this.x_axis),e.dot(n,this.y_axis),e.dot(n,this.z_axis))},n.prototype.toProjectionSpace=function(t){var n=.5*s(this.fov_degree),i=1/Math.tan(n),r=1/(this.ratio*Math.tan(n));return new e(t.x*r,t.y*i,t.z*this.a+this.b)},n.prototype.toNDC=function(t){var e=1/t.z;return t.multiply(e)},n.prototype.toScreenSpace=function(t){var n=this.halfW*t.x+this.screenCenterX,i=-this.halfH*t.y+this.screenCenterY;return new e(n,i,t.z)},n.prototype.render=function(n,i){var r=this,s=new e(1,-1,0).normalize(),o=.5/n.h,h=[{x:0,y:0},{x:o,y:o},{x:-o,y:o},{x:-o,y:-o},{x:o,y:-o}];n.render_pixel((function(n,o,c){var u=r.create_ray_dir(n,o,c),l=h.map((function(e){var n=u.add(r.x_axis.multiply(e.x)).add(r.y_axis.multiply(e.y));return new t(r.eye,n.normalize())})).map((function(t){var e=a(i,t);if(0!=e.length){var n=e[0];return n.s.shading(n,s,i,1)}return p.gray.color})),f=h.length;return l.reduce((function(t,e){return t.add(e)}),e.zero).multiply(1/f)}))},n}();new(function(){function t(){var t=this;this.cameraIndex_view=1,this.cameraIndex_control=0,this.camera=null,this.screenWidth=800,this.screenHeight=600,this.box=null,window.onload=function(){t.init()},document.onkeydown=this.keyProc.bind(this)}return t.prototype.init=function(){var t=document.getElementById("canvas");t.style.width=this.screenWidth+"px",t.style.height=this.screenHeight+"px",t.width=t.clientWidth,t.height=t.clientHeight,this.ctx=t.getContext("2d"),this.box=new u,this.camera=new l(new e(0,50,-200),new e(0,0,0),60,this.screenWidth,this.screenHeight,1,500),this.start()},t.prototype.start=function(){var t=this;this.stop(),this.sum_t=0;var e=new Date;this.last_t=e.getTime(),this.thandle=window.setInterval((function(){t.drawScene()}),16)},t.prototype.resume=function(){var t=this,e=new Date;this.last_t=e.getTime(),this.thandle=window.setInterval((function(){t.drawScene()}),16)},t.prototype.stop=function(){window.clearInterval(this.thandle),this.thandle=null},t.prototype.drawScene=function(){var t=(new Date).getTime(),e=t-this.last_t;this.last_t=t,this.sum_t=this.sum_t+e,this.ctx.clearRect(0,0,this.screenWidth,this.screenHeight),this.ctx.beginPath(),this.ctx.fillStyle="rgba(180,30,15,0.1)",this.ctx.fillRect(0,0,this.screenWidth,this.screenHeight);var i=n.offset(0,0,0),r=this.sum_t/1e3*15%360,s=n.rotateByY(r),o=n.transformTransform(i,s);this.box.update(this.camera,o),this.box.draw(this.ctx),i=n.offset(150,0,0),s=n.rotateByY(r),o=n.transformTransform(s,i),this.box.update(this.camera,o),this.box.draw(this.ctx)},t.prototype.keyProc=function(t){switch(t.keyCode){case 87:this.camera.moveEye(1,this.camera.z_axis);break;case 82:this.camera.moveEye(-1,this.camera.z_axis);break;case 69:this.camera.moveEye(1,this.camera.y_axis);break;case 68:this.camera.moveEye(-1,this.camera.y_axis);break;case 83:this.camera.moveEye(-1,this.camera.x_axis);break;case 70:this.camera.moveEye(1,this.camera.x_axis);break;case 38:this.camera.addPitch(.1);break;case 40:this.camera.addPitch(-.1);break;case 37:this.camera.addYaw(-.1);break;case 39:this.camera.addYaw(.1)}},t}())})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYnVpbGQuanMiLCJtYXBwaW5ncyI6IjJCQU1JLFNBQVlBLEVBQWFDLEdBQ3JCQyxLQUFLRixLQUFPQSxFQUNaRSxLQUFLRCxJQUFNQSxHLEVDTm5CLFdBbUVJLFdBQVlFLEVBQVlDLEVBQVlDLEdBSHBDLEtBQUFDLEVBQVksRUFDWixLQUFBQyxFQUFZLEVBQ1osS0FBQUMsRUFBWSxFQUVSTixLQUFLSSxFQUFJSCxFQUNURCxLQUFLSyxFQUFJSCxFQUNURixLQUFLTSxFQUFJSCxFQWtDakIsT0F0R1csRUFBQUksaUJBQVAsU0FBd0JDLEVBQVlDLEVBQVlDLEdBQzVDLElBQUlDLEVBQU1DLEVBQU9DLE1BQU1KLEVBQUlELEdBQ3ZCTSxFQUFNRixFQUFPQyxNQUFNSCxFQUFJRixHQUUzQixPQURhSSxFQUFPRyxNQUFNSixFQUFLRyxHQUNqQkUsYUFHWCxFQUFBQyxpQkFBUCxTQUF3QlQsRUFBWUMsRUFBWUMsR0FDNUMsT0FBT0YsRUFBR1UsSUFBSVQsR0FBSVMsSUFBSVIsR0FBSVMsU0FBUyxFQUFJLElBR3BDLEVBQUFDLEdBQVAsU0FBVUMsRUFBV0MsR0FDakIsT0FBTyxJQUFJVixFQUFPUyxFQUFHQyxFQUFHLElBTXJCLEVBQUFDLFFBQVAsU0FBZUMsRUFBV0MsR0FDdEIsSUFBSUMsR0FBSyxFQUFJZCxFQUFPZSxJQUFJSCxFQUFHQyxHQUMzQixPQUFPQSxFQUFFTixTQUFTTyxHQUFHUixJQUFJTSxJQUd0QixFQUFBTixJQUFQLFNBQVdVLEVBQVdDLEdBRWxCLE9BRFcsSUFBSWpCLEVBQU9pQixFQUFFekIsRUFBSXdCLEVBQUV4QixFQUFHeUIsRUFBRXhCLEVBQUl1QixFQUFFdkIsRUFBR3dCLEVBQUV2QixFQUFJc0IsRUFBRXRCLElBSWpELEVBQUFPLE1BQVAsU0FBYWUsRUFBV0MsR0FFcEIsT0FEVyxJQUFJakIsRUFBT2dCLEVBQUV4QixFQUFJeUIsRUFBRXpCLEVBQUd3QixFQUFFdkIsRUFBSXdCLEVBQUV4QixFQUFHdUIsRUFBRXRCLEVBQUl1QixFQUFFdkIsSUFJakQsRUFBQWEsU0FBUCxTQUFnQlMsRUFBV0UsR0FFdkIsT0FEVyxJQUFJbEIsRUFBT2dCLEVBQUV4QixFQUFJMEIsRUFBR0YsRUFBRXZCLEVBQUl5QixFQUFHRixFQUFFdEIsRUFBSXdCLElBSTNDLEVBQUFDLFVBQVAsU0FBaUJILEVBQVdDLEdBQ3hCLE9BQU8sSUFBSWpCLEVBQU9nQixFQUFFeEIsRUFBSXlCLEVBQUV6QixFQUFHd0IsRUFBRXZCLEVBQUl3QixFQUFFeEIsRUFBR3VCLEVBQUV0QixFQUFJdUIsRUFBRXZCLElBRzdDLEVBQUFTLE1BQVAsU0FBYWEsRUFBV0MsR0FFcEIsT0FEVyxJQUFJakIsRUFBT2dCLEVBQUV2QixFQUFJd0IsRUFBRXZCLEVBQUlzQixFQUFFdEIsRUFBSXVCLEVBQUV4QixHQUFJdUIsRUFBRXhCLEVBQUl5QixFQUFFdkIsRUFBSXNCLEVBQUV0QixFQUFJdUIsRUFBRXpCLEVBQUd3QixFQUFFeEIsRUFBSXlCLEVBQUV4QixFQUFJdUIsRUFBRXZCLEVBQUl3QixFQUFFekIsSUFJdEYsRUFBQXVCLElBQVAsU0FBV0MsRUFBV0MsR0FDbEIsT0FBT0QsRUFBRXhCLEVBQUl5QixFQUFFekIsRUFBSXdCLEVBQUV2QixFQUFJd0IsRUFBRXhCLEVBQUl1QixFQUFFdEIsRUFBSXVCLEVBQUV2QixHQUdwQyxFQUFBMEIsTUFBUCxTQUFhSixFQUFXQyxHQUNwQixPQUFPSSxFQUFhTCxFQUFFeEIsRUFBR3lCLEVBQUV6QixJQUFNNkIsRUFBYUwsRUFBRXZCLEVBQUd3QixFQUFFeEIsSUFBTTRCLEVBQWFMLEVBQUV0QixFQUFHdUIsRUFBRXZCLElBRzVFLEVBQUE0QixLQUFQLFNBQVlOLEVBQVdDLEVBQVdNLEdBQzlCLE9BQU8sSUFBSXZCLEVBQ1BzQixFQUFLTixFQUFFeEIsRUFBR3lCLEVBQUV6QixFQUFHK0IsR0FDZkQsRUFBS04sRUFBRXZCLEVBQUd3QixFQUFFeEIsRUFBRzhCLEdBQ2ZELEVBQUtOLEVBQUV0QixFQUFHdUIsRUFBRXZCLEVBQUc2QixLQVl2QixZQUFBQyxPQUFBLFdBQ0ksT0FBT0MsS0FBS0MsS0FBS3RDLEtBQUtJLEVBQUlKLEtBQUtJLEVBQUlKLEtBQUtLLEVBQUlMLEtBQUtLLEVBQUlMLEtBQUtNLEVBQUlOLEtBQUtNLElBR3ZFLFlBQUFVLFVBQUEsV0FDSSxJQUFJdUIsRUFBT3ZDLEtBQUtvQyxTQUloQixPQUhBcEMsS0FBS0ksRUFBSUosS0FBS0ksRUFBSW1DLEVBQ2xCdkMsS0FBS0ssRUFBSUwsS0FBS0ssRUFBSWtDLEVBQ2xCdkMsS0FBS00sRUFBSU4sS0FBS00sRUFBSWlDLEVBQ1h2QyxNQUdYLFlBQUFrQixJQUFBLFNBQUlVLEdBQ0EsT0FBT2hCLEVBQU9NLElBQUlsQixLQUFNNEIsSUFHNUIsWUFBQWYsTUFBQSxTQUFNZSxHQUNGLE9BQU9oQixFQUFPQyxNQUFNYixLQUFNNEIsSUFHOUIsWUFBQVQsU0FBQSxTQUFTVyxHQUNMLE9BQU9sQixFQUFPTyxTQUFTbkIsS0FBTThCLElBR2pDLFlBQUFVLFNBQUEsV0FDSSxPQUFPNUIsRUFBT08sU0FBU25CLE1BQU8sSUFHbEMsWUFBQXlDLE1BQUEsV0FDSSxPQUFPLElBQUk3QixFQUFPWixLQUFLSSxFQUFHSixLQUFLSyxFQUFHTCxLQUFLTSxJQXJGcEMsRUFBQW9DLEdBQUssSUFBSTlCLEVBQU8sRUFBRyxFQUFHLEdBQ3RCLEVBQUErQixLQUFPLElBQUkvQixFQUFPLEVBQUcsRUFBRyxHQXNGbkMsRUF4R0EsRyxFQ0NBLFdBS0ksV0FBWWdDLEVBQWVDLEVBQWVDLEVBQWVDLEdBQ3JEL0MsS0FBSzRDLE1BQVFBLEVBQ2I1QyxLQUFLNkMsTUFBUUEsRUFDYjdDLEtBQUs4QyxNQUFRQSxFQUNiOUMsS0FBSytDLFNBQVdBLEVBaUZ4QixPQTlFVyxFQUFBQyxlQUFQLFNBQXNCQyxFQUFzQkMsR0FDeEMsSUFBSUMsRUFBVUYsRUFBVUwsTUFBTXpCLFNBQVMrQixFQUFNOUMsR0FDekNnRCxFQUFVSCxFQUFVSixNQUFNMUIsU0FBUytCLEVBQU03QyxHQUN6Q2dELEVBQVVKLEVBQVVILE1BQU0zQixTQUFTK0IsRUFBTTVDLEdBRTdDLE9BQU8yQyxFQUFVRixTQUFTN0IsSUFBSWlDLEdBQVNqQyxJQUFJa0MsR0FBU2xDLElBQUltQyxJQUdyRCxFQUFBQyxnQkFBUCxTQUF1QkwsRUFBc0JNLEdBQ3pDLElBQUlKLEVBQVVGLEVBQVVMLE1BQU16QixTQUFTb0MsRUFBT25ELEdBQzFDZ0QsRUFBVUgsRUFBVUosTUFBTTFCLFNBQVNvQyxFQUFPbEQsR0FDMUNnRCxFQUFVSixFQUFVSCxNQUFNM0IsU0FBU29DLEVBQU9qRCxHQUU5QyxPQUFPNkMsRUFBUWpDLElBQUlrQyxHQUFTbEMsSUFBSW1DLElBRzdCLEVBQUFHLG1CQUFQLFNBQTBCUCxFQUFzQlEsR0FDNUMsT0FBTyxJQUFJQyxFQUNQQSxFQUFVSixnQkFBZ0JMLEVBQVdRLEVBQWViLE9BQ3BEYyxFQUFVSixnQkFBZ0JMLEVBQVdRLEVBQWVaLE9BQ3BEYSxFQUFVSixnQkFBZ0JMLEVBQVdRLEVBQWVYLE9BQ3BEWSxFQUFVVixlQUFlQyxFQUFXUSxFQUFlVixZQUlwRCxFQUFBWSxVQUFQLFNBQWlCQyxHQUNiLElBQUlDLEVBQVNDLEVBQWNGLEdBQ3ZCRyxFQUFJMUIsS0FBSzJCLElBQUlILEdBQVMvQixFQUFJTyxLQUFLNEIsSUFBSUosR0FLdkMsT0FBTyxJQUFJSCxFQUpDLElBQUksRUFBT0ssRUFBR2pDLEVBQUcsR0FDakIsSUFBSSxHQUFRQSxFQUFHaUMsRUFBRyxHQUNsQixJQUFJLEVBQU8sRUFBRyxFQUFHLEdBTXpCLFNBSUQsRUFBQUcsVUFBUCxTQUFpQk4sR0FDYixJQUFJQyxFQUFTQyxFQUFjRixHQUN2QkcsRUFBSTFCLEtBQUsyQixJQUFJSCxHQUFTL0IsRUFBSU8sS0FBSzRCLElBQUlKLEdBQ25DZixFQUFRLElBQUksRUFBT2hCLEVBQUcsRUFBR2lDLEdBSTdCLE9BQU8sSUFBSUwsRUFIQyxJQUFJLEVBQU9LLEVBQUcsR0FBSWpDLEdBQ2xCLElBQUksRUFBTyxFQUFHLEVBQUcsR0FLekJnQixFQUNBLFNBSUQsRUFBQXFCLFVBQVAsU0FBaUJQLEdBQ2IsSUFBSUMsRUFBU0MsRUFBY0YsR0FDdkJHLEVBQUkxQixLQUFLMkIsSUFBSUgsR0FBUy9CLEVBQUlPLEtBQUs0QixJQUFJSixHQUt2QyxPQUFPLElBQUlILEVBSkMsSUFBSSxFQUFPLEVBQUcsRUFBRyxHQUNqQixJQUFJLEVBQU8sRUFBR0ssRUFBR2pDLEdBQ2pCLElBQUksRUFBTyxHQUFJQSxFQUFHaUMsR0FNMUIsSUFBSSxFQUFPLEVBQUcsRUFBRyxLQUlsQixFQUFBSyxPQUFQLFNBQWNoRSxFQUFXQyxFQUFXQyxHQUNoQyxPQUFPLElBQUlvRCxFQUNQLElBQUksRUFBTyxFQUFHLEVBQUcsR0FDakIsSUFBSSxFQUFPLEVBQUcsRUFBRyxHQUNqQixJQUFJLEVBQU8sRUFBRyxFQUFHLEdBQ2pCLElBQUksRUFBT3RELEVBQUdDLEVBQUdDLEtBRzdCLEVBMUZBLEcsRUNLQSxXQUlJLFdBQVk0QyxFQUFlbUIsR0FDdkJyRSxLQUFLc0UsRUFBSXBCLEVBQ1RsRCxLQUFLeUIsRUFBSTRDLEVBMkNqQixPQXZDSSxZQUFBRSxZQUFBLFNBQVlDLEdBQ1IsSUFBSUMsRUFBTyxRQUFhRCxFQUFReEUsS0FBS3NFLEdBRXJDLE9BRFksTUFBV0csRUFBTXpFLEtBQUt5QixHQUNuQixHQUduQixZQUFBaUQsSUFBQSxTQUFJQyxFQUFVN0MsR0FDVixJQUFJOEMsRUFBU0MsRUFBTUgsSUFBSUMsRUFBSzNFLE1BRzVCLE9BRkk0RSxFQUFPRSxTQUNQRixFQUFPOUMsRUFBSUEsR0FDUjhDLEdBR0osRUFBQUYsSUFBUCxTQUFXQyxFQUFVSSxHQUVqQixJQUFJakYsRUFBTzZFLEVBQUk3RSxLQUNYQyxFQUFNNEUsRUFBSTVFLElBS1Y4QixFQUFJLE1BQVc5QixFQUFLZ0YsRUFBTXRELEdBQzFCRyxFQUFJLE1BQVcsUUFBYW1ELEVBQU1ULEVBQUd4RSxHQUFPaUYsRUFBTXRELEdBR3RELEdBQUlRLEVBQWFKLEVBQUcsR0FDaEIsTUFBTyxDQUFFaUQsUUFBUSxFQUFPRSxRQUFTLEtBQU03QyxHQUFJLEdBRS9DLElBQUlBLEVBQUlQLEVBQUlDLEVBR1osTUFBTyxDQUNIaUQsT0FIUzNDLEVBQUksRUFJYjZDLFFBSFVsRixFQUFLb0IsSUFBSW5CLEVBQUlvQixTQUFTZ0IsSUFJaEM4QyxFQUFHbEYsRUFDSG9DLEVBQUMsRUFDRGtDLE9BQVFVLEVBQU10RCxJQUcxQixFQWpEQSxHLEVDREEsV0EyRkksV0FBWXlELEVBQWFDLEVBQWFDLEdBQ2xDcEYsS0FBS1EsR0FBSzBFLEVBQ1ZsRixLQUFLUyxHQUFLMEUsRUFDVm5GLEtBQUtVLEdBQUswRSxFQXFCbEIsT0FqSFcsRUFBQUMsOEJBQVAsU0FBcUNDLEVBQW9CQyxFQUFpQkMsR0FFdEUsSUFBSUMsRUFBTyxpQkFBeUJELEVBQWdCRixFQUFTOUUsR0FBR2tGLEdBQzVEQyxFQUFPLGlCQUF5QkgsRUFBZ0JGLEVBQVM3RSxHQUFHaUYsR0FDNURFLEVBQU8saUJBQXlCSixFQUFnQkYsRUFBUzVFLEdBQUdnRixHQUc1REcsRUFBT04sRUFBUU8sY0FBY0wsR0FDN0JNLEVBQU9SLEVBQVFPLGNBQWNILEdBQzdCSyxFQUFPVCxFQUFRTyxjQUFjRixHQUU3QkssRUFBT1YsRUFBUVcsa0JBQWtCTCxHQUNqQ00sRUFBT1osRUFBUVcsa0JBQWtCSCxHQUNqQ0ssRUFBT2IsRUFBUVcsa0JBQWtCRixHQUdqQzNCLEVBQVMsbUJBQXdCNEIsRUFBTUUsRUFBTUMsR0FDN0NDLEVBQWdCLFFBQWEsT0FBYSxtQkFBd0JKLEVBQU1FLEVBQU1DLElBQU9wRixZQUV6RixHQURnQixNQUFXcUQsRUFBUWdDLElBQ2xCLEVBQ2IsTUFBTyxHQUlYLElBQUk3RixFQUFLOEUsRUFBUzlFLEdBQUdpQyxRQUFRNkQsU0FBU0wsR0FBTU0sU0FBU1YsRUFBS3ZGLEdBQ3RERyxFQUFLNkUsRUFBUzdFLEdBQUdnQyxRQUFRNkQsU0FBU0gsR0FBTUksU0FBU1IsRUFBS3pGLEdBQ3RESSxFQUFLNEUsRUFBUzVFLEdBQUcrQixRQUFRNkQsU0FBU0YsR0FBTUcsU0FBU1AsRUFBSzFGLEdBRzFELE9BQU9rRyxFQUFTQyx5QkFBeUJqRyxFQUFJQyxFQUFJQyxFQUFJNkUsSUFHbEQsRUFBQWtCLHlCQUFQLFNBQWdDakcsRUFBWUMsRUFBWUMsRUFBWTZFLEdBVWhFLElDT2FELEVBRWpCb0IsRUFDQUMsRUFDQTVCLEVBRUk2QixFQUVBQyxFQVdBQyxFQU9BQyxFRGpDSW5DLEdDT1NVLEVEUEssSUFBSWtCLEVBQVNoRyxFQUFJQyxFQUFJQyxHQ1MzQ2dHLEVEUFEsU0FBQ00sR0FBa0IsT0FBT0EsRUFBRXZHLEdBQUdpRixFQUFFdEYsRUFBSSxHQ1E3Q3VHLEVEUFEsU0FBQ0ssR0FBa0IsT0FBT0EsRUFBRXRHLEdBQUdnRixFQUFFdEYsRUFBSSxHQ1E3QzJFLEVEUFEsSUFBSSxFQUFNLElBQUksRUFBTyxFQUFHLEVBQUcsR0FBSSxJQUFJLEVBQU8sRUFBRyxFQUFHLElDU3BENkIsRUFBcUIsR0FFckJDLEVBQWdCLFNBQVVyRyxFQUFZQyxHQUN0QyxJQUFJVixFQUFNLFFBQWFVLEVBQUdpRixFQUFHbEYsRUFBR2tGLEdBQzVCZixFQUFNLElBQUksRUFBSW5FLEVBQUdrRixFQUFHM0YsR0FJcEJvQyxHQUhTLE1BQVV3QyxFQUFLSSxHQUdaQyxRQUFRMUUsRUFBSUUsRUFBR2tGLEVBQUVwRixHQUFNUCxFQUFLLEVBQzVDLE9BQU8sT0FBWVMsRUFBSUMsRUFBSTBCLElBSTNCMkUsRUFBZ0IsU0FBVXRHLEVBQVlDLEVBQVlDLEdBR2xEa0csRUFBTyxHQUFLLElBQUksRUFBU3BHLEVBQUlxRyxFQUFjckcsRUFBSUMsR0FBS29HLEVBQWNyRyxFQUFJRSxLQUl0RXFHLEVBQWlCLFNBQVV2RyxFQUFZQyxFQUFZQyxHQUduRCxJQUFJdUcsRUFBU0osRUFBY25HLEVBQUlGLEdBQzNCMEcsRUFBU0wsRUFBY3JHLEVBQUlDLEdBRS9CbUcsRUFBTyxHQUFLLElBQUksRUFBU2xHLEVBQUl1RyxFQUFRQyxHQUNyQ04sRUFBTyxHQUFLLElBQUksRUFBU2xHLEVBQUl3RyxFQUFRekcsSUFLOUI2RSxFRDVDeUI5RSxHQUFHa0YsRUFBRXRGLEVBQUksRUM4Q3JDc0csRUFBT3BCLEdBRUhxQixFQUFPckIsSUFLUHdCLEVBQWN4QixFQUFTNUUsR0FBSTRFLEVBQVM5RSxHQUFJOEUsRUFBUzdFLElBSWpEa0csRUFBT3JCLEdBQ1B3QixFQUFjeEIsRUFBUzdFLEdBQUk2RSxFQUFTNUUsR0FBSTRFLEVBQVM5RSxJQUVqRHVHLEVBQWV6QixFQUFTOUUsR0FBSThFLEVBQVM3RSxHQUFJNkUsRUFBUzVFLElBS3REZ0csRUFBT3BCLEdBRUhxQixFQUFPckIsR0FDUHdCLEVBQWN4QixFQUFTOUUsR0FBSThFLEVBQVM3RSxHQUFJNkUsRUFBUzVFLElBRWpEcUcsRUFBZXpCLEVBQVM3RSxHQUFJNkUsRUFBUzVFLEdBQUk0RSxFQUFTOUUsSUFJbERtRyxFQUFPckIsR0FDUHlCLEVBQWV6QixFQUFTNUUsR0FBSTRFLEVBQVM5RSxHQUFJOEUsRUFBUzdFLElBR2xEbUcsRUFBTyxHQUFLdEIsRUFJakJzQixHRDdFSCxPQUFPaEMsR0FHSixFQUFBdUMsUUFBUCxTQUFlN0IsRUFBb0JDLEVBQWlCQyxHQU9oRCxJQUpBLElBRUk0QixFQUFPLEdBRUcsTUFKTVosRUFBU25CLDhCQUE4QkMsRUFBVUMsRUFBU0MsR0FJaEUsZUFBZSxDQUF4QixJQUFJd0IsRUFBQyxLQUNGeEcsRUFBSytFLEVBQVE4QixNQUFNTCxFQUFFeEcsR0FBR2tGLEdBQ3hCakYsRUFBSzhFLEVBQVE4QixNQUFNTCxFQUFFdkcsR0FBR2lGLEdBQ3hCaEYsRUFBSzZFLEVBQVE4QixNQUFNTCxFQUFFdEcsR0FBR2dGLEdBR3hCNEIsRUFBTy9CLEVBQVFnQyxjQUFjL0csR0FDN0JnSCxFQUFPakMsRUFBUWdDLGNBQWM5RyxHQUM3QmdILEVBQU9sQyxFQUFRZ0MsY0FBYzdHLEdBR2pDMEcsRUFBS00sS0FBS0osR0FDVkYsRUFBS00sS0FBS0YsR0FDVkosRUFBS00sS0FBS0QsR0FZZCxPQUFPTCxHQWFYLFlBQUFELFFBQUEsU0FBUTVCLEVBQWlCQyxHQUNyQnhGLEtBQUsySCxJQUFNbkIsRUFBU1csUUFBUW5ILEtBQU11RixFQUFTQyxJQUcvQyxZQUFBb0MsS0FBQSxTQUFLQyxHQUNELEdBQWdCLE1BQVo3SCxLQUFLMkgsSUFJVCxJQURBLElBQUlHLEVBQVM5SCxLQUFLMkgsSUFBSXZGLE9BQVMsRUFDdEIyQixFQUFJLEVBQUdBLEdBQUsrRCxJQUFVL0QsRUFBRyxDQUM5QixJQUFJZ0UsRUFBUSxFQUFJaEUsRUFBSSxFQUNwQjhELEVBQUlHLE9BQU9oSSxLQUFLMkgsSUFBSUksR0FBTzNILEVBQUdKLEtBQUsySCxJQUFJSSxHQUFPMUgsR0FDOUN3SCxFQUFJSSxPQUFPakksS0FBSzJILElBQUlJLEVBQVEsR0FBRzNILEVBQUdKLEtBQUsySCxJQUFJSSxFQUFRLEdBQUcxSCxHQUN0RHdILEVBQUlJLE9BQU9qSSxLQUFLMkgsSUFBSUksRUFBUSxHQUFHM0gsRUFBR0osS0FBSzJILElBQUlJLEVBQVEsR0FBRzFILEdBQ3REd0gsRUFBSUksT0FBT2pJLEtBQUsySCxJQUFJSSxHQUFPM0gsRUFBR0osS0FBSzJILElBQUlJLEdBQU8xSCxLQUcxRCxFQW5IQSxHQ0NPLFNBQVN5RCxFQUFjb0UsR0FDMUIsT0FBTzdGLEtBQUs4RixHQUFLRCxFQUFJLElBS2xCLFNBQVNqRyxFQUFhbUcsRUFBV0MsR0FDcEMsT0FBT2hHLEtBQUtpRyxJQUFJRixFQUFJQyxHQUhPLEtBcUJ4QixTQUFTRSxFQUFrQkMsRUFBdUI3RCxHQUtyRCxPQUpvQjZELEVBQVNDLEtBQUksU0FBQUMsR0FBTyxPQUFBQSxFQUFJQyxFQUFFakUsSUFBSUMsRUFBSytELEVBQUk1RyxNQUN0RDhHLFFBQU8sU0FBQUMsR0FBUSxPQUFBQSxFQUFLL0QsVUFDcEJnRSxNQUFLLFNBQUNWLEVBQVlDLEdBQWUsT0FBQUQsRUFBRWpHLEVBQUlrRyxFQUFFbEcsS0FrQjNDLFNBQVNELEVBQUtrRyxFQUFXQyxFQUFXbEcsR0FDdkMsT0FBT2lHLEVBQUlqRyxHQUFLa0csRUFBSUQsRyxRQ25EeEIsV0FxQkksV0FBWTFDLEVBQVdxRCxFQUFXQyxFQUFXM0gsRUFBV0MsR0FDcER0QixLQUFLMEYsRUFBSUEsRUFDVDFGLEtBQUsrSSxFQUFJQSxFQUNUL0ksS0FBS2dKLEVBQUlBLEVBQ1RoSixLQUFLcUIsRUFBSUEsRUFDVHJCLEtBQUtzQixFQUFJQSxFQWdCakIsT0F6Q1csRUFBQTJILGFBQVAsU0FBb0J2RCxFQUFXcUQsRUFBV0MsRUFBVzNILEVBQVdDLEdBRTVELE9BRGEsSUFBSTRILEVBQU94RCxFQUFHcUQsRUFBR0MsRUFBRzNILEVBQUdDLElBSWpDLEVBQUFZLEtBQVAsU0FBWTFCLEVBQVlDLEVBQVkwQixHQU1oQyxPQUFPLElBQUkrRyxFQUxILE9BQVkxSSxFQUFHa0YsRUFBR2pGLEVBQUdpRixFQUFHdkQsR0FDeEIsT0FBWTNCLEVBQUd1SSxFQUFHdEksRUFBR3NJLEVBQUc1RyxHQUN4QkQsRUFBSzFCLEVBQUd3SSxFQUFHdkksRUFBR3VJLEVBQUc3RyxHQUNqQkQsRUFBSzFCLEVBQUdhLEVBQUdaLEVBQUdZLEVBQUdjLEdBQ2pCRCxFQUFLMUIsRUFBR2MsRUFBR2IsRUFBR2EsRUFBR2EsS0FrQjdCLFlBQUFNLE1BQUEsV0FDSSxPQUFPLElBQUl5RyxFQUFPbEosS0FBSzBGLEVBQUVqRCxRQUFTekMsS0FBSytJLEVBQUV0RyxRQUFTekMsS0FBS2dKLEVBQUdoSixLQUFLcUIsRUFBR3JCLEtBQUtzQixJQUczRSxZQUFBZ0YsU0FBQSxTQUFTWixHQUVMLE9BREExRixLQUFLMEYsRUFBSUEsRUFDRjFGLE1BR1gsWUFBQXVHLFNBQUEsU0FBU3lDLEdBRUwsT0FEQWhKLEtBQUtnSixFQUFJQSxFQUNGaEosTUFFZixFQTFDQSxHLEVDR0EsV0FHSSxhQUVJQSxLQUFLbUosVUFBWSxHQUVqQixJQUFJSixFQUFJLElBQUksRUFBTyxFQUFHLEdBQUksR0FDMUIvSSxLQUFLbUosVUFBVXpCLEtBQ1gsSUFBSSxFQUNBLElBQUksRUFBTyxJQUFJLEdBQVEsSUFBSyxJQUFLLElBQUtxQixFQUFHLEVBQUcsRUFBRyxHQUMvQyxJQUFJLEVBQU8sSUFBSSxFQUFPLEdBQUksSUFBSyxJQUFLQSxFQUFHLEVBQUcsRUFBRyxHQUM3QyxJQUFJLEVBQU8sSUFBSSxFQUFPLElBQUssSUFBSyxJQUFLQSxFQUFHLEVBQUcsRUFBRyxLQUV0RC9JLEtBQUttSixVQUFVekIsS0FDWCxJQUFJLEVBQ0EsSUFBSSxFQUFPLElBQUksR0FBUSxJQUFLLElBQUssSUFBS3FCLEVBQUcsRUFBRyxFQUFHLEdBQy9DLElBQUksRUFBTyxJQUFJLEdBQVEsR0FBSSxJQUFLLElBQUtBLEVBQUcsRUFBRyxFQUFHLEdBQzlDLElBQUksRUFBTyxJQUFJLEVBQU8sR0FBSSxJQUFLLElBQUtBLEVBQUcsRUFBRyxFQUFHLEtBSXJELElBREEsSUFBSUssRUFBSSxDQUFDLFlBQW9CLElBQUssWUFBb0IsS0FBTSxZQUFvQixLQUFNLFlBQW9CLElBQUssYUFBcUIsS0FDM0huRSxFQUFJLEVBQUdBLEVBQUltRSxFQUFFaEgsU0FBVTZDLEVBQUcsQ0FDL0IsSUFBSW9FLEVBQWVELEVBQUVuRSxHQUNqQnFFLEVBQUssaUJBQXlCRCxFQUFjTixHQUNoRC9JLEtBQUttSixVQUFVekIsS0FDWCxJQUFJLEVBQ0EsZUFBb0IsaUJBQXlCMkIsRUFBYyxJQUFJLEdBQVMsSUFBSyxJQUFLLEtBQU1DLEVBQUksRUFBRyxFQUFHLEdBQ2xHLGVBQW9CLGlCQUF5QkQsRUFBYyxJQUFJLEVBQU8sR0FBSSxJQUFLLEtBQU1DLEVBQUksRUFBRyxFQUFHLEdBQy9GLGVBQW9CLGlCQUF5QkQsRUFBYyxJQUFJLEVBQU8sSUFBSyxJQUFLLEtBQU1DLEVBQUksRUFBRyxFQUFHLEtBRXhHdEosS0FBS21KLFVBQVV6QixLQUNYLElBQUksRUFDQSxlQUFvQixpQkFBeUIyQixFQUFjLElBQUksR0FBUSxJQUFLLElBQUssS0FBTUMsRUFBSSxFQUFHLEVBQUcsR0FDakcsZUFBb0IsaUJBQXlCRCxFQUFjLElBQUksR0FBUSxHQUFJLElBQUssS0FBTUMsRUFBSSxFQUFHLEVBQUcsR0FDaEcsZUFBb0IsaUJBQXlCRCxFQUFjLElBQUksRUFBTyxHQUFJLElBQUssS0FBTUMsRUFBSSxFQUFHLEVBQUcsTUE0Q25ILE9BdkNJLFlBQUFDLE9BQUEsU0FBT0MsRUFBZ0JoRSxHQWlCbkJ4RixLQUFLeUoscUJBQXVCekosS0FBS21KLFVBR2pDLElBQUssSUFBSWxFLEVBQUksRUFBR0EsRUFBSWpGLEtBQUt5SixxQkFBcUJySCxTQUFVNkMsRUFDcERqRixLQUFLeUoscUJBQXFCeEUsR0FBR2tDLFFBQVFxQyxFQUFRaEUsSUFJckQsWUFBQW9DLEtBQUEsU0FBS0MsR0FFREEsRUFBSTZCLHlCQUEyQixtQkFFL0I3QixFQUFJOEIsWUFBYyxrQkFHbEI5QixFQUFJK0IsWUFFSixJQUFLLElBQUkzRSxFQUFJLEVBQUdBLEVBQUlqRixLQUFLeUoscUJBQXFCckgsU0FBVTZDLEVBQ3BEakYsS0FBS3lKLHFCQUFxQnhFLEdBQUcyQyxLQUFLQyxHQUV0Q0EsRUFBSWdDLFVBRVosRUEvRUEsRyxFQ0RBLFdBU0ksV0FBWUMsR0FDUjlKLEtBQUs4SixNQUFRQSxFQVVyQixPQVBJLFlBQUFDLFFBQUEsU0FBUUMsRUFBbUJDLEVBQTZCekIsRUFBdUIwQixHQUMzRSxJSEljOUosRUdKVjJJLEVBQUlpQixFQUFTM0YsT0FDYjhGLEdBQXNELEdIRzVDL0osR0dIUSxNQUFXNkosRUFBcUJsQixJQUFPLElITXhEM0ksRUdOcUQsSUhTbkRBLEdHUEhnSyxFSGtCTCxTQUEyQkosRUFBbUJDLEVBQTZCekIsR0FHOUUsSUFBSXpJLEVBQU1rSyxFQUFvQnpILFdBQzFCMUMsRUFBT2tLLEVBQVNoRixRQUFROUQsSUFBSW5CLEVBQUlvQixTQWpDVCxPQW9DM0IsT0FBNEIsR0FEUm9ILEVBQWtCQyxFQUQ1QixJQUFJLEVBQUkxSSxFQUFNQyxJQUVOcUMsT0FDUCxJQUVBLEVHNUJhaUksQ0FBa0JMLEVBQVVDLEVBQXFCekIsR0FDckUsT0FBT3hJLEtBQUs4SixNQUFNM0ksU0FBU2dKLEdBQVVoSixTQUFTaUosSUFqQjNDLEVBQUFFLE9BQVMsSUFBSUMsRUFBUSxJQUFJLEVBQU8sRUFBRyxFQUFHLElBQ3RDLEVBQUFDLElBQU0sSUFBSUQsRUFBUSxJQUFJLEVBQU8sRUFBRyxFQUFHLElBQ25DLEVBQUFFLE1BQVEsSUFBSUYsRUFBUSxJQUFJLEVBQU8sRUFBRyxFQUFHLElBQ3JDLEVBQUFHLEtBQU8sSUFBSUgsRUFBUSxJQUFJLEVBQU8sRUFBRyxFQUFHLElBQ3BDLEVBQUFJLEtBQU8sSUFBSUosRUFBUSxJQUFJLEVBQU8sR0FBSyxHQUFLLEtBQ3hDLEVBQUFLLE1BQVEsSUFBSUwsRUFBUSxJQUFJLEVBQU8sRUFBRyxFQUFHLElBY2hELEVBcEJBLEcsRUNHQSxXQTZCSSxXQUFZTSxFQUFhQyxFQUFpQkMsRUFBb0JDLEVBQWlCQyxFQUFpQnhKLEVBQVd5SixHQXNDM0csS0FBQUMsUUFBVSxTQUFVckosRUFBV0YsR0FDM0I1QixLQUFLNkssSUFBTSxNQUFXN0ssS0FBSzZLLElBQUtqSixFQUFFVCxTQUFTVyxLQXJDM0M5QixLQUFLb0wsTUFBUUosRUFBVUMsRUFDdkJqTCxLQUFLZ0wsUUFBVUEsRUFDZmhMLEtBQUtpTCxRQUFVQSxFQUNmakwsS0FBS3FMLGNBQStCLEdBQWZyTCxLQUFLZ0wsUUFDMUJoTCxLQUFLc0wsY0FBK0IsR0FBZnRMLEtBQUtpTCxRQUMxQmpMLEtBQUt1TCxNQUF1QixHQUFmdkwsS0FBS2dMLFFBQ2xCaEwsS0FBS3dMLE1BQXVCLEdBQWZ4TCxLQUFLaUwsUUFHbEJqTCxLQUFLeUwsT0FBUyxRQUFhWCxFQUFTRCxHQUFLN0osWUFHekMsSUFBSTBLLEVBQVMsS0FDYjFMLEtBQUsyTCxPQUFTLFFBQWFELEVBQVExTCxLQUFLeUwsUUFBUXpLLFlBQ2hEaEIsS0FBSzRMLE9BQVMsUUFBYTVMLEtBQUt5TCxPQUFRekwsS0FBSzJMLFFBRzdDM0wsS0FBSzZLLElBQU1BLEVBR1g3SyxLQUFLK0ssV0FBYUEsRUFHbEIvSyxLQUFLeUIsRUFBSUEsRUFDVHpCLEtBQUtrTCxFQUFJQSxFQUlUbEwsS0FBS29JLEVBQUk4QyxHQUFLQSxFQUFJekosR0FDbEJ6QixLQUFLcUksR0FBSzVHLEVBQUl5SixHQUFLQSxFQUFJekosR0FHdkJ6QixLQUFLNkwsR0FBS3BLLEVBQUl6QixLQUFLb0ksRUFBSXBJLEtBQUtxSSxFQUM1QnJJLEtBQUs4TCxHQUFLWixFQUFJbEwsS0FBS29JLEVBQUlwSSxLQUFLcUksRUF1R3BDLE9BaEdJLFlBQUEwRCxTQUFBLFNBQVNuSSxLQUlULFlBQUFvSSxPQUFBLFNBQU9wSSxLQUlQLFlBQUFxSSxlQUFBLFNBQWVDLEVBQWtCQyxFQUFrQmYsR0FDL0MsSUFBSWdCLEVBQWV0SSxFQUFjLEdBQU05RCxLQUFLK0ssWUFDeENzQixFQUFRaEssS0FBS2lLLElBQUlGLEdBQ2pCRyxFQUFRRixFQUFRakIsRUFNcEIsT0FKVXBMLEtBQUt5TCxPQUNWdkssSUFBSWxCLEtBQUsyTCxPQUFPeEssU0FBUytLLEVBQVdLLElBQ3BDckwsSUFBSWxCLEtBQUs0TCxPQUFPekssU0FBU2dMLEVBQVdFLEtBSzdDLFlBQUF2RyxjQUFBLFNBQWNsRSxHQUNWLElBQUk2QyxFQUFPN0MsRUFBRWYsTUFBTWIsS0FBSzZLLEtBRXhCLE9BRDRCLElBQUksRUFBTyxNQUFXcEcsRUFBTXpFLEtBQUsyTCxRQUFTLE1BQVdsSCxFQUFNekUsS0FBSzRMLFFBQVMsTUFBV25ILEVBQU16RSxLQUFLeUwsVUFJL0gsWUFBQXZGLGtCQUFBLFNBQWtCdEUsR0FDZCxJQUNJNEssRUFBVyxHQUREMUksRUFBYzlELEtBQUsrSyxZQUU3QjBCLEVBQVUsRUFBSXBLLEtBQUtpSyxJQUFJRSxHQUN2QkUsRUFBVSxHQUFLMU0sS0FBS29MLE1BQVEvSSxLQUFLaUssSUFBSUUsSUFFekMsT0FBTyxJQUFJLEVBQU81SyxFQUFFeEIsRUFBSXNNLEVBQVM5SyxFQUFFdkIsRUFBSW9NLEVBQVM3SyxFQUFFdEIsRUFBSU4sS0FBS29JLEVBQUlwSSxLQUFLcUksSUFHeEUsWUFBQWhCLE1BQUEsU0FBTXpGLEdBQ0YsSUFBSUUsRUFBSSxFQUFJRixFQUFFdEIsRUFDZCxPQUFPc0IsRUFBRVQsU0FBU1csSUFHdEIsWUFBQXlGLGNBQUEsU0FBY29GLEdBSVYsSUFBSXZNLEVBQUlKLEtBQUt1TCxNQUFRb0IsRUFBTXZNLEVBQUlKLEtBQUtxTCxjQUNoQ2hMLEdBQUtMLEtBQUt3TCxNQUFRbUIsRUFBTXRNLEVBQUlMLEtBQUtzTCxjQUdyQyxPQURXLElBQUksRUFBT2xMLEVBQUdDLEVBQUdzTSxFQUFNck0sSUFLdEMsWUFBQXNNLE9BQUEsU0FBT0MsRUFBNkJyRSxHQUFwQyxXQUNReUIsRUFBc0IsSUFBSSxFQUFPLEdBQUksRUFBRyxHQUFHakosWUFFM0M4TCxFQUFvQixHQUFNRCxFQUFjbEUsRUFDeENvRSxFQUFtQixDQUNuQixDQUFFM00sRUFBRyxFQUFHQyxFQUFHLEdBQ1gsQ0FBRUQsRUFBRzBNLEVBQW1Cek0sRUFBR3lNLEdBQzNCLENBQUUxTSxHQUFJME0sRUFBbUJ6TSxFQUFHeU0sR0FDNUIsQ0FBRTFNLEdBQUkwTSxFQUFtQnpNLEdBQUl5TSxHQUM3QixDQUFFMU0sRUFBRzBNLEVBQW1Cek0sR0FBSXlNLElBR2hDRCxFQUFjRyxjQUFhLFNBQUNkLEVBQWtCQyxFQUFrQmYsR0FDNUQsSUFBSTZCLEVBQVUsRUFBS2hCLGVBQWVDLEVBQVVDLEVBQVVmLEdBWWxEOEIsRUFUT0gsRUFBaUJ0RSxLQUFJLFNBQUFoRSxHQUU1QixJQUFJMUUsRUFBTWtOLEVBQVEvTCxJQUFJLEVBQUt5SyxPQUFPeEssU0FBU3NELEVBQUtyRSxJQUFJYyxJQUFJLEVBQUswSyxPQUFPekssU0FBU3NELEVBQUtwRSxJQUdsRixPQUFPLElBQUksRUFBSSxFQUFLd0ssSUFBSzlLLEVBQUlpQixnQkFJZnlILEtBQUksU0FBQTlELEdBQ2xCLElBQUl3SSxFQUFnQjVFLEVBQWtCQyxFQUFVN0QsR0FJaEQsR0FEcUMsR0FBeEJ3SSxFQUFjL0ssT0FDZixDQUNSLElBQUk0SCxFQUFXbUQsRUFBYyxHQUM3QixPQUFPbkQsRUFBU2xJLEVBQUVpSSxRQUFRQyxFQUFVQyxFQUFxQnpCLEVBQVUsR0FFbkUsT0FBTyxnQkFLWDRFLEVBQVFMLEVBQWlCM0ssT0FFN0IsT0FEa0I4SyxFQUFPRyxRQUFPLFNBQUNDLEVBQXFCQyxHQUFvQixPQUFBRCxFQUFZcE0sSUFBSXFNLEtBQVUsUUFBYXBNLFNBQVMsRUFBSWlNLE9BSTFJLEVBdktBLEdDTEEsSUNDQSxXQWVJLHdCQWJBLEtBQUFJLGlCQUFtQixFQUNuQixLQUFBQyxvQkFBc0IsRUFDdEIsS0FBQWpFLE9BQWlCLEtBR2pCLEtBQUFrRSxZQUFjLElBQ2QsS0FBQUMsYUFBZSxJQUNmLEtBQUFDLElBQVcsS0FRUEMsT0FBT0MsT0FBUyxXQUNaLEVBQUtDLFFBRVRDLFNBQVNDLFVBQVlqTyxLQUFLa08sUUFBUUMsS0FBS25PLE1Bd0gvQyxPQXJISSxZQUFBK04sS0FBQSxXQUNJLElBQUlLLEVBQVNKLFNBQVNLLGVBQWUsVUFDckNELEVBQU9FLE1BQU1DLE1BQVF2TyxLQUFLME4sWUFBYyxLQUN4Q1UsRUFBT0UsTUFBTUUsT0FBU3hPLEtBQUsyTixhQUFlLEtBQzFDUyxFQUFPRyxNQUFRSCxFQUFPSyxZQUN0QkwsRUFBT0ksT0FBU0osRUFBT00sYUFDdkIxTyxLQUFLNkgsSUFBTXVHLEVBQU9PLFdBQVcsTUFFN0IzTyxLQUFLNE4sSUFBTSxJQUFJLEVBQ2Y1TixLQUFLd0osT0FBUyxJQUFJLEVBQU8sSUFBSSxFQUFPLEVBQUcsSUFBSyxLQUFNLElBQUksRUFBTyxFQUFHLEVBQUcsR0FBSSxHQUFJeEosS0FBSzBOLFlBQWExTixLQUFLMk4sYUFBYyxFQUFHLEtBQ25IM04sS0FBSzRPLFNBR1QsWUFBQUEsTUFBQSxzQkFDSTVPLEtBQUs2TyxPQUNMN08sS0FBSzhPLE1BQVEsRUFDYixJQUFJNUcsRUFBSSxJQUFJNkcsS0FDWi9PLEtBQUtnUCxPQUFTOUcsRUFBRStHLFVBQ2hCalAsS0FBS2tQLFFBQVVyQixPQUFPc0IsYUFBWSxXQUFRLEVBQUtDLGNBQWdCLEtBR25FLFlBQUFDLE9BQUEsc0JBQ1FuSCxFQUFJLElBQUk2RyxLQUNaL08sS0FBS2dQLE9BQVM5RyxFQUFFK0csVUFDaEJqUCxLQUFLa1AsUUFBVXJCLE9BQU9zQixhQUFZLFdBQVEsRUFBS0MsY0FBZ0IsS0FHbkUsWUFBQVAsS0FBQSxXQUNJaEIsT0FBT3lCLGNBQWN0UCxLQUFLa1AsU0FDMUJsUCxLQUFLa1AsUUFBVSxNQUduQixZQUFBRSxVQUFBLFdBQ0ksSUFDSWpOLEdBREksSUFBSTRNLE1BQ0ZFLFVBQ054SyxFQUFPdEMsRUFBSW5DLEtBQUtnUCxPQUNwQmhQLEtBQUtnUCxPQUFTN00sRUFDZG5DLEtBQUs4TyxNQUFROU8sS0FBSzhPLE1BQVFySyxFQUcxQnpFLEtBQUs2SCxJQUFJMEgsVUFBVSxFQUFHLEVBQUd2UCxLQUFLME4sWUFBYTFOLEtBQUsyTixjQUNoRDNOLEtBQUs2SCxJQUFJK0IsWUFDVDVKLEtBQUs2SCxJQUFJMkgsVUFBWSxzQkFDckJ4UCxLQUFLNkgsSUFBSTRILFNBQVMsRUFBRyxFQUFHelAsS0FBSzBOLFlBQWExTixLQUFLMk4sY0FHL0MsSUFBSStCLEVBQWUsU0FBaUIsRUFBRyxFQUFHLEdBQ3RDQyxFQUFZM1AsS0FBSzhPLE1BQVEsSUFBTyxHQUFLLElBR3JDekYsRUFBZSxZQUFvQnNHLEdBQ25DQyxFQUFnQixxQkFBNkJGLEVBQWNyRyxHQUMvRHJKLEtBQUs0TixJQUFJckUsT0FBT3ZKLEtBQUt3SixPQUFRb0csR0FDN0I1UCxLQUFLNE4sSUFBSWhHLEtBQUs1SCxLQUFLNkgsS0FFZjZILEVBQWUsU0FBaUIsSUFBSyxFQUFHLEdBQ3hDckcsRUFBZSxZQUFvQnNHLEdBQ3ZDQyxFQUFnQixxQkFBNkJ2RyxFQUFjcUcsR0FDM0QxUCxLQUFLNE4sSUFBSXJFLE9BQU92SixLQUFLd0osT0FBUW9HLEdBQzdCNVAsS0FBSzROLElBQUloRyxLQUFLNUgsS0FBSzZILE1BR3ZCLFlBQUFxRyxRQUFBLFNBQVEyQixHQW1CSixPQUFRQSxFQUFNQyxTQUNWLEtBakJHLEdBa0JDOVAsS0FBS3dKLE9BQU8yQixRQUpSLEVBSXVCbkwsS0FBS3dKLE9BQU9pQyxRQUN2QyxNQUNKLEtBbkJHLEdBb0JDekwsS0FBS3dKLE9BQU8yQixTQVBSLEVBT3dCbkwsS0FBS3dKLE9BQU9pQyxRQUN4QyxNQUVKLEtBckJHLEdBc0JDekwsS0FBS3dKLE9BQU8yQixRQVhSLEVBV3VCbkwsS0FBS3dKLE9BQU9vQyxRQUN2QyxNQUNKLEtBdkJHLEdBd0JDNUwsS0FBS3dKLE9BQU8yQixTQWRSLEVBY3dCbkwsS0FBS3dKLE9BQU9vQyxRQUN4QyxNQUNKLEtBekJHLEdBMEJDNUwsS0FBS3dKLE9BQU8yQixTQWpCUixFQWlCd0JuTCxLQUFLd0osT0FBT21DLFFBQ3hDLE1BQ0osS0EzQkcsR0E0QkMzTCxLQUFLd0osT0FBTzJCLFFBcEJSLEVBb0J1Qm5MLEtBQUt3SixPQUFPbUMsUUFDdkMsTUFFSixLQTdCTSxHQThCRjNMLEtBQUt3SixPQUFPdUMsU0F2Qk4sSUF3Qk4sTUFDSixLQS9CUSxHQWdDSi9MLEtBQUt3SixPQUFPdUMsVUFBUyxJQUNyQixNQUVKLEtBbENRLEdBbUNKL0wsS0FBS3dKLE9BQU93QyxRQUFPLElBQ25CLE1BQ0osS0FwQ1MsR0FxQ0xoTSxLQUFLd0osT0FBT3dDLE9BakNOLE1BcUN0QixFQTVJQSxLIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vd2ViZ2xfdGVzdC8uL3NyYy9NYXRoL1JheS50cyIsIndlYnBhY2s6Ly93ZWJnbF90ZXN0Ly4vc3JjL01hdGgvVmVjdG9yLnRzIiwid2VicGFjazovL3dlYmdsX3Rlc3QvLi9zcmMvTWF0aC9UcmFuc2Zvcm0udHMiLCJ3ZWJwYWNrOi8vd2ViZ2xfdGVzdC8uL3NyYy9NYXRoL1BsYW5lLnRzIiwid2VicGFjazovL3dlYmdsX3Rlc3QvLi9zcmMvTWF0aC9UcmlhbmdsZS50cyIsIndlYnBhY2s6Ly93ZWJnbF90ZXN0Ly4vc3JjL01hdGgvVG9vbC50cyIsIndlYnBhY2s6Ly93ZWJnbF90ZXN0Ly4vc3JjL01hdGgvVmVydGV4LnRzIiwid2VicGFjazovL3dlYmdsX3Rlc3QvLi9zcmMvTWF0aC9Cb3gzRC50cyIsIndlYnBhY2s6Ly93ZWJnbF90ZXN0Ly4vc3JjL01hdGVyYWlscy9EaWZmdXNlLnRzIiwid2VicGFjazovL3dlYmdsX3Rlc3QvLi9zcmMvTWF0aC9DYW1lcmEudHMiLCJ3ZWJwYWNrOi8vd2ViZ2xfdGVzdC8uL3NyYy9tYWluLnRzIiwid2VicGFjazovL3dlYmdsX3Rlc3QvLi9zcmMvUmFzdGVyaXplckFwcC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgVmVjb3IgZnJvbSBcIi4vVmVjdG9yXCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSYXkge1xyXG4gICAgZnJvbTogVmVjb3I7XHJcbiAgICBkaXI6IFZlY29yO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKGZyb206IFZlY29yLCBkaXI6IFZlY29yKSB7XHJcbiAgICAgICAgdGhpcy5mcm9tID0gZnJvbTtcclxuICAgICAgICB0aGlzLmRpciA9IGRpcjtcclxuICAgIH1cclxufTsiLCJpbXBvcnQgeyBsZXJwLCBudW1iZXJfZXF1YWwgfSBmcm9tICcuL1Rvb2wnXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBWZWN0b3Ige1xyXG5cclxuICAgIHN0YXRpYyBjYWxjdWxhdGVfbm9ybWFsKHYwOiBWZWN0b3IsIHYxOiBWZWN0b3IsIHYyOiBWZWN0b3IpIHtcclxuICAgICAgICBsZXQgdjAxID0gVmVjdG9yLm1pbnVzKHYxLCB2MCk7XHJcbiAgICAgICAgbGV0IHYwMiA9IFZlY3Rvci5taW51cyh2MiwgdjApO1xyXG4gICAgICAgIGxldCBub3JtYWwgPSBWZWN0b3IuY3Jvc3ModjAxLCB2MDIpO1xyXG4gICAgICAgIHJldHVybiBub3JtYWwubm9ybWFsaXplKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGNhbGN1bGF0ZV9jZW50ZXIodjA6IFZlY3RvciwgdjE6IFZlY3RvciwgdjI6IFZlY3Rvcikge1xyXG4gICAgICAgIHJldHVybiB2MC5hZGQodjEpLmFkZCh2MikubXVsdGlwbHkoMSAvIDMpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyB1dih1OiBudW1iZXIsIHY6IG51bWJlcikge1xyXG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yKHUsIHYsIDApO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyB1cCA9IG5ldyBWZWN0b3IoMCwgMSwgMCk7XHJcbiAgICBzdGF0aWMgemVybyA9IG5ldyBWZWN0b3IoMCwgMCwgMCk7XHJcblxyXG4gICAgc3RhdGljIHJlZmxlY3QoSTogVmVjdG9yLCBOOiBWZWN0b3IpIHtcclxuICAgICAgICBsZXQgTCA9IC0yICogVmVjdG9yLmRvdChJLCBOKVxyXG4gICAgICAgIHJldHVybiBOLm11bHRpcGx5KEwpLmFkZChJKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgYWRkKEE6IFZlY3RvciwgQjogVmVjdG9yKSB7XHJcbiAgICAgICAgbGV0IHRlbXAgPSBuZXcgVmVjdG9yKEIueCArIEEueCwgQi55ICsgQS55LCBCLnogKyBBLnopO1xyXG4gICAgICAgIHJldHVybiB0ZW1wXHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIG1pbnVzKEE6IFZlY3RvciwgQjogVmVjdG9yKSB7XHJcbiAgICAgICAgbGV0IHRlbXAgPSBuZXcgVmVjdG9yKEEueCAtIEIueCwgQS55IC0gQi55LCBBLnogLSBCLnopO1xyXG4gICAgICAgIHJldHVybiB0ZW1wXHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIG11bHRpcGx5KEE6IFZlY3RvciwgczogbnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IHRlbXAgPSBuZXcgVmVjdG9yKEEueCAqIHMsIEEueSAqIHMsIEEueiAqIHMpO1xyXG4gICAgICAgIHJldHVybiB0ZW1wXHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIG11bHRpcGx5MyhBOiBWZWN0b3IsIEI6IFZlY3Rvcikge1xyXG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yKEEueCAqIEIueCwgQS55ICogQi55LCBBLnogKiBCLnopO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBjcm9zcyhBOiBWZWN0b3IsIEI6IFZlY3Rvcikge1xyXG4gICAgICAgIGxldCB0ZW1wID0gbmV3IFZlY3RvcihBLnkgKiBCLnogLSBBLnogKiBCLnksIC1BLnggKiBCLnogKyBBLnogKiBCLngsIEEueCAqIEIueSAtIEEueSAqIEIueCk7XHJcbiAgICAgICAgcmV0dXJuIHRlbXA7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGRvdChBOiBWZWN0b3IsIEI6IFZlY3Rvcikge1xyXG4gICAgICAgIHJldHVybiBBLnggKiBCLnggKyBBLnkgKiBCLnkgKyBBLnogKiBCLno7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGVxdWFsKEE6IFZlY3RvciwgQjogVmVjdG9yKSB7XHJcbiAgICAgICAgcmV0dXJuIG51bWJlcl9lcXVhbChBLngsIEIueCkgJiYgbnVtYmVyX2VxdWFsKEEueSwgQi55KSAmJiBudW1iZXJfZXF1YWwoQS56LCBCLnopO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBsZXJwKEE6IFZlY3RvciwgQjogVmVjdG9yLCB0OiBudW1iZXIpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcihcclxuICAgICAgICAgICAgbGVycChBLngsIEIueCwgdCksXHJcbiAgICAgICAgICAgIGxlcnAoQS55LCBCLnksIHQpLFxyXG4gICAgICAgICAgICBsZXJwKEEueiwgQi56LCB0KSk7XHJcbiAgICB9XHJcblxyXG4gICAgeDogbnVtYmVyID0gMDtcclxuICAgIHk6IG51bWJlciA9IDA7XHJcbiAgICB6OiBudW1iZXIgPSAwO1xyXG4gICAgY29uc3RydWN0b3IocHg6IG51bWJlciwgcHk6IG51bWJlciwgcHo6IG51bWJlcikge1xyXG4gICAgICAgIHRoaXMueCA9IHB4O1xyXG4gICAgICAgIHRoaXMueSA9IHB5O1xyXG4gICAgICAgIHRoaXMueiA9IHB6O1xyXG4gICAgfVxyXG5cclxuICAgIGxlbmd0aCgpIHtcclxuICAgICAgICByZXR1cm4gTWF0aC5zcXJ0KHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueSArIHRoaXMueiAqIHRoaXMueik7XHJcbiAgICB9XHJcblxyXG4gICAgbm9ybWFsaXplKCkge1xyXG4gICAgICAgIGxldCB0ZW1wID0gdGhpcy5sZW5ndGgoKTtcclxuICAgICAgICB0aGlzLnggPSB0aGlzLnggLyB0ZW1wO1xyXG4gICAgICAgIHRoaXMueSA9IHRoaXMueSAvIHRlbXA7XHJcbiAgICAgICAgdGhpcy56ID0gdGhpcy56IC8gdGVtcDtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICBhZGQoQTogVmVjdG9yKSB7XHJcbiAgICAgICAgcmV0dXJuIFZlY3Rvci5hZGQodGhpcywgQSk7XHJcbiAgICB9XHJcblxyXG4gICAgbWludXMoQTogVmVjdG9yKSB7XHJcbiAgICAgICAgcmV0dXJuIFZlY3Rvci5taW51cyh0aGlzLCBBKTtcclxuICAgIH1cclxuXHJcbiAgICBtdWx0aXBseShzOiBudW1iZXIpIHtcclxuICAgICAgICByZXR1cm4gVmVjdG9yLm11bHRpcGx5KHRoaXMsIHMpO1xyXG4gICAgfVxyXG5cclxuICAgIG5lZ2F0aXZlKCkge1xyXG4gICAgICAgIHJldHVybiBWZWN0b3IubXVsdGlwbHkodGhpcywgLTEpO1xyXG4gICAgfVxyXG5cclxuICAgIGNsb25lKCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yKHRoaXMueCwgdGhpcy55LCB0aGlzLnopO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IFZlY3RvciBmcm9tIFwiLi9WZWN0b3JcIjtcclxuaW1wb3J0IHsgZGVncmVlX3RvX1JhZCB9IGZyb20gJy4vVG9vbCdcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRyYW5zZm9ybSB7XHJcbiAgICB4QXhpczogVmVjdG9yO1xyXG4gICAgeUF4aXM6IFZlY3RvcjtcclxuICAgIHpBeGlzOiBWZWN0b3I7XHJcbiAgICBwb3NpdGlvbjogVmVjdG9yO1xyXG4gICAgY29uc3RydWN0b3IoeEF4aXM6IFZlY3RvciwgeUF4aXM6IFZlY3RvciwgekF4aXM6IFZlY3RvciwgcG9zaXRpb246IFZlY3Rvcikge1xyXG4gICAgICAgIHRoaXMueEF4aXMgPSB4QXhpcztcclxuICAgICAgICB0aGlzLnlBeGlzID0geUF4aXM7XHJcbiAgICAgICAgdGhpcy56QXhpcyA9IHpBeGlzO1xyXG4gICAgICAgIHRoaXMucG9zaXRpb24gPSBwb3NpdGlvbjtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgdHJhbnNmb3JtUG9pbnQodHJhbnNmb3JtOiBUcmFuc2Zvcm0sIHBvaW50OiBWZWN0b3IpIHtcclxuICAgICAgICBsZXQgdmVjdG9yWCA9IHRyYW5zZm9ybS54QXhpcy5tdWx0aXBseShwb2ludC54KTtcclxuICAgICAgICBsZXQgdmVjdG9yWSA9IHRyYW5zZm9ybS55QXhpcy5tdWx0aXBseShwb2ludC55KTtcclxuICAgICAgICBsZXQgdmVjdG9yWiA9IHRyYW5zZm9ybS56QXhpcy5tdWx0aXBseShwb2ludC56KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHRyYW5zZm9ybS5wb3NpdGlvbi5hZGQodmVjdG9yWCkuYWRkKHZlY3RvclkpLmFkZCh2ZWN0b3JaKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgdHJhbnNmb3JtVmVjdG9yKHRyYW5zZm9ybTogVHJhbnNmb3JtLCB2ZXJ0ZXg6IFZlY3Rvcikge1xyXG4gICAgICAgIGxldCB2ZWN0b3JYID0gdHJhbnNmb3JtLnhBeGlzLm11bHRpcGx5KHZlcnRleC54KTtcclxuICAgICAgICBsZXQgdmVjdG9yWSA9IHRyYW5zZm9ybS55QXhpcy5tdWx0aXBseSh2ZXJ0ZXgueSk7XHJcbiAgICAgICAgbGV0IHZlY3RvclogPSB0cmFuc2Zvcm0uekF4aXMubXVsdGlwbHkodmVydGV4LnopO1xyXG5cclxuICAgICAgICByZXR1cm4gdmVjdG9yWC5hZGQodmVjdG9yWSkuYWRkKHZlY3RvclopO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyB0cmFuc2Zvcm1UcmFuc2Zvcm0odHJhbnNmb3JtOiBUcmFuc2Zvcm0sIGlucHV0VHJhbnNmb3JtOiBUcmFuc2Zvcm0pIHtcclxuICAgICAgICByZXR1cm4gbmV3IFRyYW5zZm9ybShcclxuICAgICAgICAgICAgVHJhbnNmb3JtLnRyYW5zZm9ybVZlY3Rvcih0cmFuc2Zvcm0sIGlucHV0VHJhbnNmb3JtLnhBeGlzKSxcclxuICAgICAgICAgICAgVHJhbnNmb3JtLnRyYW5zZm9ybVZlY3Rvcih0cmFuc2Zvcm0sIGlucHV0VHJhbnNmb3JtLnlBeGlzKSxcclxuICAgICAgICAgICAgVHJhbnNmb3JtLnRyYW5zZm9ybVZlY3Rvcih0cmFuc2Zvcm0sIGlucHV0VHJhbnNmb3JtLnpBeGlzKSxcclxuICAgICAgICAgICAgVHJhbnNmb3JtLnRyYW5zZm9ybVBvaW50KHRyYW5zZm9ybSwgaW5wdXRUcmFuc2Zvcm0ucG9zaXRpb24pLFxyXG4gICAgICAgICk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIHJvdGF0ZUJ5WihkZWdyZWU6IG51bWJlcikge1xyXG4gICAgICAgIGxldCByYWRpYW4gPSBkZWdyZWVfdG9fUmFkKGRlZ3JlZSk7XHJcbiAgICAgICAgbGV0IGMgPSBNYXRoLmNvcyhyYWRpYW4pLCBzID0gTWF0aC5zaW4ocmFkaWFuKTtcclxuICAgICAgICBsZXQgeEF4aXMgPSBuZXcgVmVjdG9yKGMsIHMsIDApO1xyXG4gICAgICAgIGxldCB5QXhpcyA9IG5ldyBWZWN0b3IoLXMsIGMsIDApO1xyXG4gICAgICAgIGxldCB6QXhpcyA9IG5ldyBWZWN0b3IoMCwgMCwgMSk7XHJcblxyXG4gICAgICAgIHJldHVybiBuZXcgVHJhbnNmb3JtKFxyXG4gICAgICAgICAgICB4QXhpcyxcclxuICAgICAgICAgICAgeUF4aXMsXHJcbiAgICAgICAgICAgIHpBeGlzLFxyXG4gICAgICAgICAgICBWZWN0b3IuemVybyxcclxuICAgICAgICApO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyByb3RhdGVCeVkoZGVncmVlOiBudW1iZXIpIHtcclxuICAgICAgICBsZXQgcmFkaWFuID0gZGVncmVlX3RvX1JhZChkZWdyZWUpO1xyXG4gICAgICAgIGxldCBjID0gTWF0aC5jb3MocmFkaWFuKSwgcyA9IE1hdGguc2luKHJhZGlhbik7XHJcbiAgICAgICAgbGV0IHpBeGlzID0gbmV3IFZlY3RvcihzLCAwLCBjKTtcclxuICAgICAgICBsZXQgeEF4aXMgPSBuZXcgVmVjdG9yKGMsIDAsIC1zKTtcclxuICAgICAgICBsZXQgeUF4aXMgPSBuZXcgVmVjdG9yKDAsIDEsIDApO1xyXG5cclxuICAgICAgICByZXR1cm4gbmV3IFRyYW5zZm9ybShcclxuICAgICAgICAgICAgeEF4aXMsXHJcbiAgICAgICAgICAgIHlBeGlzLFxyXG4gICAgICAgICAgICB6QXhpcyxcclxuICAgICAgICAgICAgVmVjdG9yLnplcm8sXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgcm90YXRlQnlYKGRlZ3JlZTogbnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IHJhZGlhbiA9IGRlZ3JlZV90b19SYWQoZGVncmVlKTtcclxuICAgICAgICBsZXQgYyA9IE1hdGguY29zKHJhZGlhbiksIHMgPSBNYXRoLnNpbihyYWRpYW4pO1xyXG4gICAgICAgIGxldCB4QXhpcyA9IG5ldyBWZWN0b3IoMSwgMCwgMCk7XHJcbiAgICAgICAgbGV0IHlBeGlzID0gbmV3IFZlY3RvcigwLCBjLCBzKTtcclxuICAgICAgICBsZXQgekF4aXMgPSBuZXcgVmVjdG9yKDAsIC1zLCBjKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBUcmFuc2Zvcm0oXHJcbiAgICAgICAgICAgIHhBeGlzLFxyXG4gICAgICAgICAgICB5QXhpcyxcclxuICAgICAgICAgICAgekF4aXMsXHJcbiAgICAgICAgICAgIG5ldyBWZWN0b3IoMCwgMCwgMCksXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgb2Zmc2V0KHg6IG51bWJlciwgeTogbnVtYmVyLCB6OiBudW1iZXIpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFRyYW5zZm9ybShcclxuICAgICAgICAgICAgbmV3IFZlY3RvcigxLCAwLCAwKSxcclxuICAgICAgICAgICAgbmV3IFZlY3RvcigwLCAxLCAwKSxcclxuICAgICAgICAgICAgbmV3IFZlY3RvcigwLCAwLCAxKSxcclxuICAgICAgICAgICAgbmV3IFZlY3Rvcih4LCB5LCB6KSxcclxuICAgICAgICApO1xyXG4gICAgfVxyXG59XHJcblxyXG5cclxuXHJcblxyXG4iLCJpbXBvcnQgVmVjdG9yIGZyb20gJy4vVmVjdG9yJztcclxuaW1wb3J0IFJheSBmcm9tICcuL1JheSc7XHJcbmltcG9ydCB7IG51bWJlcl9lcXVhbCB9IGZyb20gJy4vVG9vbCc7XHJcbmltcG9ydCBIaXRJbmZvIGZyb20gJy4vSGl0SW5mbyc7XHJcbmltcG9ydCBIaXRhYmxlIGZyb20gJy4vSGl0YWJsZSc7XHJcbmltcG9ydCBTaGFkZXIgZnJvbSAnLi4vTWF0ZXJhaWxzL1NoYWRlcic7XHJcblxyXG4vLyDlubPpnaJcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUGxhbmUgaW1wbGVtZW50cyBIaXRhYmxlIHtcclxuXHJcbiAgICBDOiBWZWN0b3I7XHJcbiAgICBOOiBWZWN0b3I7XHJcbiAgICBjb25zdHJ1Y3Rvcihwb2ludDogVmVjdG9yLCBub3JtYWw6IFZlY3Rvcikge1xyXG4gICAgICAgIHRoaXMuQyA9IHBvaW50O1xyXG4gICAgICAgIHRoaXMuTiA9IG5vcm1hbDtcclxuICAgIH1cclxuXHJcbiAgICAvLyDmuKzoqaZ0ZXNwX3DlkozmlrnlkJHph4/mmK/kuI3mmK/lnKjlkIzkuIDpgopcclxuICAgIGlzX3Bvc2l0aXZlKHRlc3RfcDogVmVjdG9yKSB7XHJcbiAgICAgICAgbGV0IGRpZmYgPSBWZWN0b3IubWludXModGVzdF9wLCB0aGlzLkMpO1xyXG4gICAgICAgIGxldCB2YWx1ZSA9IFZlY3Rvci5kb3QoZGlmZiwgdGhpcy5OKTtcclxuICAgICAgICByZXR1cm4gdmFsdWUgPiAwO1xyXG4gICAgfVxyXG5cclxuICAgIGhpdChyYXk6IFJheSwgczogU2hhZGVyKTogSGl0SW5mbyB7XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IFBsYW5lLmhpdChyYXksIHRoaXMpO1xyXG4gICAgICAgIGlmIChyZXN1bHQuaXNfaGl0KVxyXG4gICAgICAgICAgICByZXN1bHQucyA9IHM7XHJcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgaGl0KHJheTogUmF5LCBwbGFuZTogUGxhbmUpOiBIaXRJbmZvIHtcclxuICAgICAgICAvLyByYXkgaGl0IHBsYW5lIFxyXG4gICAgICAgIGxldCBmcm9tID0gcmF5LmZyb207XHJcbiAgICAgICAgbGV0IGRpciA9IHJheS5kaXI7XHJcblxyXG4gICAgICAgIC8vIChGLUMp44CCTiArIHQgKETjgIJOKSA9IDBcclxuICAgICAgICAvLyB0ICA9IChDLUYp44CCTiAvIChE44CCTilcclxuICAgICAgICAvLyB0ICA9IChBIC8gKEIpXHJcbiAgICAgICAgbGV0IEIgPSBWZWN0b3IuZG90KGRpciwgcGxhbmUuTik7XHJcbiAgICAgICAgbGV0IEEgPSBWZWN0b3IuZG90KFZlY3Rvci5taW51cyhwbGFuZS5DLCBmcm9tKSwgcGxhbmUuTik7XHJcblxyXG4gICAgICAgIC8vIGF2b2lkIGRpdmlkZSBieSAwXHJcbiAgICAgICAgaWYgKG51bWJlcl9lcXVhbChCLCAwKSlcclxuICAgICAgICAgICAgcmV0dXJuIHsgaXNfaGl0OiBmYWxzZSwgaGl0X3BvczogbnVsbCwgdDogLTEgfTtcclxuXHJcbiAgICAgICAgbGV0IHQgPSBBIC8gQjtcclxuICAgICAgICBsZXQgaXNfaGl0ID0gdCA+IDAuMDtcclxuICAgICAgICBsZXQgaGl0X3BvcyA9IGZyb20uYWRkKGRpci5tdWx0aXBseSh0KSk7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgaXNfaGl0LFxyXG4gICAgICAgICAgICBoaXRfcG9zLFxyXG4gICAgICAgICAgICBpOiBkaXIsXHJcbiAgICAgICAgICAgIHQsXHJcbiAgICAgICAgICAgIG5vcm1hbDogcGxhbmUuTlxyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsImltcG9ydCBUcmFuc2Zvcm0gZnJvbSAnLi9UcmFuc2Zvcm0nO1xyXG5pbXBvcnQgVmVjdG9yIGZyb20gJy4vVmVjdG9yJ1xyXG5pbXBvcnQgVmVydGV4IGZyb20gJy4vVmVydGV4J1xyXG5pbXBvcnQgeyBjbGlwIH0gZnJvbSAnLi9Ub29sJztcclxuaW1wb3J0IENhbWVyYSBmcm9tICcuL0NhbWVyYSc7XHJcbmltcG9ydCBQbGFuZSBmcm9tICcuL1BsYW5lJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRyaWFuZ2xlIHtcclxuXHJcbiAgICBzdGF0aWMgTVZQX2JhY2tmYWNlX2N1bGxpbmdfY2xpcHBpbmcodHJpYW5nbGU6IFRyaWFuZ2xlLCBwY2FtZXJhOiBDYW1lcmEsIHdvcmxkVHJhbnNmb3JtOiBUcmFuc2Zvcm0pIHtcclxuICAgICAgICAvLyB0byB3b3JsZCBzcGFjZVxyXG4gICAgICAgIGxldCB2MF93ID0gVHJhbnNmb3JtLnRyYW5zZm9ybVBvaW50KHdvcmxkVHJhbnNmb3JtLCB0cmlhbmdsZS52MC5wKTtcclxuICAgICAgICBsZXQgdjFfdyA9IFRyYW5zZm9ybS50cmFuc2Zvcm1Qb2ludCh3b3JsZFRyYW5zZm9ybSwgdHJpYW5nbGUudjEucCk7XHJcbiAgICAgICAgbGV0IHYyX3cgPSBUcmFuc2Zvcm0udHJhbnNmb3JtUG9pbnQod29ybGRUcmFuc2Zvcm0sIHRyaWFuZ2xlLnYyLnApO1xyXG5cclxuICAgICAgICAvLyB0byBjYW1lcmEgc3BhY2VcclxuICAgICAgICBsZXQgdjBfYyA9IHBjYW1lcmEudG9DYW1lcmFTcGFjZSh2MF93KTtcclxuICAgICAgICBsZXQgdjFfYyA9IHBjYW1lcmEudG9DYW1lcmFTcGFjZSh2MV93KTtcclxuICAgICAgICBsZXQgdjJfYyA9IHBjYW1lcmEudG9DYW1lcmFTcGFjZSh2Ml93KTtcclxuXHJcbiAgICAgICAgbGV0IHYwX3AgPSBwY2FtZXJhLnRvUHJvamVjdGlvblNwYWNlKHYwX2MpO1xyXG4gICAgICAgIGxldCB2MV9wID0gcGNhbWVyYS50b1Byb2plY3Rpb25TcGFjZSh2MV9jKTtcclxuICAgICAgICBsZXQgdjJfcCA9IHBjYW1lcmEudG9Qcm9qZWN0aW9uU3BhY2UodjJfYyk7XHJcblxyXG4gICAgICAgIC8vIGJhY2sgZmFjZSBjdWxsaW5nXHJcbiAgICAgICAgbGV0IG5vcm1hbCA9IFZlY3Rvci5jYWxjdWxhdGVfbm9ybWFsKHYwX3AsIHYxX3AsIHYyX3ApO1xyXG4gICAgICAgIGxldCBjZW50ZXJfdG9fZXllID0gVmVjdG9yLm1pbnVzKFZlY3Rvci56ZXJvLCBWZWN0b3IuY2FsY3VsYXRlX2NlbnRlcih2MF9wLCB2MV9wLCB2Ml9wKSkubm9ybWFsaXplKCk7XHJcbiAgICAgICAgbGV0IGNvc192YWx1ZSA9IFZlY3Rvci5kb3Qobm9ybWFsLCBjZW50ZXJfdG9fZXllKTs7XHJcbiAgICAgICAgaWYgKGNvc192YWx1ZSA8PSAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBbXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIOmHjeaWsOe2geWumnV2XHJcbiAgICAgICAgbGV0IHYwID0gdHJpYW5nbGUudjAuY2xvbmUoKS51cGRhdGVfcCh2MF9wKS51cGRhdGVfdyh2MF9jLnopO1xyXG4gICAgICAgIGxldCB2MSA9IHRyaWFuZ2xlLnYxLmNsb25lKCkudXBkYXRlX3AodjFfcCkudXBkYXRlX3codjFfYy56KTtcclxuICAgICAgICBsZXQgdjIgPSB0cmlhbmdsZS52Mi5jbG9uZSgpLnVwZGF0ZV9wKHYyX3ApLnVwZGF0ZV93KHYyX2Mueik7XHJcblxyXG4gICAgICAgIC8vIOWft+ihjOS4ieinkuW9ouijgeWIh1xyXG4gICAgICAgIHJldHVybiBUcmlhbmdsZS5jbGlwX2luX1Byb2plY3Rpb25fU3BhY2UodjAsIHYxLCB2MiwgcGNhbWVyYSk7XHJcbiAgICB9XHJcblxyXG4gICAgc3RhdGljIGNsaXBfaW5fUHJvamVjdGlvbl9TcGFjZSh2MDogVmVydGV4LCB2MTogVmVydGV4LCB2MjogVmVydGV4LCBwY2FtZXJhOiBDYW1lcmEpIHtcclxuICAgICAgICAvLyBUb2RvOuWft+ihjDblgIvlubPpnaLnmoTkuInop5LlvaLoo4HliIdcclxuICAgICAgICAvLyDlkox56Lu45aS+NDXluqbnmoQy5YCL5bmz6Z2i44CB5ZKMeOi7uOWkvjQ15bqm55qEMuWAi+W5s+mdouOAgemChOaciU5j5ZKMRmNcclxuICAgICAgICAvLyBodHRwczovL2dwbm5vdGVzLmJsb2dzcG90LmNvbS8yMDIxLzExL2Jsb2ctcG9zdF8yOC5odG1sXHJcbiAgICAgICAgLy8gbGV0IHJlc3VsdCA9IGNsaXAobmV3IFRyaWFuZ2xlKHYwLCB2MSwgdjIpLFxyXG4gICAgICAgIC8vICAgICAoVDogVHJpYW5nbGUpID0+IHsgcmV0dXJuIFQudjAucC56IDwgNTA7IH0sXHJcbiAgICAgICAgLy8gICAgIChUOiBUcmlhbmdsZSkgPT4geyByZXR1cm4gVC52MS5wLnogPCA1MDsgfSxcclxuICAgICAgICAvLyAgICAgKFQ6IFRyaWFuZ2xlKSA9PiB7IHJldHVybiBULnYyLnAueiA8IDUwOyB9LFxyXG4gICAgICAgIC8vICAgICBuZXcgUGxhbmUobmV3IFZlY3RvcigwLCAwLCA1MCksIG5ldyBWZWN0b3IoMCwgMCwgMSkpKTtcclxuXHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IGNsaXAobmV3IFRyaWFuZ2xlKHYwLCB2MSwgdjIpLFxyXG4gICAgICAgICAgICAoVDogVHJpYW5nbGUpID0+IHsgcmV0dXJuIFQudjAucC54IDwgMDsgfSxcclxuICAgICAgICAgICAgKFQ6IFRyaWFuZ2xlKSA9PiB7IHJldHVybiBULnYxLnAueCA8IDA7IH0sXHJcbiAgICAgICAgICAgIChUOiBUcmlhbmdsZSkgPT4geyByZXR1cm4gVC52Mi5wLnggPCAwOyB9LFxyXG4gICAgICAgICAgICBuZXcgUGxhbmUobmV3IFZlY3RvcigwLCAwLCAwKSwgbmV3IFZlY3RvcigxLCAwLCAwKSkpO1xyXG5cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBwcm9jZXNzKHRyaWFuZ2xlOiBUcmlhbmdsZSwgcGNhbWVyYTogQ2FtZXJhLCB3b3JsZFRyYW5zZm9ybTogVHJhbnNmb3JtKSB7XHJcblxyXG4gICAgICAgIC8vIHRvIE1WUFxyXG4gICAgICAgIGxldCB0cmlhbmdsZV9saXN0ID0gVHJpYW5nbGUuTVZQX2JhY2tmYWNlX2N1bGxpbmdfY2xpcHBpbmcodHJpYW5nbGUsIHBjYW1lcmEsIHdvcmxkVHJhbnNmb3JtKTtcclxuXHJcbiAgICAgICAgbGV0IGxpc3QgPSBbXTtcclxuICAgICAgICAvLyB0byBORENcclxuICAgICAgICBmb3IgKGxldCBUIG9mIHRyaWFuZ2xlX2xpc3QpIHtcclxuICAgICAgICAgICAgbGV0IHYwID0gcGNhbWVyYS50b05EQyhULnYwLnApO1xyXG4gICAgICAgICAgICBsZXQgdjEgPSBwY2FtZXJhLnRvTkRDKFQudjEucCk7XHJcbiAgICAgICAgICAgIGxldCB2MiA9IHBjYW1lcmEudG9OREMoVC52Mi5wKTtcclxuXHJcbiAgICAgICAgICAgIC8vIHRvIHNjcmVlbiBzcGFjZVxyXG4gICAgICAgICAgICBsZXQgdjBfcyA9IHBjYW1lcmEudG9TY3JlZW5TcGFjZSh2MCk7XHJcbiAgICAgICAgICAgIGxldCB2MV9zID0gcGNhbWVyYS50b1NjcmVlblNwYWNlKHYxKTtcclxuICAgICAgICAgICAgbGV0IHYyX3MgPSBwY2FtZXJhLnRvU2NyZWVuU3BhY2UodjIpO1xyXG5cclxuICAgICAgICAgICAgLy8g54K65LqG5ZKM5pys5L6G55qEY29kZeebuOWuue+8jOaaq+aZguWFiOWCs+WHuuWOu1xyXG4gICAgICAgICAgICBsaXN0LnB1c2godjBfcyk7XHJcbiAgICAgICAgICAgIGxpc3QucHVzaCh2MV9zKTtcclxuICAgICAgICAgICAgbGlzdC5wdXNoKHYyX3MpO1xyXG5cclxuICAgICAgICAgICAgLy8g5om+5Ye65YyF5ZyN55qE55+p5b2iXHJcblxyXG4gICAgICAgICAgICAvLyDlsI3nn6nlvaLoo6HnmoTmr4/lgIvpu55wXHJcbiAgICAgICAgICAgIC8vIOWIpOWumuaYr+WQpuS9jeWcqHNjcmVlbiBzcGFjZeS4ieinkuW9olxyXG4gICAgICAgICAgICAvLyBpZiB5ZXMgXHJcbiAgICAgICAgICAgIC8vICgxKemHjeaWsOaKium7nnDmmKDlsITliLBOREMsXHJcbiAgICAgICAgICAgIC8vICgyKeWcqE5EQ+mAsuihjOWFp+aPku+8jOS5mOS4inflm57liLBwcm9qZWN0aW9uIHNwYWNlXHJcbiAgICAgICAgICAgIC8vIGh0dHBzOi8vZ3Bubm90ZXMuYmxvZ3Nwb3QuY29tLzIwMjEvMTEvYmxvZy1wb3N0XzI3Lmh0bWxcclxuXHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBsaXN0O1xyXG4gICAgfVxyXG5cclxuICAgIHYwOiBWZXJ0ZXg7XHJcbiAgICB2MTogVmVydGV4O1xyXG4gICAgdjI6IFZlcnRleDtcclxuICAgIGNvbnN0cnVjdG9yKHB2MDogVmVydGV4LCBwdjE6IFZlcnRleCwgcHYyOiBWZXJ0ZXgpIHtcclxuICAgICAgICB0aGlzLnYwID0gcHYwO1xyXG4gICAgICAgIHRoaXMudjEgPSBwdjE7XHJcbiAgICAgICAgdGhpcy52MiA9IHB2MjtcclxuICAgIH1cclxuXHJcbiAgICB2X3M6IFZlY3RvcltdO1xyXG4gICAgcHJvY2VzcyhwY2FtZXJhOiBDYW1lcmEsIHdvcmxkVHJhbnNmb3JtOiBUcmFuc2Zvcm0pIHtcclxuICAgICAgICB0aGlzLnZfcyA9IFRyaWFuZ2xlLnByb2Nlc3ModGhpcywgcGNhbWVyYSwgd29ybGRUcmFuc2Zvcm0pO1xyXG4gICAgfVxyXG5cclxuICAgIGRyYXcoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpIHtcclxuICAgICAgICBpZiAodGhpcy52X3MgPT0gbnVsbClcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICBsZXQgdENvdW50ID0gdGhpcy52X3MubGVuZ3RoIC8gMztcclxuICAgICAgICBmb3IgKGxldCBjID0gMTsgYyA8PSB0Q291bnQ7ICsrYykge1xyXG4gICAgICAgICAgICBsZXQgaW5kZXggPSAzICogYyAtIDE7XHJcbiAgICAgICAgICAgIGN0eC5tb3ZlVG8odGhpcy52X3NbaW5kZXhdLngsIHRoaXMudl9zW2luZGV4XS55KTtcclxuICAgICAgICAgICAgY3R4LmxpbmVUbyh0aGlzLnZfc1tpbmRleCAtIDJdLngsIHRoaXMudl9zW2luZGV4IC0gMl0ueSk7XHJcbiAgICAgICAgICAgIGN0eC5saW5lVG8odGhpcy52X3NbaW5kZXggLSAxXS54LCB0aGlzLnZfc1tpbmRleCAtIDFdLnkpO1xyXG4gICAgICAgICAgICBjdHgubGluZVRvKHRoaXMudl9zW2luZGV4XS54LCB0aGlzLnZfc1tpbmRleF0ueSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4iLCJpbXBvcnQgU2NlbmVOb2RlIGZyb20gXCIuLi9PYmplY3QvU2NlbmVOb2RlXCI7XHJcbmltcG9ydCBSYXkgZnJvbSBcIi4vUmF5XCI7XHJcbmltcG9ydCBIaXRJbmZvIGZyb20gXCIuL0hpdEluZm9cIjtcclxuaW1wb3J0IFZlY3RvciBmcm9tIFwiLi9WZWN0b3JcIjtcclxuaW1wb3J0IFRyaWFuZ2xlIGZyb20gXCIuL1RyaWFuZ2xlXCI7XHJcbmltcG9ydCBWZXJ0ZXggZnJvbSBcIi4vVmVydGV4XCI7XHJcbmltcG9ydCBQbGFuZSBmcm9tIFwiLi9QbGFuZVwiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRlZ3JlZV90b19SYWQoZDogbnVtYmVyKSB7XHJcbiAgICByZXR1cm4gTWF0aC5QSSAqIGQgLyAxODA7XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgZXBzaWxvbjogbnVtYmVyID0gMC4wMDE7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gbnVtYmVyX2VxdWFsKGE6IG51bWJlciwgYjogbnVtYmVyKSB7XHJcbiAgICByZXR1cm4gTWF0aC5hYnMoYSAtIGIpIDwgZXBzaWxvbjtcclxufVxyXG5cclxuLyoqXHJcbiAqIFxyXG4gKiBAcGFyYW0geCBpbnB1dFxyXG4gKiBAcGFyYW0gYSBtaW4gXHJcbiAqIEBwYXJhbSBiIG1heFxyXG4gKi9cclxuZXhwb3J0IGZ1bmN0aW9uIGNsYW1wKHg6IG51bWJlciwgYTogbnVtYmVyLCBiOiBudW1iZXIpIHtcclxuICAgIGlmICh4ID4gYilcclxuICAgICAgICByZXR1cm4gYjtcclxuICAgIGVsc2UgaWYgKHggPCBhKVxyXG4gICAgICAgIHJldHVybiBhO1xyXG4gICAgZWxzZVxyXG4gICAgICAgIHJldHVybiB4O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2V0X2hpdF9zb3J0X2xpc3Qob2JqX2xpc3Q6IFNjZW5lTm9kZVtdLCByYXk6IFJheSkge1xyXG4gICAgbGV0IGhpdF9zb3J0X2xpc3QgPSBvYmpfbGlzdC5tYXAob2JqID0+IG9iai5oLmhpdChyYXksIG9iai5zKSlcclxuICAgICAgICAuZmlsdGVyKGluZm8gPT4gaW5mby5pc19oaXQpXHJcbiAgICAgICAgLnNvcnQoKGE6IEhpdEluZm8sIGI6IEhpdEluZm8pID0+IGEudCAtIGIudCk7XHJcblxyXG4gICAgcmV0dXJuIGhpdF9zb3J0X2xpc3Q7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRfc2hhZG93X3dlaWdodChoaXRfaW5mbzogSGl0SW5mbywgZGlyZWN0aW9uX2xpZ2h0X2RpcjogVmVjdG9yLCBvYmpfbGlzdDogU2NlbmVOb2RlW10pIHtcclxuXHJcbiAgICAvLyDmmK/lkKblnKjlvbHlrZDlhadcclxuICAgIGxldCBkaXIgPSBkaXJlY3Rpb25fbGlnaHRfZGlyLm5lZ2F0aXZlKCk7XHJcbiAgICBsZXQgZnJvbSA9IGhpdF9pbmZvLmhpdF9wb3MuYWRkKGRpci5tdWx0aXBseShlcHNpbG9uKSk7IC8vIOWBj+enu+S4gOWwj+autei3nembou+8jOmBv+WFjeWwhOS4reiHquW3sVxyXG4gICAgbGV0IHJheSA9IG5ldyBSYXkoZnJvbSwgZGlyKTtcclxuICAgIGxldCBoaXRfc29ydF9saXN0ID0gZ2V0X2hpdF9zb3J0X2xpc3Qob2JqX2xpc3QsIHJheSk7XHJcbiAgICBpZiAoaGl0X3NvcnRfbGlzdC5sZW5ndGggIT0gMCkgeyAvLyDlnKjlvbHlrZDlhadcclxuICAgICAgICByZXR1cm4gMC40NTsgLy8g5LiN6KaB5aSq6buRXHJcbiAgICB9IGVsc2VcclxuICAgICAgICByZXR1cm4gMTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGxlcnAoYTogbnVtYmVyLCBiOiBudW1iZXIsIHQ6IG51bWJlcikge1xyXG4gICAgcmV0dXJuIGEgKyB0ICogKGIgLSBhKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNsaXAodHJpYW5nbGU6IFRyaWFuZ2xlLFxyXG4gICAgdjBfb3V0OiAodHJpYW5nbGU6IFRyaWFuZ2xlKSA9PiBib29sZWFuLFxyXG4gICAgdjFfb3V0OiAodHJpYW5nbGU6IFRyaWFuZ2xlKSA9PiBib29sZWFuLFxyXG4gICAgdjJfb3V0OiAodHJpYW5nbGU6IFRyaWFuZ2xlKSA9PiBib29sZWFuLFxyXG4gICAgcGxhbmU6IFBsYW5lKSB7XHJcblxyXG4gICAgbGV0IHZfY2xpcDogVHJpYW5nbGVbXSA9IFtdO1xyXG5cclxuICAgIGxldCBnZXRDcm9zc1BvaW50ID0gZnVuY3Rpb24gKHYwOiBWZXJ0ZXgsIHYxOiBWZXJ0ZXgpIHtcclxuICAgICAgICBsZXQgZGlyID0gVmVjdG9yLm1pbnVzKHYxLnAsIHYwLnApO1xyXG4gICAgICAgIGxldCByYXkgPSBuZXcgUmF5KHYwLnAsIGRpcik7XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IFBsYW5lLmhpdChyYXksIHBsYW5lKTtcclxuICAgICAgICAvLyBsZXQgdCA9IFZlY3Rvci5taW51cyhyZXN1bHQuaGl0X3BvcywgdjAucCkubGVuZ3RoKCkgLyBkaXIubGVuZ3RoKCk7XHJcblxyXG4gICAgICAgIGxldCB0ID0gKHJlc3VsdC5oaXRfcG9zLnogLSB2MC5wLnopIC8gKGRpci56KTtcclxuICAgICAgICByZXR1cm4gVmVydGV4LmxlcnAodjAsIHYxLCB0KTtcclxuICAgIH1cclxuXHJcbiAgICAvLyB2byBpbiBcclxuICAgIGxldCBjbGlwX2ZpcnN0X2luID0gZnVuY3Rpb24gKHYwOiBWZXJ0ZXgsIHYxOiBWZXJ0ZXgsIHYyOiBWZXJ0ZXgpIHtcclxuICAgICAgICAvLyAxIHRyaWFuZ2xlIHRvIDEgdHJpYW5nbGVcclxuICAgICAgICAvLyBjb25zb2xlLmxvZygnb25lJyk7XHJcbiAgICAgICAgdl9jbGlwWzBdID0gbmV3IFRyaWFuZ2xlKHYwLCBnZXRDcm9zc1BvaW50KHYwLCB2MSksIGdldENyb3NzUG9pbnQodjAsIHYyKSlcclxuICAgIH1cclxuXHJcbiAgICAvLyB2byBvdXRcclxuICAgIGxldCBjbGlwX2ZpcnN0X291dCA9IGZ1bmN0aW9uICh2MDogVmVydGV4LCB2MTogVmVydGV4LCB2MjogVmVydGV4KSB7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3RvdycpO1xyXG4gICAgICAgIC8vIDEgdHJpYW5nbGUgdG8gMiB0cmlhbmdsZVxyXG4gICAgICAgIGxldCBjcm9zczEgPSBnZXRDcm9zc1BvaW50KHYyLCB2MCk7XHJcbiAgICAgICAgbGV0IGNyb3NzMiA9IGdldENyb3NzUG9pbnQodjAsIHYxKTtcclxuXHJcbiAgICAgICAgdl9jbGlwWzBdID0gbmV3IFRyaWFuZ2xlKHYyLCBjcm9zczEsIGNyb3NzMik7XHJcbiAgICAgICAgdl9jbGlwWzFdID0gbmV3IFRyaWFuZ2xlKHYyLCBjcm9zczIsIHYxKTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLy8g5pyJOOeoruaDheazgVxyXG4gICAgaWYgKHYwX291dCh0cmlhbmdsZSkvKnRyaWFuZ2xlLnYwLnAueiA8IG5lYXJQbGFuZVoqLykvL291dFxyXG4gICAge1xyXG4gICAgICAgIGlmICh2MV9vdXQodHJpYW5nbGUpIC8qIHRyaWFuZ2xlLnYxLnAueiA8IG5lYXJQbGFuZVogKi8pLy8gb3V0IG91dFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaWYgKHYyX291dCh0cmlhbmdsZSkgLyp0cmlhbmdsZS52Mi5wLnogPCBuZWFyUGxhbmVaKi8pLy9mdWxsIG91dCBvZiBuZWFyUGxhbmVaIChubyBjbGlwKVxyXG4gICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnZnVsbCBvdXQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIC8vb3V0IG91dCBpblxyXG4gICAgICAgICAgICAgICAgY2xpcF9maXJzdF9pbih0cmlhbmdsZS52MiwgdHJpYW5nbGUudjAsIHRyaWFuZ2xlLnYxKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSAvL291dCBpbiBcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmICh2Ml9vdXQodHJpYW5nbGUpIC8qdHJpYW5nbGUudjIucC56IDwgbmVhclBsYW5lWiovKS8vb3V0IGluIG91dFxyXG4gICAgICAgICAgICAgICAgY2xpcF9maXJzdF9pbih0cmlhbmdsZS52MSwgdHJpYW5nbGUudjIsIHRyaWFuZ2xlLnYwKTtcclxuICAgICAgICAgICAgZWxzZSAvLyBvdXQgaW4gaW5cclxuICAgICAgICAgICAgICAgIGNsaXBfZmlyc3Rfb3V0KHRyaWFuZ2xlLnYwLCB0cmlhbmdsZS52MSwgdHJpYW5nbGUudjIpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2UgLy8gaW5cclxuICAgIHtcclxuICAgICAgICBpZiAodjFfb3V0KHRyaWFuZ2xlKSAvKnRyaWFuZ2xlLnYxLnAueiA8IG5lYXJQbGFuZVoqLykvLyBpbiBvdXQgXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBpZiAodjJfb3V0KHRyaWFuZ2xlKSAvKnRyaWFuZ2xlLnYyLnAueiA8IG5lYXJQbGFuZVoqLykvLyBpbiBvdXQgb3V0XHJcbiAgICAgICAgICAgICAgICBjbGlwX2ZpcnN0X2luKHRyaWFuZ2xlLnYwLCB0cmlhbmdsZS52MSwgdHJpYW5nbGUudjIpO1xyXG4gICAgICAgICAgICBlbHNlIC8vIGluIG91dCBpblxyXG4gICAgICAgICAgICAgICAgY2xpcF9maXJzdF9vdXQodHJpYW5nbGUudjEsIHRyaWFuZ2xlLnYyLCB0cmlhbmdsZS52MCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgLy8gaW4gaW5cclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGlmICh2Ml9vdXQodHJpYW5nbGUpIC8qdHJpYW5nbGUudjIucC56IDwgbmVhclBsYW5lWiovKS8vIGluIGluIG91dFxyXG4gICAgICAgICAgICAgICAgY2xpcF9maXJzdF9vdXQodHJpYW5nbGUudjIsIHRyaWFuZ2xlLnYwLCB0cmlhbmdsZS52MSk7XHJcbiAgICAgICAgICAgIGVsc2UgLy8gaW4gaW4gaW4gKG5vIGNsaXApXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIHZfY2xpcFswXSA9IHRyaWFuZ2xlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHZfY2xpcDtcclxufSIsIlxyXG5pbXBvcnQgeyBsZXJwIH0gZnJvbSAnLi9Ub29sJztcclxuaW1wb3J0IFZlY3RvciBmcm9tICcuL1ZlY3RvcidcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFZlcnRleCB7XHJcbiAgICBzdGF0aWMgYnVpbGRfdmVydGV4KHA6IFZlY3RvciwgbjogVmVjdG9yLCB3OiBudW1iZXIsIHU6IG51bWJlciwgdjogbnVtYmVyKSB7XHJcbiAgICAgICAgbGV0IHZlcnRleCA9IG5ldyBWZXJ0ZXgocCwgbiwgdywgdSwgdik7XHJcbiAgICAgICAgcmV0dXJuIHZlcnRleDtcclxuICAgIH1cclxuXHJcbiAgICBzdGF0aWMgbGVycCh2MDogVmVydGV4LCB2MTogVmVydGV4LCB0OiBudW1iZXIpIHtcclxuICAgICAgICBsZXQgcCA9IFZlY3Rvci5sZXJwKHYwLnAsIHYxLnAsIHQpO1xyXG4gICAgICAgIGxldCBuID0gVmVjdG9yLmxlcnAodjAubiwgdjEubiwgdCk7XHJcbiAgICAgICAgbGV0IHcgPSBsZXJwKHYwLncsIHYxLncsIHQpO1xyXG4gICAgICAgIGxldCB1ID0gbGVycCh2MC51LCB2MS51LCB0KTtcclxuICAgICAgICBsZXQgdiA9IGxlcnAodjAudiwgdjEudiwgdCk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBWZXJ0ZXgocCwgbiwgdywgdSwgdik7XHJcbiAgICB9XHJcblxyXG4gICAgcDogVmVjdG9yO1xyXG4gICAgdzogbnVtYmVyO1xyXG4gICAgdTogbnVtYmVyO1xyXG4gICAgdjogbnVtYmVyO1xyXG4gICAgbjogVmVjdG9yO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHA6IFZlY3RvciwgbjogVmVjdG9yLCB3OiBudW1iZXIsIHU6IG51bWJlciwgdjogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5wID0gcDtcclxuICAgICAgICB0aGlzLm4gPSBuO1xyXG4gICAgICAgIHRoaXMudyA9IHc7XHJcbiAgICAgICAgdGhpcy51ID0gdTtcclxuICAgICAgICB0aGlzLnYgPSB2O1xyXG4gICAgfVxyXG5cclxuICAgIGNsb25lKCkge1xyXG4gICAgICAgIHJldHVybiBuZXcgVmVydGV4KHRoaXMucC5jbG9uZSgpLCB0aGlzLm4uY2xvbmUoKSwgdGhpcy53LCB0aGlzLnUsIHRoaXMudik7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlX3AocDogVmVjdG9yKSB7XHJcbiAgICAgICAgdGhpcy5wID0gcDtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVfdyh3OiBudW1iZXIpIHtcclxuICAgICAgICB0aGlzLncgPSB3O1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IFZlcnRleCBmcm9tICcuL1ZlcnRleCdcclxuaW1wb3J0IFRyaWFuZ2xlIGZyb20gJy4vVHJpYW5nbGUnO1xyXG5pbXBvcnQgVmVjdG9yIGZyb20gJy4vVmVjdG9yJztcclxuaW1wb3J0IFRyYW5zZm9ybSBmcm9tICcuL1RyYW5zZm9ybSc7XHJcbmltcG9ydCB7IGNsaXAgfSBmcm9tICcuL1Rvb2wnO1xyXG5pbXBvcnQgQ2FtZXJhIGZyb20gJy4vQ2FtZXJhJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJveCB7XHJcbiAgICB0cmlhbmdsZXM6IFRyaWFuZ2xlW107XHJcbiAgICB0cmlhbmdsZXNfYWZ0ZXJfY2xpcDogVHJpYW5nbGVbXTtcclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIC8vIOW7uueri+ato+aWuemrlOmggum7nuizh+aWmVxyXG4gICAgICAgIHRoaXMudHJpYW5nbGVzID0gW107XHJcbiAgICAgICAgLy/poIbmmYLph51cclxuICAgICAgICBsZXQgbiA9IG5ldyBWZWN0b3IoMCwgMCwgLTEpO1xyXG4gICAgICAgIHRoaXMudHJpYW5nbGVzLnB1c2goXHJcbiAgICAgICAgICAgIG5ldyBUcmlhbmdsZShcclxuICAgICAgICAgICAgICAgIG5ldyBWZXJ0ZXgobmV3IFZlY3RvcigtMTAsIC0xMCwgLTEwKSwgbiwgMSwgMCwgMCksXHJcbiAgICAgICAgICAgICAgICBuZXcgVmVydGV4KG5ldyBWZWN0b3IoMTAsIDEwLCAtMTApLCBuLCAxLCAxLCAxKSxcclxuICAgICAgICAgICAgICAgIG5ldyBWZXJ0ZXgobmV3IFZlY3RvcigxMCwgLTEwLCAtMTApLCBuLCAxLCAxLCAwKVxyXG4gICAgICAgICAgICApKTtcclxuICAgICAgICB0aGlzLnRyaWFuZ2xlcy5wdXNoKFxyXG4gICAgICAgICAgICBuZXcgVHJpYW5nbGUoXHJcbiAgICAgICAgICAgICAgICBuZXcgVmVydGV4KG5ldyBWZWN0b3IoLTEwLCAtMTAsIC0xMCksIG4sIDEsIDAsIDApLFxyXG4gICAgICAgICAgICAgICAgbmV3IFZlcnRleChuZXcgVmVjdG9yKC0xMCwgMTAsIC0xMCksIG4sIDEsIDAsIDEpLFxyXG4gICAgICAgICAgICAgICAgbmV3IFZlcnRleChuZXcgVmVjdG9yKDEwLCAxMCwgLTEwKSwgbiwgMSwgMSwgMSlcclxuICAgICAgICAgICAgKSk7XHJcblxyXG4gICAgICAgIGxldCBtID0gW1RyYW5zZm9ybS5yb3RhdGVCeVkoOTApLCBUcmFuc2Zvcm0ucm90YXRlQnlZKDE4MCksIFRyYW5zZm9ybS5yb3RhdGVCeVkoMjcwKSwgVHJhbnNmb3JtLnJvdGF0ZUJ5WCg5MCksIFRyYW5zZm9ybS5yb3RhdGVCeVgoLTkwKV1cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG0ubGVuZ3RoOyArK2kpIHtcclxuICAgICAgICAgICAgbGV0IHJvdGF0ZU1hdHJpeCA9IG1baV07XHJcbiAgICAgICAgICAgIGxldCBuMiA9IFRyYW5zZm9ybS50cmFuc2Zvcm1Qb2ludChyb3RhdGVNYXRyaXgsIG4pO1xyXG4gICAgICAgICAgICB0aGlzLnRyaWFuZ2xlcy5wdXNoKFxyXG4gICAgICAgICAgICAgICAgbmV3IFRyaWFuZ2xlKFxyXG4gICAgICAgICAgICAgICAgICAgIFZlcnRleC5idWlsZF92ZXJ0ZXgoVHJhbnNmb3JtLnRyYW5zZm9ybVBvaW50KHJvdGF0ZU1hdHJpeCwgbmV3IFZlY3RvcigtIDEwLCAtMTAsIC0xMCkpLCBuMiwgMSwgMCwgMCksXHJcbiAgICAgICAgICAgICAgICAgICAgVmVydGV4LmJ1aWxkX3ZlcnRleChUcmFuc2Zvcm0udHJhbnNmb3JtUG9pbnQocm90YXRlTWF0cml4LCBuZXcgVmVjdG9yKDEwLCAxMCwgLTEwKSksIG4yLCAxLCAxLCAxKSxcclxuICAgICAgICAgICAgICAgICAgICBWZXJ0ZXguYnVpbGRfdmVydGV4KFRyYW5zZm9ybS50cmFuc2Zvcm1Qb2ludChyb3RhdGVNYXRyaXgsIG5ldyBWZWN0b3IoMTAsIC0xMCwgLTEwKSksIG4yLCAxLCAxLCAwKVxyXG4gICAgICAgICAgICAgICAgKSk7XHJcbiAgICAgICAgICAgIHRoaXMudHJpYW5nbGVzLnB1c2goXHJcbiAgICAgICAgICAgICAgICBuZXcgVHJpYW5nbGUoXHJcbiAgICAgICAgICAgICAgICAgICAgVmVydGV4LmJ1aWxkX3ZlcnRleChUcmFuc2Zvcm0udHJhbnNmb3JtUG9pbnQocm90YXRlTWF0cml4LCBuZXcgVmVjdG9yKC0xMCwgLTEwLCAtMTApKSwgbjIsIDEsIDAsIDApLFxyXG4gICAgICAgICAgICAgICAgICAgIFZlcnRleC5idWlsZF92ZXJ0ZXgoVHJhbnNmb3JtLnRyYW5zZm9ybVBvaW50KHJvdGF0ZU1hdHJpeCwgbmV3IFZlY3RvcigtMTAsIDEwLCAtMTApKSwgbjIsIDEsIDAsIDEpLFxyXG4gICAgICAgICAgICAgICAgICAgIFZlcnRleC5idWlsZF92ZXJ0ZXgoVHJhbnNmb3JtLnRyYW5zZm9ybVBvaW50KHJvdGF0ZU1hdHJpeCwgbmV3IFZlY3RvcigxMCwgMTAsIC0xMCkpLCBuMiwgMSwgMSwgMSlcclxuICAgICAgICAgICAgICAgICkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGUoY2FtZXJhOiBDYW1lcmEsIHdvcmxkVHJhbnNmb3JtOiBUcmFuc2Zvcm0pIHtcclxuXHJcbiAgICAgICAgLy8g5ris6Kmm6KOB5YiH5LiJ6KeS5b2i55qEY29kZVxyXG4gICAgICAgIC8vIHRoaXMudHJpYW5nbGVzX2FmdGVyX2NsaXAgPSBbXTtcclxuICAgICAgICAvLyBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMudHJpYW5nbGVzLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgLy8gICAgIGxldCB0cmlhbmdsZSA9IHRoaXMudHJpYW5nbGVzW2ldO1xyXG4gICAgICAgIC8vICAgICBsZXQgbmVhclBsYW5lWiA9IDE7XHJcbiAgICAgICAgLy8gICAgIGxldCB2X2NsaXAgPSBjbGlwKHRyaWFuZ2xlLCBuZWFyUGxhbmVaKTtcclxuXHJcbiAgICAgICAgLy8gICAgIGxldCBjb3VudCA9IHZfY2xpcC5sZW5ndGggLyAzO1xyXG4gICAgICAgIC8vICAgICAvLyBjb25zb2xlLmxvZyhpLCBjb3VudCk7XHJcbiAgICAgICAgLy8gICAgIGZvciAobGV0IGsgPSAwOyBrIDwgY291bnQ7ICsraykge1xyXG4gICAgICAgIC8vICAgICAgICAgLy8g57WE5ZCI5LiJ6KeS5b2iXHJcbiAgICAgICAgLy8gICAgICAgICBsZXQgbmV3X3RyaWFuZ2xlID0gbmV3IFRyaWFuZ2xlKHZfY2xpcFtrICogM10sIHZfY2xpcFtrICogMyArIDFdLCB2X2NsaXBbayAqIDMgKyAyXSk7XHJcbiAgICAgICAgLy8gICAgICAgICB0aGlzLnRyaWFuZ2xlc19hZnRlcl9jbGlwLnB1c2gobmV3X3RyaWFuZ2xlKTtcclxuICAgICAgICAvLyAgICAgfVxyXG4gICAgICAgIC8vIH1cclxuICAgICAgICB0aGlzLnRyaWFuZ2xlc19hZnRlcl9jbGlwID0gdGhpcy50cmlhbmdsZXM7XHJcblxyXG4gICAgICAgIC8vIOiZleeQhuato+aWuemrlOeahOiuiuaPm1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy50cmlhbmdsZXNfYWZ0ZXJfY2xpcC5sZW5ndGg7ICsraSkge1xyXG4gICAgICAgICAgICB0aGlzLnRyaWFuZ2xlc19hZnRlcl9jbGlwW2ldLnByb2Nlc3MoY2FtZXJhLCB3b3JsZFRyYW5zZm9ybSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGRyYXcoY3R4OiBDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQpIHtcclxuICAgICAgICAvLyDnlavkuInop5LlvaJcclxuICAgICAgICBjdHguZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gJ2Rlc3RpbmF0aW9uLW92ZXInO1xyXG5cclxuICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSAncmdiYSgyNTUsMCwwLDEpJztcclxuXHJcblxyXG4gICAgICAgIGN0eC5iZWdpblBhdGgoKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnRyaWFuZ2xlc19hZnRlcl9jbGlwLmxlbmd0aDsgKytpKSB7XHJcbiAgICAgICAgICAgIHRoaXMudHJpYW5nbGVzX2FmdGVyX2NsaXBbaV0uZHJhdyhjdHgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjdHguc3Ryb2tlKCk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgVmVjdG9yIGZyb20gXCIuLi9NYXRoL1ZlY3RvclwiO1xyXG5pbXBvcnQgSGl0SW5mbyBmcm9tIFwiLi4vTWF0aC9IaXRJbmZvXCI7XHJcbmltcG9ydCB7IGNsYW1wLCBnZXRfc2hhZG93X3dlaWdodCB9IGZyb20gXCIuLi9NYXRoL1Rvb2xcIjtcclxuaW1wb3J0IFNoYWRlciBmcm9tIFwiLi9TaGFkZXJcIjtcclxuaW1wb3J0IFNjZW5lTm9kZSBmcm9tIFwiLi4vT2JqZWN0L1NjZW5lTm9kZVwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGlmZnVzZSBpbXBsZW1lbnRzIFNoYWRlciB7XHJcbiAgICBzdGF0aWMgeWVsbG93ID0gbmV3IERpZmZ1c2UobmV3IFZlY3RvcigxLCAxLCAwKSk7XHJcbiAgICBzdGF0aWMgcmVkID0gbmV3IERpZmZ1c2UobmV3IFZlY3RvcigxLCAwLCAwKSk7XHJcbiAgICBzdGF0aWMgZ3JlZW4gPSBuZXcgRGlmZnVzZShuZXcgVmVjdG9yKDAsIDEsIDApKTtcclxuICAgIHN0YXRpYyBibHVlID0gbmV3IERpZmZ1c2UobmV3IFZlY3RvcigwLCAwLCAxKSk7XHJcbiAgICBzdGF0aWMgZ3JheSA9IG5ldyBEaWZmdXNlKG5ldyBWZWN0b3IoMC41LCAwLjUsIDAuNSkpO1xyXG4gICAgc3RhdGljIHdoaXRlID0gbmV3IERpZmZ1c2UobmV3IFZlY3RvcigxLCAxLCAxKSk7XHJcblxyXG4gICAgY29sb3I6IFZlY3RvcjtcclxuICAgIGNvbnN0cnVjdG9yKGNvbG9yOiBWZWN0b3IpIHtcclxuICAgICAgICB0aGlzLmNvbG9yID0gY29sb3I7XHJcbiAgICB9XHJcblxyXG4gICAgc2hhZGluZyhoaXRfaW5mbzogSGl0SW5mbywgZGlyZWN0aW9uX2xpZ2h0X2RpcjogVmVjdG9yLCBvYmpfbGlzdDogU2NlbmVOb2RlW10sIGRlcHRoOiBudW1iZXIpIHtcclxuICAgICAgICBsZXQgbiA9IGhpdF9pbmZvLm5vcm1hbDtcclxuICAgICAgICBsZXQgc3RyZW5ndGggPSBjbGFtcCgtVmVjdG9yLmRvdChkaXJlY3Rpb25fbGlnaHRfZGlyLCBuKSwgMCwgMSk7XHJcblxyXG4gICAgICAgIGxldCBzaGFkb3dfd2VpZ2h0ID0gZ2V0X3NoYWRvd193ZWlnaHQoaGl0X2luZm8sIGRpcmVjdGlvbl9saWdodF9kaXIsIG9ial9saXN0KTtcclxuICAgICAgICByZXR1cm4gdGhpcy5jb2xvci5tdWx0aXBseShzdHJlbmd0aCkubXVsdGlwbHkoc2hhZG93X3dlaWdodCk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgVmVjdG9yIGZyb20gXCIuL1ZlY3RvclwiO1xyXG5pbXBvcnQgUmF5IGZyb20gXCIuL1JheVwiO1xyXG5pbXBvcnQgeyBkZWdyZWVfdG9fUmFkLCBnZXRfaGl0X3NvcnRfbGlzdCB9IGZyb20gXCIuL1Rvb2xcIlxyXG5pbXBvcnQgUmVuZGVyVGFyZ2V0IGZyb20gXCIuL1JlbmRlclRhcmdldFwiO1xyXG5pbXBvcnQgSGl0SW5mbyBmcm9tIFwiLi9IaXRJbmZvXCI7XHJcbmltcG9ydCBTY2VuZU5vZGUgZnJvbSBcIi4uL09iamVjdC9TY2VuZU5vZGVcIjtcclxuaW1wb3J0IERpZmZ1c2UgZnJvbSBcIi4uL01hdGVyYWlscy9EaWZmdXNlXCI7XHJcbmltcG9ydCBWZXJ0ZXggZnJvbSBcIi4vVmVydGV4XCI7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDYW1lcmEge1xyXG4gICAgZXllOiBWZWN0b3I7XHJcblxyXG4gICAgeF9heGlzOiBWZWN0b3I7XHJcbiAgICB5X2F4aXM6IFZlY3RvcjtcclxuICAgIHpfYXhpczogVmVjdG9yO1xyXG5cclxuICAgIHJhdGlvOiBudW1iZXI7XHJcblxyXG4gICAgc2NyZWVuVzogbnVtYmVyO1xyXG4gICAgc2NyZWVuSDogbnVtYmVyO1xyXG5cclxuICAgIHNjcmVlbkNlbnRlclg6IG51bWJlcjtcclxuICAgIHNjcmVlbkNlbnRlclk6IG51bWJlcjtcclxuICAgIGhhbGZXOiBudW1iZXI7XHJcbiAgICBoYWxmSDogbnVtYmVyO1xyXG5cclxuICAgIC8vIOimlumMkOeahCDov5HlubPpnaLlkozpgaDlubPpnaJcclxuICAgIC8vIGHjgIFi5ZKM5oqV5b2x55+p6Zmj5pyJ6ZecXHJcbiAgICBOOiBudW1iZXI7XHJcbiAgICBGOiBudW1iZXI7XHJcbiAgICBhOiBudW1iZXI7XHJcbiAgICBiOiBudW1iZXI7XHJcblxyXG4gICAgLy8gaW4gY2xpcCBzcGFjZSAoYmVmb3JlIC93IHNwYWNlKVxyXG4gICAgTmM6IG51bWJlcjtcclxuICAgIEZjOiBudW1iZXI7XHJcblxyXG4gICAgZm92X2RlZ3JlZTogbnVtYmVyO1xyXG4gICAgY29uc3RydWN0b3IoZXllOiBWZWN0b3IsIGxvb2tfYXQ6IFZlY3RvciwgZm92X2RlZ3JlZTogbnVtYmVyLCBzY3JlZW5XOiBudW1iZXIsIHNjcmVlbkg6IG51bWJlciwgTjogbnVtYmVyLCBGOiBudW1iZXIpIHtcclxuXHJcbiAgICAgICAgdGhpcy5yYXRpbyA9IHNjcmVlblcgLyBzY3JlZW5IO1xyXG4gICAgICAgIHRoaXMuc2NyZWVuVyA9IHNjcmVlblc7XHJcbiAgICAgICAgdGhpcy5zY3JlZW5IID0gc2NyZWVuSDtcclxuICAgICAgICB0aGlzLnNjcmVlbkNlbnRlclggPSB0aGlzLnNjcmVlblcgKiAwLjU7XHJcbiAgICAgICAgdGhpcy5zY3JlZW5DZW50ZXJZID0gdGhpcy5zY3JlZW5IICogMC41O1xyXG4gICAgICAgIHRoaXMuaGFsZlcgPSB0aGlzLnNjcmVlblcgKiAwLjU7XHJcbiAgICAgICAgdGhpcy5oYWxmSCA9IHRoaXMuc2NyZWVuSCAqIDAuNTtcclxuXHJcbiAgICAgICAgLy8gY2FtZXJhIDPou7hcclxuICAgICAgICB0aGlzLnpfYXhpcyA9IFZlY3Rvci5taW51cyhsb29rX2F0LCBleWUpLm5vcm1hbGl6ZSgpO1xyXG5cclxuICAgICAgICAvLyDlt6bmiYtcclxuICAgICAgICBsZXQgaGVscF92ID0gVmVjdG9yLnVwO1xyXG4gICAgICAgIHRoaXMueF9heGlzID0gVmVjdG9yLmNyb3NzKGhlbHBfdiwgdGhpcy56X2F4aXMpLm5vcm1hbGl6ZSgpO1xyXG4gICAgICAgIHRoaXMueV9heGlzID0gVmVjdG9yLmNyb3NzKHRoaXMuel9heGlzLCB0aGlzLnhfYXhpcyk7XHJcblxyXG4gICAgICAgIC8vIGNhbWVyYSDljp/pu55cclxuICAgICAgICB0aGlzLmV5ZSA9IGV5ZTtcclxuXHJcbiAgICAgICAgLy8gY2FtZXJhIGZvdlxyXG4gICAgICAgIHRoaXMuZm92X2RlZ3JlZSA9IGZvdl9kZWdyZWU7XHJcblxyXG4gICAgICAgIC8vIOimlumMkOeahCDov5HlubPpnaLlkozpgaDlubPpnaJcclxuICAgICAgICB0aGlzLk4gPSBOO1xyXG4gICAgICAgIHRoaXMuRiA9IEY7XHJcblxyXG4gICAgICAgIC8vIGh0dHBzOi8vZ3Bubm90ZXMuYmxvZ3Nwb3QuY29tLzIwMjEvMTEvYmxvZy1wb3N0XzI3Lmh0bWxcclxuICAgICAgICAvLyDmipXlvbHnn6npmaPlsI1655qE5L+u5q2j77yM6YCZ6KOh5L2/55So5bem5omLXHJcbiAgICAgICAgdGhpcy5hID0gRiAvIChGIC0gTik7XHJcbiAgICAgICAgdGhpcy5iID0gLU4gKiBGIC8gKEYgLSBOKTtcclxuXHJcbiAgICAgICAgLy8g5oiR5YCR5LiN5pivT3Blbmds5oiWRGlyZWN0eO+8jOaJgOS7peWPr+S7peaKik5j44CBRmPnrpflh7rkvoZcclxuICAgICAgICB0aGlzLk5jID0gTiAqIHRoaXMuYSArIHRoaXMuYjtcclxuICAgICAgICB0aGlzLkZjID0gRiAqIHRoaXMuYSArIHRoaXMuYjtcclxuICAgIH1cclxuXHJcbiAgICBtb3ZlRXllID0gZnVuY3Rpb24gKHM6IG51bWJlciwgQTogVmVjdG9yKSB7XHJcbiAgICAgICAgdGhpcy5leWUgPSBWZWN0b3IuYWRkKHRoaXMuZXllLCBBLm11bHRpcGx5KHMpKTtcclxuICAgIH1cclxuXHJcbiAgICBhZGRQaXRjaChkZWdyZWU6IG51bWJlcikge1xyXG4gICAgICAgIC8vIHRvZG86IOS5mOS4imxvY2FsIG1hdHJpeFxyXG4gICAgfVxyXG5cclxuICAgIGFkZFlhdyhkZWdyZWU6IG51bWJlcikge1xyXG4gICAgICAgIC8vIHRvZG86IOS5mOS4imxvY2FsIG1hdHJpeFxyXG4gICAgfVxyXG5cclxuICAgIGNyZWF0ZV9yYXlfZGlyKHhfd2VpZ2h0OiBudW1iZXIsIHlfd2VpZ2h0OiBudW1iZXIsIHJhdGlvOiBudW1iZXIpIHtcclxuICAgICAgICBsZXQgaGFsZl9mb3ZfcmFkID0gZGVncmVlX3RvX1JhZCgwLjUgKiB0aGlzLmZvdl9kZWdyZWUpO1xyXG4gICAgICAgIGxldCB0YW5faCA9IE1hdGgudGFuKGhhbGZfZm92X3JhZCk7XHJcbiAgICAgICAgbGV0IHRhbl93ID0gdGFuX2ggKiByYXRpbztcclxuXHJcbiAgICAgICAgbGV0IGRpciA9IHRoaXMuel9heGlzXHJcbiAgICAgICAgICAgIC5hZGQodGhpcy54X2F4aXMubXVsdGlwbHkoeF93ZWlnaHQgKiB0YW5fdykpXHJcbiAgICAgICAgICAgIC5hZGQodGhpcy55X2F4aXMubXVsdGlwbHkoeV93ZWlnaHQgKiB0YW5faCkpO1xyXG5cclxuICAgICAgICByZXR1cm4gZGlyO1xyXG4gICAgfVxyXG5cclxuICAgIHRvQ2FtZXJhU3BhY2UoQTogVmVjdG9yKSB7XHJcbiAgICAgICAgbGV0IGRpZmYgPSBBLm1pbnVzKHRoaXMuZXllKTtcclxuICAgICAgICBsZXQgcG9pbnRfaW5fY2FtZXJhX3NwYWNlID0gbmV3IFZlY3RvcihWZWN0b3IuZG90KGRpZmYsIHRoaXMueF9heGlzKSwgVmVjdG9yLmRvdChkaWZmLCB0aGlzLnlfYXhpcyksIFZlY3Rvci5kb3QoZGlmZiwgdGhpcy56X2F4aXMpKTtcclxuICAgICAgICByZXR1cm4gcG9pbnRfaW5fY2FtZXJhX3NwYWNlO1xyXG4gICAgfVxyXG5cclxuICAgIHRvUHJvamVjdGlvblNwYWNlKEE6IFZlY3Rvcikge1xyXG4gICAgICAgIGxldCBmb3ZfcmFkID0gZGVncmVlX3RvX1JhZCh0aGlzLmZvdl9kZWdyZWUpO1xyXG4gICAgICAgIGxldCBoYWxmX2ZvdiA9IDAuNSAqIGZvdl9yYWQ7XHJcbiAgICAgICAgbGV0IHlfc2NhbGUgPSAxIC8gTWF0aC50YW4oaGFsZl9mb3YpO1xyXG4gICAgICAgIGxldCB4X3NjYWxlID0gMSAvICh0aGlzLnJhdGlvICogTWF0aC50YW4oaGFsZl9mb3YpKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IoQS54ICogeF9zY2FsZSwgQS55ICogeV9zY2FsZSwgQS56ICogdGhpcy5hICsgdGhpcy5iKTtcclxuICAgIH1cclxuXHJcbiAgICB0b05EQyhBOiBWZWN0b3IpIHtcclxuICAgICAgICBsZXQgcyA9IDEgLyBBLno7XHJcbiAgICAgICAgcmV0dXJuIEEubXVsdGlwbHkocyk7XHJcbiAgICB9XHJcblxyXG4gICAgdG9TY3JlZW5TcGFjZShORENfQTogVmVjdG9yKSB7XHJcbiAgICAgICAgLy8g55So5bqn5qiZ6K6K5o+b5L6G55yL5b6F5b6eTkRD5YiwU2NyZWVuIFNwYWNlXHJcbiAgICAgICAgLy8gTkRDIHjou7jlnKhzY3JlZW4gc3BhY2Ug54K6KHcvMiwwKVxyXG4gICAgICAgIC8vIE5EQyB56Lu45Zyoc2NyZWVuIHNwYWNlIOeCuigtaC8yLDApXHJcbiAgICAgICAgbGV0IHggPSB0aGlzLmhhbGZXICogTkRDX0EueCArIHRoaXMuc2NyZWVuQ2VudGVyWDtcclxuICAgICAgICBsZXQgeSA9IC10aGlzLmhhbGZIICogTkRDX0EueSArIHRoaXMuc2NyZWVuQ2VudGVyWTtcclxuXHJcbiAgICAgICAgbGV0IHRlbXAgPSBuZXcgVmVjdG9yKHgsIHksIE5EQ19BLnopO1xyXG4gICAgICAgIHJldHVybiB0ZW1wO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIOeul+WcllxyXG4gICAgcmVuZGVyKHJlbmRlcl90YXJnZXQ6IFJlbmRlclRhcmdldCwgb2JqX2xpc3Q6IFNjZW5lTm9kZVtdKSB7XHJcbiAgICAgICAgbGV0IGRpcmVjdGlvbl9saWdodF9kaXIgPSBuZXcgVmVjdG9yKDEsIC0xLCAwKS5ub3JtYWxpemUoKTtcclxuXHJcbiAgICAgICAgbGV0IGhhbGZfcGl4ZWxfb2Zmc2V0ID0gMC41IC8gcmVuZGVyX3RhcmdldC5oO1xyXG4gICAgICAgIGxldCBtdWx0aXNhbXBsZV9kaWZmID0gW1xyXG4gICAgICAgICAgICB7IHg6IDAsIHk6IDAgfSxcclxuICAgICAgICAgICAgeyB4OiBoYWxmX3BpeGVsX29mZnNldCwgeTogaGFsZl9waXhlbF9vZmZzZXQgfSxcclxuICAgICAgICAgICAgeyB4OiAtaGFsZl9waXhlbF9vZmZzZXQsIHk6IGhhbGZfcGl4ZWxfb2Zmc2V0IH0sXHJcbiAgICAgICAgICAgIHsgeDogLWhhbGZfcGl4ZWxfb2Zmc2V0LCB5OiAtaGFsZl9waXhlbF9vZmZzZXQgfSxcclxuICAgICAgICAgICAgeyB4OiBoYWxmX3BpeGVsX29mZnNldCwgeTogLWhhbGZfcGl4ZWxfb2Zmc2V0IH0sXHJcbiAgICAgICAgXTtcclxuXHJcbiAgICAgICAgcmVuZGVyX3RhcmdldC5yZW5kZXJfcGl4ZWwoKHhfd2VpZ2h0OiBudW1iZXIsIHlfd2VpZ2h0OiBudW1iZXIsIHJhdGlvOiBudW1iZXIpID0+IHtcclxuICAgICAgICAgICAgbGV0IHJheV9kaXIgPSB0aGlzLmNyZWF0ZV9yYXlfZGlyKHhfd2VpZ2h0LCB5X3dlaWdodCwgcmF0aW8pO1xyXG5cclxuICAgICAgICAgICAgLy8g55Si55Sf5aSa5qKdcmF5XHJcbiAgICAgICAgICAgIGxldCByYXlzID0gbXVsdGlzYW1wbGVfZGlmZi5tYXAoZGlmZiA9PiB7XHJcbiAgICAgICAgICAgICAgICAvLyDlsI1yYXlfZHJp5L2c5YGP56e7XHJcbiAgICAgICAgICAgICAgICBsZXQgZGlyID0gcmF5X2Rpci5hZGQodGhpcy54X2F4aXMubXVsdGlwbHkoZGlmZi54KSkuYWRkKHRoaXMueV9heGlzLm11bHRpcGx5KGRpZmYueSkpXHJcblxyXG4gICAgICAgICAgICAgICAgLy8g6ZuW54S25ZKM55CD44CB5bmz6Z2i55qEaGl06KiI566X5LiN6ZyA6KaBZGly5L2cbm9ybWFsaXpl77yM5L2G54K65LqG5pa55L6/5Y+N5bCE55qE6KiI566X6YKE5piv5L2cbm9ybWFsaXplXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJheSh0aGlzLmV5ZSwgZGlyLm5vcm1hbGl6ZSgpKVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIOavj+WAi3JheemDveeul2NvbG9yXHJcbiAgICAgICAgICAgIGxldCBjb2xvcnMgPSByYXlzLm1hcChyYXkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGV0IGhpdF9zb3J0X2xpc3QgPSBnZXRfaGl0X3NvcnRfbGlzdChvYmpfbGlzdCwgcmF5KTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyDmnInlsITkuK3ll45cclxuICAgICAgICAgICAgICAgIGxldCBpc19oaXQgPSBoaXRfc29ydF9saXN0Lmxlbmd0aCAhPSAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzX2hpdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCBoaXRfaW5mbyA9IGhpdF9zb3J0X2xpc3RbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhpdF9pbmZvLnMuc2hhZGluZyhoaXRfaW5mbywgZGlyZWN0aW9uX2xpZ2h0X2Rpciwgb2JqX2xpc3QsIDEpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gRGlmZnVzZS5ncmF5LmNvbG9yO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIOWPluW5s+Wdh+WwseaciUFudGlhbGlhc2luZ+aViOaenFxyXG4gICAgICAgICAgICBsZXQgY291bnQgPSBtdWx0aXNhbXBsZV9kaWZmLmxlbmd0aDtcclxuICAgICAgICAgICAgbGV0IGZpbmFsX2NvbG9yID0gY29sb3JzLnJlZHVjZSgoYWNjdW11bGF0b3I6IFZlY3RvciwgY3VycmVudDogVmVjdG9yKSA9PiBhY2N1bXVsYXRvci5hZGQoY3VycmVudCksIFZlY3Rvci56ZXJvKS5tdWx0aXBseSgxIC8gY291bnQpO1xyXG4gICAgICAgICAgICByZXR1cm4gZmluYWxfY29sb3I7XHJcbiAgICAgICAgfSlcclxuICAgIH1cclxufSIsIi8vIGltcG9ydCBBcHAgZnJvbSAnLi9BcHAnO1xyXG4vLyBuZXcgQXBwKCk7XHJcblxyXG5pbXBvcnQgUmFzdGVyaXplckFwcCBmcm9tICcuL1Jhc3Rlcml6ZXJBcHAnO1xyXG5uZXcgUmFzdGVyaXplckFwcCgpOyIsImltcG9ydCBCb3ggZnJvbSBcIi4vTWF0aC9Cb3gzRFwiO1xyXG5pbXBvcnQgQ2FtZXJhIGZyb20gXCIuL01hdGgvQ2FtZXJhXCI7XHJcbmltcG9ydCBUcmFuc2Zvcm0gZnJvbSBcIi4vTWF0aC9UcmFuc2Zvcm1cIjtcclxuaW1wb3J0IFZlY3RvciBmcm9tIFwiLi9NYXRoL1ZlY3RvclwiO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmFzdGVyaXplckFwcCB7XHJcblxyXG4gICAgY2FtZXJhSW5kZXhfdmlldyA9IDE7XHJcbiAgICBjYW1lcmFJbmRleF9jb250cm9sID0gMDtcclxuICAgIGNhbWVyYTogQ2FtZXJhID0gbnVsbDtcclxuICAgIHRoYW5kbGU6IG51bWJlcjtcclxuXHJcbiAgICBzY3JlZW5XaWR0aCA9IDgwMDtcclxuICAgIHNjcmVlbkhlaWdodCA9IDYwMDtcclxuICAgIGJveDogQm94ID0gbnVsbDtcclxuXHJcbiAgICBsYXN0X3Q6IG51bWJlcjtcclxuICAgIHN1bV90OiBudW1iZXI7XHJcbiAgICBjdHg6IENhbnZhc1JlbmRlcmluZ0NvbnRleHQyRDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgICAgICAgd2luZG93Lm9ubG9hZCA9ICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5pbml0KCk7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBkb2N1bWVudC5vbmtleWRvd24gPSB0aGlzLmtleVByb2MuYmluZCh0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBpbml0KCkge1xyXG4gICAgICAgIGxldCBjYW52YXMgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnY2FudmFzJykgYXMgSFRNTENhbnZhc0VsZW1lbnQ7XHJcbiAgICAgICAgY2FudmFzLnN0eWxlLndpZHRoID0gdGhpcy5zY3JlZW5XaWR0aCArICdweCc7XHJcbiAgICAgICAgY2FudmFzLnN0eWxlLmhlaWdodCA9IHRoaXMuc2NyZWVuSGVpZ2h0ICsgJ3B4JztcclxuICAgICAgICBjYW52YXMud2lkdGggPSBjYW52YXMuY2xpZW50V2lkdGg7XHJcbiAgICAgICAgY2FudmFzLmhlaWdodCA9IGNhbnZhcy5jbGllbnRIZWlnaHQ7XHJcbiAgICAgICAgdGhpcy5jdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcclxuXHJcbiAgICAgICAgdGhpcy5ib3ggPSBuZXcgQm94KCk7XHJcbiAgICAgICAgdGhpcy5jYW1lcmEgPSBuZXcgQ2FtZXJhKG5ldyBWZWN0b3IoMCwgNTAsIC0yMDApLCBuZXcgVmVjdG9yKDAsIDAsIDApLCA2MCwgdGhpcy5zY3JlZW5XaWR0aCwgdGhpcy5zY3JlZW5IZWlnaHQsIDEsIDUwMCk7XHJcbiAgICAgICAgdGhpcy5zdGFydCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXJ0KCkge1xyXG4gICAgICAgIHRoaXMuc3RvcCgpO1xyXG4gICAgICAgIHRoaXMuc3VtX3QgPSAwO1xyXG4gICAgICAgIGxldCBkID0gbmV3IERhdGUoKTtcclxuICAgICAgICB0aGlzLmxhc3RfdCA9IGQuZ2V0VGltZSgpO1xyXG4gICAgICAgIHRoaXMudGhhbmRsZSA9IHdpbmRvdy5zZXRJbnRlcnZhbCgoKSA9PiB7IHRoaXMuZHJhd1NjZW5lKCk7IH0sIDE2KTtcclxuICAgIH1cclxuXHJcbiAgICByZXN1bWUoKSB7XHJcbiAgICAgICAgbGV0IGQgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgIHRoaXMubGFzdF90ID0gZC5nZXRUaW1lKCk7XHJcbiAgICAgICAgdGhpcy50aGFuZGxlID0gd2luZG93LnNldEludGVydmFsKCgpID0+IHsgdGhpcy5kcmF3U2NlbmUoKTsgfSwgMTYpO1xyXG4gICAgfVxyXG5cclxuICAgIHN0b3AoKSB7XHJcbiAgICAgICAgd2luZG93LmNsZWFySW50ZXJ2YWwodGhpcy50aGFuZGxlKTtcclxuICAgICAgICB0aGlzLnRoYW5kbGUgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIGRyYXdTY2VuZSgpIHtcclxuICAgICAgICBsZXQgZCA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgbGV0IHQgPSBkLmdldFRpbWUoKTtcclxuICAgICAgICBsZXQgZGlmZiA9IHQgLSB0aGlzLmxhc3RfdDtcclxuICAgICAgICB0aGlzLmxhc3RfdCA9IHQ7XHJcbiAgICAgICAgdGhpcy5zdW1fdCA9IHRoaXMuc3VtX3QgKyBkaWZmO1xyXG5cclxuICAgICAgICAvLyDmuIXnqbpcclxuICAgICAgICB0aGlzLmN0eC5jbGVhclJlY3QoMCwgMCwgdGhpcy5zY3JlZW5XaWR0aCwgdGhpcy5zY3JlZW5IZWlnaHQpO1xyXG4gICAgICAgIHRoaXMuY3R4LmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIHRoaXMuY3R4LmZpbGxTdHlsZSA9IFwicmdiYSgxODAsMzAsMTUsMC4xKVwiO1xyXG4gICAgICAgIHRoaXMuY3R4LmZpbGxSZWN0KDAsIDAsIHRoaXMuc2NyZWVuV2lkdGgsIHRoaXMuc2NyZWVuSGVpZ2h0KTtcclxuXHJcbiAgICAgICAgLy/nlavnq4vmlrnpq5RcclxuICAgICAgICB2YXIgb2Zmc2V0TWF0cml4ID0gVHJhbnNmb3JtLm9mZnNldCgwLCAwLCAwKTtcclxuICAgICAgICB2YXIgbm93RGVncmVlID0gdGhpcy5zdW1fdCAvIDEwMDAgKiAxNSAlIDM2MDtcclxuICAgICAgICAvLyB2YXIgbm93RGVncmVlID0gMDtcclxuXHJcbiAgICAgICAgdmFyIHJvdGF0ZU1hdHJpeCA9IFRyYW5zZm9ybS5yb3RhdGVCeVkobm93RGVncmVlKTtcclxuICAgICAgICB2YXIgY29tYmluZU1hdHJpeCA9IFRyYW5zZm9ybS50cmFuc2Zvcm1UcmFuc2Zvcm0ob2Zmc2V0TWF0cml4LCByb3RhdGVNYXRyaXgpO1xyXG4gICAgICAgIHRoaXMuYm94LnVwZGF0ZSh0aGlzLmNhbWVyYSwgY29tYmluZU1hdHJpeCk7XHJcbiAgICAgICAgdGhpcy5ib3guZHJhdyh0aGlzLmN0eCk7XHJcblxyXG4gICAgICAgIHZhciBvZmZzZXRNYXRyaXggPSBUcmFuc2Zvcm0ub2Zmc2V0KDE1MCwgMCwgMCk7XHJcbiAgICAgICAgdmFyIHJvdGF0ZU1hdHJpeCA9IFRyYW5zZm9ybS5yb3RhdGVCeVkobm93RGVncmVlKTtcclxuICAgICAgICBjb21iaW5lTWF0cml4ID0gVHJhbnNmb3JtLnRyYW5zZm9ybVRyYW5zZm9ybShyb3RhdGVNYXRyaXgsIG9mZnNldE1hdHJpeCk7XHJcbiAgICAgICAgdGhpcy5ib3gudXBkYXRlKHRoaXMuY2FtZXJhLCBjb21iaW5lTWF0cml4KTtcclxuICAgICAgICB0aGlzLmJveC5kcmF3KHRoaXMuY3R4KTtcclxuICAgIH1cclxuXHJcbiAgICBrZXlQcm9jKGV2ZW50OiBLZXlib2FyZEV2ZW50KSB7XHJcbiAgICAgICAgbGV0IEtlcE1hcCA9XHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB3OiA4NyxcclxuICAgICAgICAgICAgcjogODIsXHJcblxyXG4gICAgICAgICAgICBlOiA2OSxcclxuICAgICAgICAgICAgZDogNjgsXHJcbiAgICAgICAgICAgIHM6IDgzLFxyXG4gICAgICAgICAgICBmOiA3MCxcclxuXHJcbiAgICAgICAgICAgIGFfdXA6IDM4LFxyXG4gICAgICAgICAgICBhX2Rvd246IDQwLFxyXG4gICAgICAgICAgICBhX2xlZnQ6IDM3LFxyXG4gICAgICAgICAgICBhX3JpZ2h0OiAzOVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZhciBtb3ZlUyA9IDE7XHJcbiAgICAgICAgdmFyIHJvdGF0ZVMgPSAwLjE7XHJcbiAgICAgICAgc3dpdGNoIChldmVudC5rZXlDb2RlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgS2VwTWFwLnc6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbWVyYS5tb3ZlRXllKG1vdmVTLCB0aGlzLmNhbWVyYS56X2F4aXMpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgS2VwTWFwLnI6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbWVyYS5tb3ZlRXllKC1tb3ZlUywgdGhpcy5jYW1lcmEuel9heGlzKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgY2FzZSBLZXBNYXAuZTpcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FtZXJhLm1vdmVFeWUobW92ZVMsIHRoaXMuY2FtZXJhLnlfYXhpcyk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBLZXBNYXAuZDpcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FtZXJhLm1vdmVFeWUoLW1vdmVTLCB0aGlzLmNhbWVyYS55X2F4aXMpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgS2VwTWFwLnM6XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNhbWVyYS5tb3ZlRXllKC1tb3ZlUywgdGhpcy5jYW1lcmEueF9heGlzKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIEtlcE1hcC5mOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5jYW1lcmEubW92ZUV5ZShtb3ZlUywgdGhpcy5jYW1lcmEueF9heGlzKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgY2FzZSBLZXBNYXAuYV91cDpcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FtZXJhLmFkZFBpdGNoKHJvdGF0ZVMpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgS2VwTWFwLmFfZG93bjpcclxuICAgICAgICAgICAgICAgIHRoaXMuY2FtZXJhLmFkZFBpdGNoKC1yb3RhdGVTKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgY2FzZSBLZXBNYXAuYV9sZWZ0OlxyXG4gICAgICAgICAgICAgICAgdGhpcy5jYW1lcmEuYWRkWWF3KC1yb3RhdGVTKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIEtlcE1hcC5hX3JpZ2h0OlxyXG4gICAgICAgICAgICAgICAgdGhpcy5jYW1lcmEuYWRkWWF3KHJvdGF0ZVMpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59Il0sIm5hbWVzIjpbImZyb20iLCJkaXIiLCJ0aGlzIiwicHgiLCJweSIsInB6IiwieCIsInkiLCJ6IiwiY2FsY3VsYXRlX25vcm1hbCIsInYwIiwidjEiLCJ2MiIsInYwMSIsIlZlY3RvciIsIm1pbnVzIiwidjAyIiwiY3Jvc3MiLCJub3JtYWxpemUiLCJjYWxjdWxhdGVfY2VudGVyIiwiYWRkIiwibXVsdGlwbHkiLCJ1diIsInUiLCJ2IiwicmVmbGVjdCIsIkkiLCJOIiwiTCIsImRvdCIsIkEiLCJCIiwicyIsIm11bHRpcGx5MyIsImVxdWFsIiwibnVtYmVyX2VxdWFsIiwibGVycCIsInQiLCJsZW5ndGgiLCJNYXRoIiwic3FydCIsInRlbXAiLCJuZWdhdGl2ZSIsImNsb25lIiwidXAiLCJ6ZXJvIiwieEF4aXMiLCJ5QXhpcyIsInpBeGlzIiwicG9zaXRpb24iLCJ0cmFuc2Zvcm1Qb2ludCIsInRyYW5zZm9ybSIsInBvaW50IiwidmVjdG9yWCIsInZlY3RvclkiLCJ2ZWN0b3JaIiwidHJhbnNmb3JtVmVjdG9yIiwidmVydGV4IiwidHJhbnNmb3JtVHJhbnNmb3JtIiwiaW5wdXRUcmFuc2Zvcm0iLCJUcmFuc2Zvcm0iLCJyb3RhdGVCeVoiLCJkZWdyZWUiLCJyYWRpYW4iLCJkZWdyZWVfdG9fUmFkIiwiYyIsImNvcyIsInNpbiIsInJvdGF0ZUJ5WSIsInJvdGF0ZUJ5WCIsIm9mZnNldCIsIm5vcm1hbCIsIkMiLCJpc19wb3NpdGl2ZSIsInRlc3RfcCIsImRpZmYiLCJoaXQiLCJyYXkiLCJyZXN1bHQiLCJQbGFuZSIsImlzX2hpdCIsInBsYW5lIiwiaGl0X3BvcyIsImkiLCJwdjAiLCJwdjEiLCJwdjIiLCJNVlBfYmFja2ZhY2VfY3VsbGluZ19jbGlwcGluZyIsInRyaWFuZ2xlIiwicGNhbWVyYSIsIndvcmxkVHJhbnNmb3JtIiwidjBfdyIsInAiLCJ2MV93IiwidjJfdyIsInYwX2MiLCJ0b0NhbWVyYVNwYWNlIiwidjFfYyIsInYyX2MiLCJ2MF9wIiwidG9Qcm9qZWN0aW9uU3BhY2UiLCJ2MV9wIiwidjJfcCIsImNlbnRlcl90b19leWUiLCJ1cGRhdGVfcCIsInVwZGF0ZV93IiwiVHJpYW5nbGUiLCJjbGlwX2luX1Byb2plY3Rpb25fU3BhY2UiLCJ2MV9vdXQiLCJ2Ml9vdXQiLCJ2X2NsaXAiLCJnZXRDcm9zc1BvaW50IiwiY2xpcF9maXJzdF9pbiIsImNsaXBfZmlyc3Rfb3V0IiwiVCIsImNyb3NzMSIsImNyb3NzMiIsInByb2Nlc3MiLCJsaXN0IiwidG9OREMiLCJ2MF9zIiwidG9TY3JlZW5TcGFjZSIsInYxX3MiLCJ2Ml9zIiwicHVzaCIsInZfcyIsImRyYXciLCJjdHgiLCJ0Q291bnQiLCJpbmRleCIsIm1vdmVUbyIsImxpbmVUbyIsImQiLCJQSSIsImEiLCJiIiwiYWJzIiwiZ2V0X2hpdF9zb3J0X2xpc3QiLCJvYmpfbGlzdCIsIm1hcCIsIm9iaiIsImgiLCJmaWx0ZXIiLCJpbmZvIiwic29ydCIsIm4iLCJ3IiwiYnVpbGRfdmVydGV4IiwiVmVydGV4IiwidHJpYW5nbGVzIiwibSIsInJvdGF0ZU1hdHJpeCIsIm4yIiwidXBkYXRlIiwiY2FtZXJhIiwidHJpYW5nbGVzX2FmdGVyX2NsaXAiLCJnbG9iYWxDb21wb3NpdGVPcGVyYXRpb24iLCJzdHJva2VTdHlsZSIsImJlZ2luUGF0aCIsInN0cm9rZSIsImNvbG9yIiwic2hhZGluZyIsImhpdF9pbmZvIiwiZGlyZWN0aW9uX2xpZ2h0X2RpciIsImRlcHRoIiwic3RyZW5ndGgiLCJzaGFkb3dfd2VpZ2h0IiwiZ2V0X3NoYWRvd193ZWlnaHQiLCJ5ZWxsb3ciLCJEaWZmdXNlIiwicmVkIiwiZ3JlZW4iLCJibHVlIiwiZ3JheSIsIndoaXRlIiwiZXllIiwibG9va19hdCIsImZvdl9kZWdyZWUiLCJzY3JlZW5XIiwic2NyZWVuSCIsIkYiLCJtb3ZlRXllIiwicmF0aW8iLCJzY3JlZW5DZW50ZXJYIiwic2NyZWVuQ2VudGVyWSIsImhhbGZXIiwiaGFsZkgiLCJ6X2F4aXMiLCJoZWxwX3YiLCJ4X2F4aXMiLCJ5X2F4aXMiLCJOYyIsIkZjIiwiYWRkUGl0Y2giLCJhZGRZYXciLCJjcmVhdGVfcmF5X2RpciIsInhfd2VpZ2h0IiwieV93ZWlnaHQiLCJoYWxmX2Zvdl9yYWQiLCJ0YW5faCIsInRhbiIsInRhbl93IiwiaGFsZl9mb3YiLCJ5X3NjYWxlIiwieF9zY2FsZSIsIk5EQ19BIiwicmVuZGVyIiwicmVuZGVyX3RhcmdldCIsImhhbGZfcGl4ZWxfb2Zmc2V0IiwibXVsdGlzYW1wbGVfZGlmZiIsInJlbmRlcl9waXhlbCIsInJheV9kaXIiLCJjb2xvcnMiLCJoaXRfc29ydF9saXN0IiwiY291bnQiLCJyZWR1Y2UiLCJhY2N1bXVsYXRvciIsImN1cnJlbnQiLCJjYW1lcmFJbmRleF92aWV3IiwiY2FtZXJhSW5kZXhfY29udHJvbCIsInNjcmVlbldpZHRoIiwic2NyZWVuSGVpZ2h0IiwiYm94Iiwid2luZG93Iiwib25sb2FkIiwiaW5pdCIsImRvY3VtZW50Iiwib25rZXlkb3duIiwia2V5UHJvYyIsImJpbmQiLCJjYW52YXMiLCJnZXRFbGVtZW50QnlJZCIsInN0eWxlIiwid2lkdGgiLCJoZWlnaHQiLCJjbGllbnRXaWR0aCIsImNsaWVudEhlaWdodCIsImdldENvbnRleHQiLCJzdGFydCIsInN0b3AiLCJzdW1fdCIsIkRhdGUiLCJsYXN0X3QiLCJnZXRUaW1lIiwidGhhbmRsZSIsInNldEludGVydmFsIiwiZHJhd1NjZW5lIiwicmVzdW1lIiwiY2xlYXJJbnRlcnZhbCIsImNsZWFyUmVjdCIsImZpbGxTdHlsZSIsImZpbGxSZWN0Iiwib2Zmc2V0TWF0cml4Iiwibm93RGVncmVlIiwiY29tYmluZU1hdHJpeCIsImV2ZW50Iiwia2V5Q29kZSJdLCJzb3VyY2VSb290IjoiIn0=