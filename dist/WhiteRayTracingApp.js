(()=>{"use strict";const t=function(t,n){this.from=t,this.dir=n},n=function(t,n){this.p=t,this.w=n},i=function(){function t(t,i){this.from=t,this.dir=new n(_.minus(i.p,t.p),i.w-t.w)}return t.prototype.t_when_x_equal_w=function(){return(this.from.w-this.from.p.x)/(this.dir.p.x-this.dir.w)},t.prototype.t_when_y_equal_w=function(){return(this.from.w-this.from.p.y)/(this.dir.p.y-this.dir.w)},t.prototype.t_when_z_equal_w=function(){return(this.from.w-this.from.p.z)/(this.dir.p.z-this.dir.w)},t.prototype.t_when_x_equal_minus_w=function(){return-(this.from.w+this.from.p.x)/(this.dir.w+this.dir.p.x)},t.prototype.t_when_y_equal_minus_w=function(){return-(this.from.w+this.from.p.y)/(this.dir.w+this.dir.p.y)},t.prototype.t_when_z_equal_zero_w=function(){return-this.from.p.z/this.dir.p.z},t}(),e=function(){function t(t,n){this.C=t,this.N=n}return t.prototype.is_positive=function(t){var n=_.minus(t,this.C);return _.dot(n,this.N)>0},t.prototype.hit=function(n,i){var e=t.hit(n,this);return e.is_hit&&(e.s=i),e},t.hit=function(t,n){var i=t.from,e=t.dir,r=_.dot(e,n.N),o=_.dot(_.minus(n.C,i),n.N);if(l(r,0))return{is_hit:!1,hit_pos:null,t:-1};var s=o/r;return{is_hit:s>0,hit_pos:i.add(e.multiply(s)),i:e,t:s,normal:n.N}},t}(),r=function(){function t(t,n,i,e){this.xAxis=t,this.yAxis=n,this.zAxis=i,this.position=e}return t.transformPoint=function(t,n){var i=t.xAxis.multiply(n.x),e=t.yAxis.multiply(n.y),r=t.zAxis.multiply(n.z);return t.position.add(i).add(e).add(r)},t.transformVector=function(t,n){var i=t.xAxis.multiply(n.x),e=t.yAxis.multiply(n.y),r=t.zAxis.multiply(n.z);return i.add(e).add(r)},t.transformTransform=function(n,i){return new t(t.transformVector(n,i.xAxis),t.transformVector(n,i.yAxis),t.transformVector(n,i.zAxis),t.transformPoint(n,i.position))},t.rotateByZ=function(n){var i=c(n),e=Math.cos(i),r=Math.sin(i);return new t(new _(e,r,0),new _(-r,e,0),new _(0,0,1),_.zero)},t.rotateByY=function(n){var i=c(n),e=Math.cos(i),r=Math.sin(i),o=new _(r,0,e);return new t(new _(e,0,-r),new _(0,1,0),o,_.zero)},t.rotateByX=function(n){var i=c(n),e=Math.cos(i),r=Math.sin(i);return new t(new _(1,0,0),new _(0,e,r),new _(0,-r,e),new _(0,0,0))},t.offset=function(n,i,e){return new t(new _(1,0,0),new _(0,1,0),new _(0,0,1),new _(n,i,e))},t}(),o=function(){function t(n,i,e,r){this.add=function(n){return new t(this.r+n.r,this.g+n.g,this.b+n.b,1)},this.r=n,this.g=i,this.b=e,this.a=r}return t.lerp=function(n,i,e){return new t(y(n.r,i.r,e),y(n.g,i.g,e),y(n.b,i.b,e),1)},t.prototype.multiply=function(n){return new t(this.r*n,this.g*n,this.b*n,1)},t.prototype.toString=function(){return"( "+this.r+" , "+this.g+" , "+this.b+" )"},t.golden=new t(1,215/255,0,1),t.yellow=new t(1,1,0,1),t.pink=new t(1,192/255,203/255,1),t.black=new t(0,0,0,1),t.red=new t(1,0,0,1),t}(),s=function(){function t(){}return t.clear=function(n,i){t.color_buffer.clear(n),t.z_buffer.clear(i)},t.show=function(n){n.set_pixel((function(n,i){return t.color_buffer.get(n,i)})),n.show_buffer("canvas")},t.clip_helper=function(t,n,i,e,r){for(var o=[],s=0,u=t;s<u.length;s++)for(var a=0,h=v(u[s],n,i,e,r);a<h.length;a++){var c=h[a];o.push(c)}return o},t.clip_in_Projection_Space=function(n,i,e,r){var o=[new u(n,i,e)],s=t.clip_helper(o,(function(t){return t.v0.w<t.v0.p.z}),(function(t){return t.v1.w<t.v1.p.z}),(function(t){return t.v2.w<t.v2.p.z}),p.Far);return s=t.clip_helper(s,(function(t){return 0>t.v0.p.z}),(function(t){return 0>t.v1.p.z}),(function(t){return 0>t.v2.p.z}),p.Near),s=t.clip_helper(s,(function(t){return t.v0.w<t.v0.p.x}),(function(t){return t.v1.w<t.v1.p.x}),(function(t){return t.v2.w<t.v2.p.x}),p.Right),s=t.clip_helper(s,(function(t){return-t.v0.w>t.v0.p.x}),(function(t){return-t.v1.w>t.v1.p.x}),(function(t){return-t.v2.w>t.v2.p.x}),p.Right),s=t.clip_helper(s,(function(t){return t.v0.w<t.v0.p.y}),(function(t){return t.v1.w<t.v1.p.y}),(function(t){return t.v2.w<t.v2.p.y}),p.Top),t.clip_helper(s,(function(t){return-t.v0.w>t.v0.p.y}),(function(t){return-t.v1.w>t.v1.p.y}),(function(t){return-t.v2.w>t.v2.p.y}),p.Bottom)},t.MVP_backface_culling_clipping=function(n,i,e){var o=r.transformPoint(e,n.v0.p),s=r.transformPoint(e,n.v1.p),u=r.transformPoint(e,n.v2.p),a=i.toCameraSpace(o),h=i.toCameraSpace(s),c=i.toCameraSpace(u),p=i.toProjectionSpace(a),f=i.toProjectionSpace(h),l=i.toProjectionSpace(c),w=_.calculate_normal(a,h,c),y=_.minus(_.zero,_.calculate_center(a,h,c)).normalize();if(_.dot(w,y)<=0)return[];var v=n.v0.clone().update_p(p).update_w(a.z),x=n.v1.clone().update_p(f).update_w(h.z),m=n.v2.clone().update_p(l).update_w(c.z);return t.clip_in_Projection_Space(v,x,m,i)},t.process=function(n,i,e){for(var r=[],s=0,a=t.MVP_backface_culling_clipping(n,i,e);s<a.length;s++){var h=a[s],c=i.toNDC(h.v0.p,h.v0.w),p=i.toNDC(h.v1.p,h.v1.w),f=i.toNDC(h.v2.p,h.v2.w),l=i.toScreenSpace(c),w=i.toScreenSpace(p),y=i.toScreenSpace(f);r.push(l),r.push(w),r.push(y);for(var v=_.min_max(l,w,y),x=v.min,m=v.max,d=Math.floor(x.x),g=Math.floor(m.x),z=Math.floor(x.y),M=Math.floor(m.y),b=d;b<=g;++b)for(var S=z;S<=M;++S){var C=new _(b+.5,S+.5,0),N=u["calculate_α_β_γ"](l,w,y,C),P=N.α,k=N.β,q=N.γ;if(u.is_in_triangle(P,k,q)){t.color_buffer.set(b,S,o.yellow);var A=u.interpolation(q,P,k,c.z,p.z,f.z);if(!(A>t.z_buffer.get(b,S))){t.z_buffer.set(b,S,A);u.interpolation(q,P,k,1/h.v0.w,1/h.v1.w,1/h.v2.w);u.interpolation(q,P,k,h.v0.u/h.v0.w,h.v1.u/h.v1.w,h.v2.u/h.v2.w),u.interpolation(q,P,k,h.v0.v/h.v0.w,h.v1.v/h.v1.w,h.v2.v/h.v2.w)}}}}return r},t}(),u=function(){function n(t,n,i){this.v0=t,this.v1=n,this.v2=i}return n.calculate_α_β_γ=function(n,i,r,o){var s=_.minus(o,n),u=_.minus(i,n),a=_.minus(r,n),h=new _(-u.y,u.x,0),c=new t(o,a.multiply(-1)),p=e.hit(c,new e(n,h)).hit_pos,f=_.minus(p,n),l=_.minus(s,f),w=f.x/u.x,y=l.x/a.x;return{α:w,β:y,γ:1-w-y}},n.is_in_triangle=function(t,n,i){return t>=0&&n>=0&&i>=0},n.interpolation=function(t,n,i,e,r,o){return e*t+r*n+o*i},n.prototype.process=function(t,n){this.v_s=s.process(this,t,n)},n.prototype.draw=function(t){if(null!=this.v_s)for(var n=this.v_s.length/3,i=1;i<=n;++i){var e=3*i-1;t.moveTo(this.v_s[e].x,this.v_s[e].y),t.lineTo(this.v_s[e-2].x,this.v_s[e-2].y),t.lineTo(this.v_s[e-1].x,this.v_s[e-1].y),t.lineTo(this.v_s[e].x,this.v_s[e].y)}},n}(),a=function(){function t(t,n,i,e,r){this.p=t,this.n=n,this.w=i,this.u=e,this.v=r}return t.build_vertex=function(n,i,e,r,o){return new t(n,i,e,r,o)},t.lerp=function(n,i,e){return new t(_.lerp(n.p,i.p,e),_.lerp(n.n,i.n,e),y(n.w,i.w,e),y(n.u,i.u,e),y(n.v,i.v,e))},t.prototype.clone=function(){return new t(this.p.clone(),this.n.clone(),this.w,this.u,this.v)},t.prototype.update_p=function(t){return this.p=t,this},t.prototype.update_w=function(t){return this.w=t,this},t.prototype.get_Vector4D=function(){return new n(this.p,this.w)},t}(),h=function(){function t(n,i){this.multiply=function(n){return new t(this.x*n,this.y*n)},this.toString=function(){return"( "+this.x+" , "+this.y+" )"},this.x=n,this.y=i}return t.add=function(n,i){return new t(i.x+n.x,i.y+n.y)},t.minus=function(n,i){return new t(n.x-i.x,n.y-i.y)},t.prototype.plus=function(n){return new t(this.x+n.x,this.y+n.y)},t}();function c(t){return Math.PI*t/180}var p,f=.001;function l(t,n){return Math.abs(t-n)<f}function w(t,n){return t.map((function(t){return t.h.hit(n,t.s)})).filter((function(t){return t.is_hit})).sort((function(t,n){return t.t-n.t}))}function y(t,n,i){return t+i*(n-t)}function v(t,n,e,r,o){var s=[],h=function(t,n){var e=new i(t.get_Vector4D(),n.get_Vector4D()),r=0;switch(o){case p.Far:r=e.t_when_z_equal_w();break;case p.Near:r=e.t_when_z_equal_zero_w();break;case p.Right:r=e.t_when_x_equal_w();break;case p.Left:r=e.t_when_x_equal_minus_w();break;case p.Top:r=e.t_when_y_equal_w();break;case p.Bottom:r=e.t_when_y_equal_minus_w()}return a.lerp(t,n,r)},c=function(t,n,i){s[0]=new u(t,h(t,n),h(t,i))},f=function(t,n,i){var e=h(i,t),r=h(t,n);s[0]=new u(i,e,r),s[1]=new u(i,r,n)};return n(t)?e(t)?r(t)||c(t.v2,t.v0,t.v1):r(t)?c(t.v1,t.v2,t.v0):f(t.v0,t.v1,t.v2):e(t)?r(t)?c(t.v0,t.v1,t.v2):f(t.v1,t.v2,t.v0):r(t)?f(t.v2,t.v0,t.v1):s[0]=t,s}!function(t){t[t.Near=0]="Near",t[t.Far=1]="Far",t[t.Right=2]="Right",t[t.Left=3]="Left",t[t.Top=4]="Top",t[t.Bottom=5]="Bottom"}(p||(p={})),function(){function t(){}t.accDiv=function(t,n){var i=0,e=0;try{i=t.toString().split(".")[1].length}catch(t){}try{e=n.toString().split(".")[1].length}catch(t){}return Number(t.toString().replace(".",""))/Number(n.toString().replace(".",""))*Math.pow(10,e-i)},t.accAdd=function(t,n){var i,e,r,o;try{i=t.toString().split(".")[1].length}catch(t){i=0}try{e=n.toString().split(".")[1].length}catch(t){e=0}if(o=Math.abs(i-e),r=Math.pow(10,Math.max(i,e)),o>0){var s=Math.pow(10,o);i>e?(t=Number(t.toString().replace(".","")),n=Number(n.toString().replace(".",""))*s):(t=Number(t.toString().replace(".",""))*s,n=Number(n.toString().replace(".","")))}else t=Number(t.toString().replace(".","")),n=Number(n.toString().replace(".",""));return(t+n)/r}}(),function(){function t(){}t.drawLine=function(t,n,i,e){var r=t,o=n,s=h.minus(o,r),u=100;if(0!=s.y)if(0!=s.x){var a=s.x/s.y,c=Math.abs(a);if(a>0){if(c<=1)for(l=1;l<u;l++){r.y=r.y+1,r.x=r.x+c;var p=Math.floor(r.x);if(!e.is_legal_index(p,r.y))break;if(e.is_over_positive(r.x,r.y,o.x,o.y))break;e.set(p,r.y,i)}else if(c>1)for(l=1;l<u;l++){r.y=r.y+1/c,r.x=r.x+1;var f=Math.floor(r.y);if(!e.is_legal_index(r.x,f))break;if(e.is_over_positive(r.x,r.y,o.x,o.y))break;e.set(r.x,f,i)}}else if(a<0)if(c<=1)for(l=1;l<u&&(r.y=r.y+1,r.x=r.x-c,p=Math.floor(r.x),e.is_legal_index(p,r.y))&&!e.is_over_negative(r.x,r.y,o.x,o.y);l++)e.set(p,r.y,i);else if(c>1)for(l=1;l<u&&(r.y=r.y+1/c,r.x=r.x-1,f=Math.floor(r.y),e.is_legal_index(r.x,f))&&!e.is_over_negative(r.x,r.y,o.x,o.y);l++)e.set(r.x,f,i)}else for(var l=1;l<u&&(r.y=r.y+1,e.is_legal_index(r.x,r.y))&&!(r.y>o.y);l++)e.set(r.x,r.y,i);else for(l=1;l<u&&(r.x=r.x+1,e.is_legal_index(r.x,r.y))&&!(r.x>o.x);l++)e.set(r.x,r.y,i)},t.drawCircle=function(n,i){for(var e=2*Math.PI/50,r=new h(10,10),o=-Math.PI/3,s=0;s<50;s++){var u=Math.floor(r.x+9*Math.cos(o+e*s)),a=Math.floor(r.y+9*Math.sin(o+e*s)),c=Math.floor(r.x+9*Math.cos(o+e*(s+1))),p=Math.floor(r.y+9*Math.sin(o+e*(s+1)));t.drawLineWrapper(new h(u,a),new h(c,p),n,i)}},t.drawStar=function(n,i){for(var e=2*Math.PI/5,r=new h(10,10),o=-Math.PI/3,s=0,u=0;u<5;u++){var a=Math.floor(r.x+9*Math.cos(o+e*s)),c=Math.floor(r.y+9*Math.sin(o+e*s)),p=Math.floor(r.x+9*Math.cos(o+e*(s+2))),f=Math.floor(r.y+9*Math.sin(o+e*(s+2)));t.drawLineWrapper(new h(a,c),new h(p,f),n,i),s+=2}},t.drawLineWrapper=function(n,i,e,r){n.y<i.y?t.drawLine(n,i,e,r):i.y<n.y?t.drawLine(i,n,e,r):n.x<i.x?t.drawLine(n,i,e,r):i.x<n.x&&t.drawLine(i,n,e,r)}}();const _=function(){function t(t,n,i){this.x=0,this.y=0,this.z=0,this.x=t,this.y=n,this.z=i}return t.min_max=function(n,i,e){return{min:new t(Math.min(Math.min(n.x,i.x),e.x),Math.min(Math.min(n.y,i.y),e.y),Math.min(Math.min(n.z,i.z),e.z)),max:new t(Math.max(Math.max(n.x,i.x),e.x),Math.max(Math.max(n.y,i.y),e.y),Math.max(Math.max(n.z,i.z),e.z))}},t.calculate_normal=function(n,i,e){var r=t.minus(i,n),o=t.minus(e,n);return t.cross(r,o).normalize()},t.calculate_center=function(t,n,i){return t.add(n).add(i).multiply(1/3)},t.uv=function(n,i){return new t(n,i,0)},t.reflect=function(n,i){var e=-2*t.dot(n,i);return i.multiply(e).add(n)},t.add=function(n,i){return new t(i.x+n.x,i.y+n.y,i.z+n.z)},t.minus=function(n,i){return new t(n.x-i.x,n.y-i.y,n.z-i.z)},t.multiply=function(n,i){return new t(n.x*i,n.y*i,n.z*i)},t.multiply3=function(n,i){return new t(n.x*i.x,n.y*i.y,n.z*i.z)},t.cross=function(n,i){return new t(n.y*i.z-n.z*i.y,-n.x*i.z+n.z*i.x,n.x*i.y-n.y*i.x)},t.dot=function(t,n){return t.x*n.x+t.y*n.y+t.z*n.z},t.equal=function(t,n){return l(t.x,n.x)&&l(t.y,n.y)&&l(t.z,n.z)},t.lerp=function(n,i,e){return new t(y(n.x,i.x,e),y(n.y,i.y,e),y(n.z,i.z,e))},t.prototype.length=function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},t.prototype.normalize=function(){var t=this.length();return this.x=this.x/t,this.y=this.y/t,this.z=this.z/t,this},t.prototype.add=function(n){return t.add(this,n)},t.prototype.minus=function(n){return t.minus(this,n)},t.prototype.multiply=function(n){return t.multiply(this,n)},t.prototype.negative=function(){return t.multiply(this,-1)},t.prototype.Vector2D=function(){return this.z=0,this},t.prototype.clone=function(){return new t(this.x,this.y,this.z)},t.up=new t(0,1,0),t.zero=new t(0,0,0),t}(),x=function(){function n(t){this.color=t}return n.prototype.shading=function(n,i,e,r){var o,s=n.normal,u=(0,(o=-_.dot(i,s))>1?1:o<0?0:o),a=function(n,i,e){var r=i.negative(),o=n.hit_pos.add(r.multiply(f));return 0!=w(e,new t(o,r)).length?.45:1}(n,i,e);return this.color.multiply(u).multiply(a)},n.yellow=new n(new _(1,1,0)),n.red=new n(new _(1,0,0)),n.green=new n(new _(0,1,0)),n.blue=new n(new _(0,0,1)),n.gray=new n(new _(.5,.5,.5)),n.white=new n(new _(1,1,1)),n}(),m=function(){function n(t,n,i,e,r,o,s){this.moveEye=function(t,n){this.eye=_.add(this.eye,n.multiply(t))},this.ratio=e/r,this.screenW=e,this.screenH=r,this.screenCenterX=.5*this.screenW,this.screenCenterY=.5*this.screenH,this.halfW=.5*this.screenW,this.halfH=.5*this.screenH,this.z_axis=_.minus(n,t).normalize();var u=_.up;this.x_axis=_.cross(u,this.z_axis).normalize(),this.y_axis=_.cross(this.z_axis,this.x_axis),this.eye=t,this.fov_degree=i,this.N=o,this.F=s,this.a=s/(s-o),this.b=-o*s/(s-o),console.log(this.a,this.b)}return n.prototype.addPitch=function(t){},n.prototype.addYaw=function(t){},n.prototype.create_ray_dir=function(t,n,i){var e=c(.5*this.fov_degree),r=Math.tan(e),o=r*i;return this.z_axis.add(this.x_axis.multiply(t*o)).add(this.y_axis.multiply(n*r))},n.prototype.toCameraSpace=function(t){var n=t.minus(this.eye);return new _(_.dot(n,this.x_axis),_.dot(n,this.y_axis),_.dot(n,this.z_axis))},n.prototype.toProjectionSpace=function(t){var n=.5*c(this.fov_degree),i=1/Math.tan(n),e=1/(this.ratio*Math.tan(n));return new _(t.x*e,t.y*i,t.z*this.a+this.b)},n.prototype.toNDC=function(t,n){var i=1/n;return t.multiply(i)},n.prototype.toScreenSpace=function(t){var n=this.halfW*t.x+this.screenCenterX,i=-this.halfH*t.y+this.screenCenterY;return new _(n,i,0)},n.prototype.render=function(n,i){var e=this,r=new _(1,-1,0).normalize(),o=.5/n.h,s=[{x:0,y:0},{x:o,y:o},{x:-o,y:o},{x:-o,y:-o},{x:o,y:-o}];n.render_pixel((function(n,o,u){var a=e.create_ray_dir(n,o,u),h=s.map((function(n){var i=a.add(e.x_axis.multiply(n.x)).add(e.y_axis.multiply(n.y));return new t(e.eye,i.normalize())})).map((function(t){var n=w(i,t);if(0!=n.length){var e=n[0];return e.s.shading(e,r,i,1)}return x.gray.color})),c=s.length;return h.reduce((function(t,n){return t.add(n)}),_.zero).multiply(1/c)}))},n}(),d=function(){function t(t,n,i){this.plane=t,this.w=n,this.h=i}return t.prototype.hit=function(t,n){var i=this.plane.hit(t,n);if(i.is_hit){var e=i.hit_pos,r=e.minus(this.plane.C),o=_.equal(this.plane.N,_.up)?new _(1,0,0):_.up,s=_.cross(o,this.plane.N).normalize(),u=_.cross(s,this.plane.N),a=_.dot(r,s),h=_.dot(r,u);return{is_hit:Math.abs(a)<this.w&&Math.abs(h)<this.h,hit_pos:e,i:t.dir,t:i.t,normal:this.plane.N,s:n}}return{is_hit:!1}},t}(),g=function(){function t(t,n){this.C=t,this.R=n}return t.prototype.hit=function(t,n){var i=t.dir,e=t.from,r=_.dot(i,i),o=2*(_.dot(i,e)-_.dot(i,this.C)),s=o*o-4*r*(_.dot(e,e)-2*_.dot(e,this.C)+_.dot(this.C,this.C)-this.R*this.R);if(l(s,0)){if((p=-o/(2*r))<0)return{is_hit:!1};var u=(c=e.add(i.multiply(p))).minus(this.C).normalize();return{is_hit:!0,hit_pos:c,i,t:p,normal:u,s:n}}if(s>0){var a=Math.sqrt(s),h=[(-o-a)/(2*r),(-o+a)/(2*r)].filter((function(t){return t>0}));if(0==h.length)return{is_hit:!1};var c,p=h[0];return u=(c=e.add(i.multiply(p))).minus(this.C).normalize(),{is_hit:!0,hit_pos:c,i,t:p,normal:u,s:n}}return{is_hit:!1}},t}(),z=function(){function t(t,n){void 0===t&&(t=320),void 0===n&&(n=240),this.w=320,this.h=240,this.backbuffer=null,this.w=t,this.h=n,this.backbuffer=new OffscreenCanvas(this.w,this.h)}return t.prototype.render_pixel=function(t){for(var n=this.backbuffer.getContext("2d"),i=n.getImageData(0,0,this.w,this.h),e=i.data,r=this.w/this.h,o=0;o<this.h;++o)for(var s=0;s<this.w;++s){var u=4*(s+o*this.w),a=(s+.5)/this.w,h=(o+.5)/this.h,c=t(2*a-1,2*(h=1-h)-1,r),p=c.x,f=c.y,l=c.z,w=1/2.1;p=Math.pow(p,w),f=Math.pow(f,w),l=Math.pow(l,w),e[u++]=Math.round(255*p),e[u++]=Math.round(255*f),e[u++]=Math.round(255*l),e[u]=255}n.putImageData(i,0,0)},t.prototype.set_pixel=function(t){for(var n=this.backbuffer.getContext("2d"),i=n.getImageData(0,0,this.w,this.h),e=i.data,r=(this.w,this.h,0);r<this.h;++r)for(var o=0;o<this.w;++o){var s=4*(o+r*this.w),u=t(o,r),a=u.r,h=u.g,c=u.b,p=1/2.1;a=Math.pow(a,p),h=Math.pow(h,p),c=Math.pow(c,p),e[s++]=Math.round(255*a),e[s++]=Math.round(255*h),e[s++]=Math.round(255*c),e[s]=255}n.putImageData(i,0,0)},t.prototype.show_buffer=function(t){var n=document.getElementById(t);n.style.width=this.w+"px",n.style.height=this.h+"px",n.width=n.clientWidth,n.height=n.clientHeight,n.getContext("bitmaprenderer").transferFromImageBitmap(this.backbuffer.transferToImageBitmap())},t}(),M=function(t,n){this.s=t,this.h=n},b=function(){function n(){}return n.prototype.shading=function(n,i,e,r){if(r>20)return console.log("超過上限"),x.green.color;var o=n.normal,s=n.i,u=_.reflect(s,o),a=n.hit_pos.add(u.multiply(f)),h=w(e,new t(a,u)),c=new _(1,1,1);if(0!=h.length){var p=h[0],l=p.s.shading(p,i,e,++r);return _.multiply3(c,l.multiply(.9))}return _.multiply3(c,x.gray.color.multiply(.9))},n}();new function(){var t=[new M(x.white,new d(new e(_.zero,_.up),16,16))];t.push(new M(x.yellow,new g(new _(6,2,-8),2))),t.push(new M(x.green,new g(new _(-6,2,-8),2))),t.push(new M(x.blue,new g(new _(0,2,-12),2))),t.push(new M(x.yellow,new g(new _(-10,6,0),6))),t.push(new M(new b,new g(new _(0,2,-2),2))),t.push(new M(new b,new g(new _(12,4,-6),4))),t.push(new M(new b,new g(new _(8,4,2),4)));var n=new m(new _(0,20,-20),_.zero,60,800,600,1,500),i=new z(800,600);n.render(i,t),i.show_buffer("canvas")}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,